{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-434UK3UL.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"1463-/rgOI0Wo51sqho8sd9MqpcqxrFs\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/rust.js\nvar require_rust = __commonJS({\n  \"node_modules/refractor/lang/rust.js\"(exports, module) {\n    module.exports = rust;\n    rust.displayName = \"rust\";\n    rust.aliases = [];\n    function rust(Prism) {\n      ;\n      (function(Prism2) {\n        var multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source;\n        for (var i = 0; i < 2; i++) {\n          multilineComment = multilineComment.replace(/<self>/g, function() {\n            return multilineComment;\n          });\n        }\n        multilineComment = multilineComment.replace(/<self>/g, function() {\n          return /[^\\s\\S]/.source;\n        });\n        Prism2.languages.rust = {\n          comment: [\n            {\n              pattern: RegExp(/(^|[^\\\\])/.source + multilineComment),\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              pattern: /(^|[^\\\\:])\\/\\/.*/,\n              lookbehind: true,\n              greedy: true\n            }\n          ],\n          string: {\n            pattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n            greedy: true\n          },\n          char: {\n            pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,\n            greedy: true\n          },\n          attribute: {\n            pattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n            greedy: true,\n            alias: \"attr-name\",\n            inside: {\n              string: null\n              // see below\n            }\n          },\n          // Closure params should not be confused with bitwise OR |\n          \"closure-params\": {\n            pattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              \"closure-punctuation\": {\n                pattern: /^\\||\\|$/,\n                alias: \"punctuation\"\n              },\n              rest: null\n              // see below\n            }\n          },\n          \"lifetime-annotation\": {\n            pattern: /'\\w+/,\n            alias: \"symbol\"\n          },\n          \"fragment-specifier\": {\n            pattern: /(\\$\\w+:)[a-z]+/,\n            lookbehind: true,\n            alias: \"punctuation\"\n          },\n          variable: /\\$\\w+/,\n          \"function-definition\": {\n            pattern: /(\\bfn\\s+)\\w+/,\n            lookbehind: true,\n            alias: \"function\"\n          },\n          \"type-definition\": {\n            pattern: /(\\b(?:enum|struct|trait|type|union)\\s+)\\w+/,\n            lookbehind: true,\n            alias: \"class-name\"\n          },\n          \"module-declaration\": [\n            {\n              pattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n              lookbehind: true,\n              alias: \"namespace\"\n            },\n            {\n              pattern: /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n              lookbehind: true,\n              alias: \"namespace\",\n              inside: {\n                punctuation: /::/\n              }\n            }\n          ],\n          keyword: [\n            // https://github.com/rust-lang/reference/blob/master/src/keywords.md\n            /\\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n            // primitives and str\n            // https://doc.rust-lang.org/stable/rust-by-example/primitives.html\n            /\\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\\b/\n          ],\n          // functions can technically start with an upper-case letter, but this will introduce a lot of false positives\n          // and Rust's naming conventions recommend snake_case anyway.\n          // https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\n          function: /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n          macro: {\n            pattern: /\\b\\w+!/,\n            alias: \"property\"\n          },\n          constant: /\\b[A-Z_][A-Z_\\d]+\\b/,\n          \"class-name\": /\\b[A-Z]\\w*\\b/,\n          namespace: {\n            pattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n            inside: {\n              punctuation: /::/\n            }\n          },\n          // Hex, oct, bin, dec numbers with visual separators and type suffix\n          number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\\b/,\n          boolean: /\\b(?:false|true)\\b/,\n          punctuation: /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n          operator: /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n        };\n        Prism2.languages.rust[\"closure-params\"].inside.rest = Prism2.languages.rust;\n        Prism2.languages.rust[\"attribute\"].inside[\"string\"] = Prism2.languages.rust[\"string\"];\n      })(Prism);\n    }\n  }\n});\n\nexport {\n  require_rust\n};\n//# sourceMappingURL=chunk-434UK3UL.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00007345806807279587
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-434UK3UL.js (200) â€” 2024-07-28T11:41:34.368Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-434UK3UL.js"
        }
      ]
    }
  ]
}