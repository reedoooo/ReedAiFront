{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-YQTBEAW6.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"2abd-Q/LJpiWQDVp69A+nc/M2/AtdQmM\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/perl.js\nvar require_perl = __commonJS({\n  \"node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/perl.js\"(exports, module) {\n    function source(re) {\n      if (!re) return null;\n      if (typeof re === \"string\") return re;\n      return re.source;\n    }\n    function concat(...args) {\n      const joined = args.map((x) => source(x)).join(\"\");\n      return joined;\n    }\n    function either(...args) {\n      const joined = \"(\" + args.map((x) => source(x)).join(\"|\") + \")\";\n      return joined;\n    }\n    function perl(hljs) {\n      const KEYWORDS = [\n        \"abs\",\n        \"accept\",\n        \"alarm\",\n        \"and\",\n        \"atan2\",\n        \"bind\",\n        \"binmode\",\n        \"bless\",\n        \"break\",\n        \"caller\",\n        \"chdir\",\n        \"chmod\",\n        \"chomp\",\n        \"chop\",\n        \"chown\",\n        \"chr\",\n        \"chroot\",\n        \"close\",\n        \"closedir\",\n        \"connect\",\n        \"continue\",\n        \"cos\",\n        \"crypt\",\n        \"dbmclose\",\n        \"dbmopen\",\n        \"defined\",\n        \"delete\",\n        \"die\",\n        \"do\",\n        \"dump\",\n        \"each\",\n        \"else\",\n        \"elsif\",\n        \"endgrent\",\n        \"endhostent\",\n        \"endnetent\",\n        \"endprotoent\",\n        \"endpwent\",\n        \"endservent\",\n        \"eof\",\n        \"eval\",\n        \"exec\",\n        \"exists\",\n        \"exit\",\n        \"exp\",\n        \"fcntl\",\n        \"fileno\",\n        \"flock\",\n        \"for\",\n        \"foreach\",\n        \"fork\",\n        \"format\",\n        \"formline\",\n        \"getc\",\n        \"getgrent\",\n        \"getgrgid\",\n        \"getgrnam\",\n        \"gethostbyaddr\",\n        \"gethostbyname\",\n        \"gethostent\",\n        \"getlogin\",\n        \"getnetbyaddr\",\n        \"getnetbyname\",\n        \"getnetent\",\n        \"getpeername\",\n        \"getpgrp\",\n        \"getpriority\",\n        \"getprotobyname\",\n        \"getprotobynumber\",\n        \"getprotoent\",\n        \"getpwent\",\n        \"getpwnam\",\n        \"getpwuid\",\n        \"getservbyname\",\n        \"getservbyport\",\n        \"getservent\",\n        \"getsockname\",\n        \"getsockopt\",\n        \"given\",\n        \"glob\",\n        \"gmtime\",\n        \"goto\",\n        \"grep\",\n        \"gt\",\n        \"hex\",\n        \"if\",\n        \"index\",\n        \"int\",\n        \"ioctl\",\n        \"join\",\n        \"keys\",\n        \"kill\",\n        \"last\",\n        \"lc\",\n        \"lcfirst\",\n        \"length\",\n        \"link\",\n        \"listen\",\n        \"local\",\n        \"localtime\",\n        \"log\",\n        \"lstat\",\n        \"lt\",\n        \"ma\",\n        \"map\",\n        \"mkdir\",\n        \"msgctl\",\n        \"msgget\",\n        \"msgrcv\",\n        \"msgsnd\",\n        \"my\",\n        \"ne\",\n        \"next\",\n        \"no\",\n        \"not\",\n        \"oct\",\n        \"open\",\n        \"opendir\",\n        \"or\",\n        \"ord\",\n        \"our\",\n        \"pack\",\n        \"package\",\n        \"pipe\",\n        \"pop\",\n        \"pos\",\n        \"print\",\n        \"printf\",\n        \"prototype\",\n        \"push\",\n        \"q|0\",\n        \"qq\",\n        \"quotemeta\",\n        \"qw\",\n        \"qx\",\n        \"rand\",\n        \"read\",\n        \"readdir\",\n        \"readline\",\n        \"readlink\",\n        \"readpipe\",\n        \"recv\",\n        \"redo\",\n        \"ref\",\n        \"rename\",\n        \"require\",\n        \"reset\",\n        \"return\",\n        \"reverse\",\n        \"rewinddir\",\n        \"rindex\",\n        \"rmdir\",\n        \"say\",\n        \"scalar\",\n        \"seek\",\n        \"seekdir\",\n        \"select\",\n        \"semctl\",\n        \"semget\",\n        \"semop\",\n        \"send\",\n        \"setgrent\",\n        \"sethostent\",\n        \"setnetent\",\n        \"setpgrp\",\n        \"setpriority\",\n        \"setprotoent\",\n        \"setpwent\",\n        \"setservent\",\n        \"setsockopt\",\n        \"shift\",\n        \"shmctl\",\n        \"shmget\",\n        \"shmread\",\n        \"shmwrite\",\n        \"shutdown\",\n        \"sin\",\n        \"sleep\",\n        \"socket\",\n        \"socketpair\",\n        \"sort\",\n        \"splice\",\n        \"split\",\n        \"sprintf\",\n        \"sqrt\",\n        \"srand\",\n        \"stat\",\n        \"state\",\n        \"study\",\n        \"sub\",\n        \"substr\",\n        \"symlink\",\n        \"syscall\",\n        \"sysopen\",\n        \"sysread\",\n        \"sysseek\",\n        \"system\",\n        \"syswrite\",\n        \"tell\",\n        \"telldir\",\n        \"tie\",\n        \"tied\",\n        \"time\",\n        \"times\",\n        \"tr\",\n        \"truncate\",\n        \"uc\",\n        \"ucfirst\",\n        \"umask\",\n        \"undef\",\n        \"unless\",\n        \"unlink\",\n        \"unpack\",\n        \"unshift\",\n        \"untie\",\n        \"until\",\n        \"use\",\n        \"utime\",\n        \"values\",\n        \"vec\",\n        \"wait\",\n        \"waitpid\",\n        \"wantarray\",\n        \"warn\",\n        \"when\",\n        \"while\",\n        \"write\",\n        \"x|0\",\n        \"xor\",\n        \"y|0\"\n      ];\n      const REGEX_MODIFIERS = /[dualxmsipngr]{0,12}/;\n      const PERL_KEYWORDS = {\n        $pattern: /[\\w.]+/,\n        keyword: KEYWORDS.join(\" \")\n      };\n      const SUBST = {\n        className: \"subst\",\n        begin: \"[$@]\\\\{\",\n        end: \"\\\\}\",\n        keywords: PERL_KEYWORDS\n      };\n      const METHOD = {\n        begin: /->\\{/,\n        end: /\\}/\n        // contains defined later\n      };\n      const VAR = {\n        variants: [\n          {\n            begin: /\\$\\d/\n          },\n          {\n            begin: concat(\n              /[$%@](\\^\\w\\b|#\\w+(::\\w+)*|\\{\\w+\\}|\\w+(::\\w*)*)/,\n              // negative look-ahead tries to avoid matching patterns that are not\n              // Perl at all like $ident$, @ident@, etc.\n              `(?![A-Za-z])(?![@$%])`\n            )\n          },\n          {\n            begin: /[$%@][^\\s\\w{]/,\n            relevance: 0\n          }\n        ]\n      };\n      const STRING_CONTAINS = [\n        hljs.BACKSLASH_ESCAPE,\n        SUBST,\n        VAR\n      ];\n      const REGEX_DELIMS = [\n        /!/,\n        /\\//,\n        /\\|/,\n        /\\?/,\n        /'/,\n        /\"/,\n        // valid but infrequent and weird\n        /#/\n        // valid but infrequent and weird\n      ];\n      const PAIRED_DOUBLE_RE = (prefix, open, close = \"\\\\1\") => {\n        const middle = close === \"\\\\1\" ? close : concat(close, open);\n        return concat(\n          concat(\"(?:\", prefix, \")\"),\n          open,\n          /(?:\\\\.|[^\\\\\\/])*?/,\n          middle,\n          /(?:\\\\.|[^\\\\\\/])*?/,\n          close,\n          REGEX_MODIFIERS\n        );\n      };\n      const PAIRED_RE = (prefix, open, close) => {\n        return concat(\n          concat(\"(?:\", prefix, \")\"),\n          open,\n          /(?:\\\\.|[^\\\\\\/])*?/,\n          close,\n          REGEX_MODIFIERS\n        );\n      };\n      const PERL_DEFAULT_CONTAINS = [\n        VAR,\n        hljs.HASH_COMMENT_MODE,\n        hljs.COMMENT(\n          /^=\\w/,\n          /=cut/,\n          {\n            endsWithParent: true\n          }\n        ),\n        METHOD,\n        {\n          className: \"string\",\n          contains: STRING_CONTAINS,\n          variants: [\n            {\n              begin: \"q[qwxr]?\\\\s*\\\\(\",\n              end: \"\\\\)\",\n              relevance: 5\n            },\n            {\n              begin: \"q[qwxr]?\\\\s*\\\\[\",\n              end: \"\\\\]\",\n              relevance: 5\n            },\n            {\n              begin: \"q[qwxr]?\\\\s*\\\\{\",\n              end: \"\\\\}\",\n              relevance: 5\n            },\n            {\n              begin: \"q[qwxr]?\\\\s*\\\\|\",\n              end: \"\\\\|\",\n              relevance: 5\n            },\n            {\n              begin: \"q[qwxr]?\\\\s*<\",\n              end: \">\",\n              relevance: 5\n            },\n            {\n              begin: \"qw\\\\s+q\",\n              end: \"q\",\n              relevance: 5\n            },\n            {\n              begin: \"'\",\n              end: \"'\",\n              contains: [hljs.BACKSLASH_ESCAPE]\n            },\n            {\n              begin: '\"',\n              end: '\"'\n            },\n            {\n              begin: \"`\",\n              end: \"`\",\n              contains: [hljs.BACKSLASH_ESCAPE]\n            },\n            {\n              begin: /\\{\\w+\\}/,\n              relevance: 0\n            },\n            {\n              begin: \"-?\\\\w+\\\\s*=>\",\n              relevance: 0\n            }\n          ]\n        },\n        {\n          className: \"number\",\n          begin: \"(\\\\b0[0-7_]+)|(\\\\b0x[0-9a-fA-F_]+)|(\\\\b[1-9][0-9_]*(\\\\.[0-9_]+)?)|[0_]\\\\b\",\n          relevance: 0\n        },\n        {\n          // regexp container\n          begin: \"(\\\\/\\\\/|\" + hljs.RE_STARTERS_RE + \"|\\\\b(split|return|print|reverse|grep)\\\\b)\\\\s*\",\n          keywords: \"split return print reverse grep\",\n          relevance: 0,\n          contains: [\n            hljs.HASH_COMMENT_MODE,\n            {\n              className: \"regexp\",\n              variants: [\n                // allow matching common delimiters\n                { begin: PAIRED_DOUBLE_RE(\"s|tr|y\", either(...REGEX_DELIMS)) },\n                // and then paired delmis\n                { begin: PAIRED_DOUBLE_RE(\"s|tr|y\", \"\\\\(\", \"\\\\)\") },\n                { begin: PAIRED_DOUBLE_RE(\"s|tr|y\", \"\\\\[\", \"\\\\]\") },\n                { begin: PAIRED_DOUBLE_RE(\"s|tr|y\", \"\\\\{\", \"\\\\}\") }\n              ],\n              relevance: 2\n            },\n            {\n              className: \"regexp\",\n              variants: [\n                {\n                  // could be a comment in many languages so do not count\n                  // as relevant\n                  begin: /(m|qr)\\/\\//,\n                  relevance: 0\n                },\n                // prefix is optional with /regex/\n                { begin: PAIRED_RE(\"(?:m|qr)?\", /\\//, /\\//) },\n                // allow matching common delimiters\n                { begin: PAIRED_RE(\"m|qr\", either(...REGEX_DELIMS), /\\1/) },\n                // allow common paired delmins\n                { begin: PAIRED_RE(\"m|qr\", /\\(/, /\\)/) },\n                { begin: PAIRED_RE(\"m|qr\", /\\[/, /\\]/) },\n                { begin: PAIRED_RE(\"m|qr\", /\\{/, /\\}/) }\n              ]\n            }\n          ]\n        },\n        ... (941 more characters)"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00019304105080664158
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-YQTBEAW6.js (200) — 2024-07-28T11:41:38.172Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-YQTBEAW6.js"
        }
      ]
    }
  ]
}