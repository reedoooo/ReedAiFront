{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-JKSMZBY4.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"32e5-VJSCuRHCFfjrgdOmcps3BeuICZY\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/markdown.js\nvar require_markdown = __commonJS({\n  \"node_modules/refractor/lang/markdown.js\"(exports, module) {\n    module.exports = markdown;\n    markdown.displayName = \"markdown\";\n    markdown.aliases = [\"md\"];\n    function markdown(Prism) {\n      ;\n      (function(Prism2) {\n        var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n        function createInline(pattern) {\n          pattern = pattern.replace(/<inner>/g, function() {\n            return inner;\n          });\n          return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + \"(?:\" + pattern + \")\");\n        }\n        var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n        var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(\n          /__/g,\n          function() {\n            return tableCell;\n          }\n        );\n        var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n        Prism2.languages.markdown = Prism2.languages.extend(\"markup\", {});\n        Prism2.languages.insertBefore(\"markdown\", \"prolog\", {\n          \"front-matter-block\": {\n            pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              punctuation: /^---|---$/,\n              \"front-matter\": {\n                pattern: /\\S+(?:\\s+\\S+)*/,\n                alias: [\"yaml\", \"language-yaml\"],\n                inside: Prism2.languages.yaml\n              }\n            }\n          },\n          blockquote: {\n            // > ...\n            pattern: /^>(?:[\\t ]*>)*/m,\n            alias: \"punctuation\"\n          },\n          table: {\n            pattern: RegExp(\n              \"^\" + tableRow + tableLine + \"(?:\" + tableRow + \")*\",\n              \"m\"\n            ),\n            inside: {\n              \"table-data-rows\": {\n                pattern: RegExp(\n                  \"^(\" + tableRow + tableLine + \")(?:\" + tableRow + \")*$\"\n                ),\n                lookbehind: true,\n                inside: {\n                  \"table-data\": {\n                    pattern: RegExp(tableCell),\n                    inside: Prism2.languages.markdown\n                  },\n                  punctuation: /\\|/\n                }\n              },\n              \"table-line\": {\n                pattern: RegExp(\"^(\" + tableRow + \")\" + tableLine + \"$\"),\n                lookbehind: true,\n                inside: {\n                  punctuation: /\\||:?-{3,}:?/\n                }\n              },\n              \"table-header-row\": {\n                pattern: RegExp(\"^\" + tableRow + \"$\"),\n                inside: {\n                  \"table-header\": {\n                    pattern: RegExp(tableCell),\n                    alias: \"important\",\n                    inside: Prism2.languages.markdown\n                  },\n                  punctuation: /\\|/\n                }\n              }\n            }\n          },\n          code: [\n            {\n              // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n              pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n              lookbehind: true,\n              alias: \"keyword\"\n            },\n            {\n              // ```optional language\n              // code block\n              // ```\n              pattern: /^```[\\s\\S]*?^```$/m,\n              greedy: true,\n              inside: {\n                \"code-block\": {\n                  pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n                  lookbehind: true\n                },\n                \"code-language\": {\n                  pattern: /^(```).+/,\n                  lookbehind: true\n                },\n                punctuation: /```/\n              }\n            }\n          ],\n          title: [\n            {\n              // title 1\n              // =======\n              // title 2\n              // -------\n              pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n              alias: \"important\",\n              inside: {\n                punctuation: /==+$|--+$/\n              }\n            },\n            {\n              // # title 1\n              // ###### title 6\n              pattern: /(^\\s*)#.+/m,\n              lookbehind: true,\n              alias: \"important\",\n              inside: {\n                punctuation: /^#+|#+$/\n              }\n            }\n          ],\n          hr: {\n            // ***\n            // ---\n            // * * *\n            // -----------\n            pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n            lookbehind: true,\n            alias: \"punctuation\"\n          },\n          list: {\n            // * item\n            // + item\n            // - item\n            // 1. item\n            pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n            lookbehind: true,\n            alias: \"punctuation\"\n          },\n          \"url-reference\": {\n            // [id]: http://example.com \"Optional title\"\n            // [id]: http://example.com 'Optional title'\n            // [id]: http://example.com (Optional title)\n            // [id]: <http://example.com> \"Optional title\"\n            pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n            inside: {\n              variable: {\n                pattern: /^(!?\\[)[^\\]]+/,\n                lookbehind: true\n              },\n              string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n              punctuation: /^[\\[\\]!:]|[<>]/\n            },\n            alias: \"url\"\n          },\n          bold: {\n            // **strong**\n            // __strong__\n            // allow one nested instance of italic text using the same delimiter\n            pattern: createInline(\n              /\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source\n            ),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              content: {\n                pattern: /(^..)[\\s\\S]+(?=..$)/,\n                lookbehind: true,\n                inside: {}\n                // see below\n              },\n              punctuation: /\\*\\*|__/\n            }\n          },\n          italic: {\n            // *em*\n            // _em_\n            // allow one nested instance of bold text using the same delimiter\n            pattern: createInline(\n              /\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source\n            ),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              content: {\n                pattern: /(^.)[\\s\\S]+(?=.$)/,\n                lookbehind: true,\n                inside: {}\n                // see below\n              },\n              punctuation: /[*_]/\n            }\n          },\n          strike: {\n            // ~~strike through~~\n            // ~strike~\n            // eslint-disable-next-line regexp/strict\n            pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              content: {\n                pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n                lookbehind: true,\n                inside: {}\n                // see below\n              },\n              punctuation: /~~?/\n            }\n          },\n          \"code-snippet\": {\n            // `code`\n            // ``code``\n            pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n            lookbehind: true,\n            greedy: true,\n            alias: [\"code\", \"keyword\"]\n          },\n          url: {\n            // [example](http://example.com \"Optional title\")\n            // [example][id]\n            // [example] [id]\n            pattern: createInline(\n              /!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source\n            ),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              operator: /^!/,\n              content: {\n                pattern: /(^\\[)[^\\]]+(?=\\])/,\n                lookbehind: true,\n                inside: {}\n                // see below\n              },\n              variable: {\n                pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n                lookbehind: true\n              },\n              url: {\n                pattern: /(^\\]\\()[^\\s)]+/,\n                lookbehind: true\n              },\n              string: {\n                pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n                lookbehind: true\n              }\n            }\n          }\n        });\n        [\"url\", \"bold\", \"italic\", \"strike\"].forEach(function(token) {\n          ;\n          [\"url\", \"bold\", \"italic\", \"strike\", \"code-snippet\"].forEach(function(inside) {\n            if (token !== inside) {\n              Prism2.languages.markdown[token].inside.content.inside[inside] = Prism2.languages.markdown[inside];\n            }\n          });\n        });\n        Prism2.hooks.add(\"after-tokenize\", function(env) {\n          if (env.language !== \"markdown\" && env.language !== \"md\") {\n            return;\n          }\n          function walkTokens(tokens) {\n            if (!tokens || typeof tokens === \"string\") {\n              return;\n            }\n            for (var i = 0, l = tokens.length; i < l; i++) {\n              var token = tokens[i];\n              if (token.type !== \"code\") {\n                walkTokens(token.content);\n                continue;\n              }\n              var codeLang = token.content[1];\n              var codeBlock = token.content[3];\n              if (codeLang && codeBlock && codeLang.type === \"code-language\" && codeBlock.type === \"code-block\" && typeof codeLang.content === \"string\") {\n                var lang = codeLang.content.replace(/\\b#/g,... (3029 more characters)"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.0008962919237092137
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-JKSMZBY4.js (200) — 2024-07-28T11:41:34.611Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-JKSMZBY4.js"
        }
      ]
    }
  ]
}