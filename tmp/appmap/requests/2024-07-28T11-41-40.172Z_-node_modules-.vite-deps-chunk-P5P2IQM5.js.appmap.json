{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-P5P2IQM5.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"117b-yTBLNTfHqc4ijmtoeKvF8a8CgAM\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/bash.js\nvar require_bash = __commonJS({\n  \"node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/bash.js\"(exports, module) {\n    function source(re) {\n      if (!re) return null;\n      if (typeof re === \"string\") return re;\n      return re.source;\n    }\n    function concat(...args) {\n      const joined = args.map((x) => source(x)).join(\"\");\n      return joined;\n    }\n    function bash(hljs) {\n      const VAR = {};\n      const BRACED_VAR = {\n        begin: /\\$\\{/,\n        end: /\\}/,\n        contains: [\n          \"self\",\n          {\n            begin: /:-/,\n            contains: [VAR]\n          }\n          // default values\n        ]\n      };\n      Object.assign(VAR, {\n        className: \"variable\",\n        variants: [\n          { begin: concat(\n            /\\$[\\w\\d#@][\\w\\d_]*/,\n            // negative look-ahead tries to avoid matching patterns that are not\n            // Perl at all like $ident$, @ident@, etc.\n            `(?![\\\\w\\\\d])(?![$])`\n          ) },\n          BRACED_VAR\n        ]\n      });\n      const SUBST = {\n        className: \"subst\",\n        begin: /\\$\\(/,\n        end: /\\)/,\n        contains: [hljs.BACKSLASH_ESCAPE]\n      };\n      const HERE_DOC = {\n        begin: /<<-?\\s*(?=\\w+)/,\n        starts: {\n          contains: [\n            hljs.END_SAME_AS_BEGIN({\n              begin: /(\\w+)/,\n              end: /(\\w+)/,\n              className: \"string\"\n            })\n          ]\n        }\n      };\n      const QUOTE_STRING = {\n        className: \"string\",\n        begin: /\"/,\n        end: /\"/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          VAR,\n          SUBST\n        ]\n      };\n      SUBST.contains.push(QUOTE_STRING);\n      const ESCAPED_QUOTE = {\n        className: \"\",\n        begin: /\\\\\"/\n      };\n      const APOS_STRING = {\n        className: \"string\",\n        begin: /'/,\n        end: /'/\n      };\n      const ARITHMETIC = {\n        begin: /\\$\\(\\(/,\n        end: /\\)\\)/,\n        contains: [\n          { begin: /\\d+#[0-9a-f]+/, className: \"number\" },\n          hljs.NUMBER_MODE,\n          VAR\n        ]\n      };\n      const SH_LIKE_SHELLS = [\n        \"fish\",\n        \"bash\",\n        \"zsh\",\n        \"sh\",\n        \"csh\",\n        \"ksh\",\n        \"tcsh\",\n        \"dash\",\n        \"scsh\"\n      ];\n      const KNOWN_SHEBANG = hljs.SHEBANG({\n        binary: `(${SH_LIKE_SHELLS.join(\"|\")})`,\n        relevance: 10\n      });\n      const FUNCTION = {\n        className: \"function\",\n        begin: /\\w[\\w\\d_]*\\s*\\(\\s*\\)\\s*\\{/,\n        returnBegin: true,\n        contains: [hljs.inherit(hljs.TITLE_MODE, { begin: /\\w[\\w\\d_]*/ })],\n        relevance: 0\n      };\n      return {\n        name: \"Bash\",\n        aliases: [\"sh\", \"zsh\"],\n        keywords: {\n          $pattern: /\\b[a-z._-]+\\b/,\n          keyword: \"if then else elif fi for while in do done case esac function\",\n          literal: \"true false\",\n          built_in: (\n            // Shell built-ins\n            // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n            \"break cd continue eval exec exit export getopts hash pwd readonly return shift test times trap umask unset alias bind builtin caller command declare echo enable help let local logout mapfile printf read readarray source type typeset ulimit unalias set shopt autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate fc fg float functions getcap getln history integer jobs kill limit log noglob popd print pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof zpty zregexparse zsocket zstyle ztcp\"\n          )\n        },\n        contains: [\n          KNOWN_SHEBANG,\n          // to catch known shells and boost relevancy\n          hljs.SHEBANG(),\n          // to catch unknown shells but still highlight the shebang\n          FUNCTION,\n          ARITHMETIC,\n          hljs.HASH_COMMENT_MODE,\n          HERE_DOC,\n          QUOTE_STRING,\n          ESCAPED_QUOTE,\n          APOS_STRING,\n          VAR\n        ]\n      };\n    }\n    module.exports = bash;\n  }\n});\n\nexport {\n  require_bash\n};\n//# sourceMappingURL=chunk-P5P2IQM5.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.0004605409922078252
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-P5P2IQM5.js (200) â€” 2024-07-28T11:41:40.172Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-P5P2IQM5.js"
        }
      ]
    }
  ]
}