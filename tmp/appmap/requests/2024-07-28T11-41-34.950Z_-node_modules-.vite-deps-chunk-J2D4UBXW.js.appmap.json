{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-J2D4UBXW.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"503a-ug3KdDAVst4Yu/MbsEW87CTi+Jk\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/swift.js\nvar require_swift = __commonJS({\n  \"node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/swift.js\"(exports, module) {\n    function source(re) {\n      if (!re) return null;\n      if (typeof re === \"string\") return re;\n      return re.source;\n    }\n    function lookahead(re) {\n      return concat(\"(?=\", re, \")\");\n    }\n    function concat(...args) {\n      const joined = args.map((x) => source(x)).join(\"\");\n      return joined;\n    }\n    function either(...args) {\n      const joined = \"(\" + args.map((x) => source(x)).join(\"|\") + \")\";\n      return joined;\n    }\n    var keywordWrapper = (keyword) => concat(\n      /\\b/,\n      keyword,\n      /\\w$/.test(keyword) ? /\\b/ : /\\B/\n    );\n    var dotKeywords = [\n      \"Protocol\",\n      // contextual\n      \"Type\"\n      // contextual\n    ].map(keywordWrapper);\n    var optionalDotKeywords = [\n      \"init\",\n      \"self\"\n    ].map(keywordWrapper);\n    var keywordTypes = [\n      \"Any\",\n      \"Self\"\n    ];\n    var keywords = [\n      // strings below will be fed into the regular `keywords` engine while regex\n      // will result in additional modes being created to scan for those keywords to\n      // avoid conflicts with other rules\n      \"associatedtype\",\n      \"async\",\n      \"await\",\n      /as\\?/,\n      // operator\n      /as!/,\n      // operator\n      \"as\",\n      // operator\n      \"break\",\n      \"case\",\n      \"catch\",\n      \"class\",\n      \"continue\",\n      \"convenience\",\n      // contextual\n      \"default\",\n      \"defer\",\n      \"deinit\",\n      \"didSet\",\n      // contextual\n      \"do\",\n      \"dynamic\",\n      // contextual\n      \"else\",\n      \"enum\",\n      \"extension\",\n      \"fallthrough\",\n      /fileprivate\\(set\\)/,\n      \"fileprivate\",\n      \"final\",\n      // contextual\n      \"for\",\n      \"func\",\n      \"get\",\n      // contextual\n      \"guard\",\n      \"if\",\n      \"import\",\n      \"indirect\",\n      // contextual\n      \"infix\",\n      // contextual\n      /init\\?/,\n      /init!/,\n      \"inout\",\n      /internal\\(set\\)/,\n      \"internal\",\n      \"in\",\n      \"is\",\n      // operator\n      \"lazy\",\n      // contextual\n      \"let\",\n      \"mutating\",\n      // contextual\n      \"nonmutating\",\n      // contextual\n      /open\\(set\\)/,\n      // contextual\n      \"open\",\n      // contextual\n      \"operator\",\n      \"optional\",\n      // contextual\n      \"override\",\n      // contextual\n      \"postfix\",\n      // contextual\n      \"precedencegroup\",\n      \"prefix\",\n      // contextual\n      /private\\(set\\)/,\n      \"private\",\n      \"protocol\",\n      /public\\(set\\)/,\n      \"public\",\n      \"repeat\",\n      \"required\",\n      // contextual\n      \"rethrows\",\n      \"return\",\n      \"set\",\n      // contextual\n      \"some\",\n      // contextual\n      \"static\",\n      \"struct\",\n      \"subscript\",\n      \"super\",\n      \"switch\",\n      \"throws\",\n      \"throw\",\n      /try\\?/,\n      // operator\n      /try!/,\n      // operator\n      \"try\",\n      // operator\n      \"typealias\",\n      /unowned\\(safe\\)/,\n      // contextual\n      /unowned\\(unsafe\\)/,\n      // contextual\n      \"unowned\",\n      // contextual\n      \"var\",\n      \"weak\",\n      // contextual\n      \"where\",\n      \"while\",\n      \"willSet\"\n      // contextual\n    ];\n    var literals = [\n      \"false\",\n      \"nil\",\n      \"true\"\n    ];\n    var precedencegroupKeywords = [\n      \"assignment\",\n      \"associativity\",\n      \"higherThan\",\n      \"left\",\n      \"lowerThan\",\n      \"none\",\n      \"right\"\n    ];\n    var numberSignKeywords = [\n      \"#colorLiteral\",\n      \"#column\",\n      \"#dsohandle\",\n      \"#else\",\n      \"#elseif\",\n      \"#endif\",\n      \"#error\",\n      \"#file\",\n      \"#fileID\",\n      \"#fileLiteral\",\n      \"#filePath\",\n      \"#function\",\n      \"#if\",\n      \"#imageLiteral\",\n      \"#keyPath\",\n      \"#line\",\n      \"#selector\",\n      \"#sourceLocation\",\n      \"#warn_unqualified_access\",\n      \"#warning\"\n    ];\n    var builtIns = [\n      \"abs\",\n      \"all\",\n      \"any\",\n      \"assert\",\n      \"assertionFailure\",\n      \"debugPrint\",\n      \"dump\",\n      \"fatalError\",\n      \"getVaList\",\n      \"isKnownUniquelyReferenced\",\n      \"max\",\n      \"min\",\n      \"numericCast\",\n      \"pointwiseMax\",\n      \"pointwiseMin\",\n      \"precondition\",\n      \"preconditionFailure\",\n      \"print\",\n      \"readLine\",\n      \"repeatElement\",\n      \"sequence\",\n      \"stride\",\n      \"swap\",\n      \"swift_unboxFromSwiftValueWithType\",\n      \"transcode\",\n      \"type\",\n      \"unsafeBitCast\",\n      \"unsafeDowncast\",\n      \"withExtendedLifetime\",\n      \"withUnsafeMutablePointer\",\n      \"withUnsafePointer\",\n      \"withVaList\",\n      \"withoutActuallyEscaping\",\n      \"zip\"\n    ];\n    var operatorHead = either(\n      /[/=\\-+!*%<>&|^~?]/,\n      /[\\u00A1-\\u00A7]/,\n      /[\\u00A9\\u00AB]/,\n      /[\\u00AC\\u00AE]/,\n      /[\\u00B0\\u00B1]/,\n      /[\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7]/,\n      /[\\u2016-\\u2017]/,\n      /[\\u2020-\\u2027]/,\n      /[\\u2030-\\u203E]/,\n      /[\\u2041-\\u2053]/,\n      /[\\u2055-\\u205E]/,\n      /[\\u2190-\\u23FF]/,\n      /[\\u2500-\\u2775]/,\n      /[\\u2794-\\u2BFF]/,\n      /[\\u2E00-\\u2E7F]/,\n      /[\\u3001-\\u3003]/,\n      /[\\u3008-\\u3020]/,\n      /[\\u3030]/\n    );\n    var operatorCharacter = either(\n      operatorHead,\n      /[\\u0300-\\u036F]/,\n      /[\\u1DC0-\\u1DFF]/,\n      /[\\u20D0-\\u20FF]/,\n      /[\\uFE00-\\uFE0F]/,\n      /[\\uFE20-\\uFE2F]/\n      // TODO: The following characters are also allowed, but the regex isn't supported yet.\n      // /[\\u{E0100}-\\u{E01EF}]/u\n    );\n    var operator = concat(operatorHead, operatorCharacter, \"*\");\n    var identifierHead = either(\n      /[a-zA-Z_]/,\n      /[\\u00A8\\u00AA\\u00AD\\u00AF\\u00B2-\\u00B5\\u00B7-\\u00BA]/,\n      /[\\u00BC-\\u00BE\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF]/,\n      /[\\u0100-\\u02FF\\u0370-\\u167F\\u1681-\\u180D\\u180F-\\u1DBF]/,\n      /[\\u1E00-\\u1FFF]/,\n      /[\\u200B-\\u200D\\u202A-\\u202E\\u203F-\\u2040\\u2054\\u2060-\\u206F]/,\n      /[\\u2070-\\u20CF\\u2100-\\u218F\\u2460-\\u24FF\\u2776-\\u2793]/,\n      /[\\u2C00-\\u2DFF\\u2E80-\\u2FFF]/,\n      /[\\u3004-\\u3007\\u3021-\\u302F\\u3031-\\u303F\\u3040-\\uD7FF]/,\n      /[\\uF900-\\uFD3D\\uFD40-\\uFDCF\\uFDF0-\\uFE1F\\uFE30-\\uFE44]/,\n      /[\\uFE47-\\uFEFE\\uFF00-\\uFFFD]/\n      // Should be /[\\uFE47-\\uFFFD]/, but we have to exclude FEFF.\n      // The following characters are also allowed, but the regexes aren't supported yet.\n      // /[\\u{10000}-\\u{1FFFD}\\u{20000-\\u{2FFFD}\\u{30000}-\\u{3FFFD}\\u{40000}-\\u{4FFFD}]/u,\n      // /[\\u{50000}-\\u{5FFFD}\\u{60000-\\u{6FFFD}\\u{70000}-\\u{7FFFD}\\u{80000}-\\u{8FFFD}]/u,\n      // /[\\u{90000}-\\u{9FFFD}\\u{A0000-\\u{AFFFD}\\u{B0000}-\\u{BFFFD}\\u{C0000}-\\u{CFFFD}]/u,\n      // /[\\u{D0000}-\\u{DFFFD}\\u{E0000-\\u{EFFFD}]/u\n    );\n    var identifierCharacter = either(\n      identifierHead,\n      /\\d/,\n      /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F]/\n    );\n    var identifier = concat(identifierHead, identifierCharacter, \"*\");\n    var typeIdentifier = concat(/[A-Z]/, identifierCharacter, \"*\");\n    var keywordAttributes = [\n      \"autoclosure\",\n      concat(/convention\\(/, either(\"swift\", \"block\", \"c\"), /\\)/),\n      \"discardableResult\",\n      \"dynamicCallable\",\n      \"dynamicMemberLookup\",\n      \"escaping\",\n      \"frozen\",\n      \"GKInspectable\",\n      \"IBAction\",\n      \"IBDesignable\",\n      \"IBInspectable\",\n      \"IBOutlet\",\n      \"IBSegueAction\",\n      \"inlinable\",\n      \"main\",\n      \"nonobjc\",\n      \"NSApplicationMain\",\n      \"NSCopying\",\n      \"NSManaged\",\n      concat(/objc\\(/, identifier, /\\)/),\n      \"objc\",\n      \"objcMembers\",\n      \"propertyWrapper\",\n      \"requires_stored_property_inits\",\n      \"testable\",\n      \"UIApplicationMain\",\n      \"unknown\",\n      \"usableFromInline\"\n    ];\n    var availabilityKeywords = [\n      \"iOS\",\n      \"iOSApplicationExtension\",\n      \"macOS\",\n      \"macOSApplicationExtension\",\n      \"macCatalyst\",\n      \"macCatalystApplicationExtension\",\n      \"watchOS\",\n      \"watchOSApplicationExtension\",\n      \"tvOS\",\n      \"tvOSApplicationExtension\",\n      \"swift\"\n    ];\n    function swift(hljs) {\n      const WHITESPACE = {\n        match: /\\s+/,\n        relevance: 0\n      };\n      const BLOCK_COMMENT = hljs.COMMENT(\n        \"/\\\\*\",\n        \"\\\\*/\",\n        {\n          contains: [\"self\"]\n        }\n      );\n      const COMMENTS = [\n        hljs.C_LINE_COMMENT_MODE,\n        BLOCK_COMMENT\n      ];\n      const DOT_KEYWORD = {\n        className: \"keyword\",\n        begin: concat(/\\./, lookahead(either(...dotKeywords, ...optionalDotKeywords))),\n        end: either(...dotKeywords, ...optionalDotKeywords),\n        excludeBegin: true\n      };\n      const KEYWORD_GUARD = {\n        // Consume .keyword to prevent highlighting properties and methods as keywords.\n        match: concat(/\\./, either(...keywords)),\n        relevance: 0\n      };\n      const PLAIN_KEYWORDS = keywords.filter((kw) => typeof kw === \"string\").concat([\"_|0\"]);\n      const REGEX_KEYWORDS = keywords.filter((kw) => typeof kw !== \"string\").concat(keywordTypes).map(keywordWrapper);\n      const KEYWORD = {\n        variants: [\n          {\n            className: \"keyword\",\n            match: either(...REGEX_KEYWORDS, ...optionalDotKeywords)\n          }\n        ]\n      };\n      const KEYWORDS = {\n        $pattern: either(\n          /\\b\\w+/,\n          // regular keywords\n          /#\\w+/\n          // number keywords\n        ),\n        keyword: PLAIN_KEYWORDS.concat(numberSignKeywords),\n        literal: literals\n      };\n      const KEYWORD_MODES = [\n        DOT_KEYWORD,\n        KEYWORD_GUARD,\n        KEYWORD\n      ];\n      const BUILT_IN_GUARD = {\n        // Consume .built_in to prevent highlighting properties and methods.\n        match: concat(/\\./, either(...builtIns)),\n        relevance: 0\n      };\n      const BUILT_IN = {\n        className: \"built_in\",\n        match: concat(/\\b/, either(...builtIns), /(?=\\()/)\n      };\n      const BUILT_INS = [\n        BUILT_IN_GUARD,\n        BUILT_IN\n      ];\n      const OPERATOR_GUARD = {\n        // Prevent -> from... (10538 more characters)"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.0002619160804897547
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-J2D4UBXW.js (200) — 2024-07-28T11:41:34.950Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-J2D4UBXW.js"
        }
      ]
    }
  ]
}