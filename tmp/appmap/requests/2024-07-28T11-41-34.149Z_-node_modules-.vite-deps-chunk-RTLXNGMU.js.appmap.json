{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-RTLXNGMU.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"16dd-OhpsIz6rkbjokmiz8KNMeA9ze9A\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/swift.js\nvar require_swift = __commonJS({\n  \"node_modules/refractor/lang/swift.js\"(exports, module) {\n    module.exports = swift;\n    swift.displayName = \"swift\";\n    swift.aliases = [];\n    function swift(Prism) {\n      Prism.languages.swift = {\n        comment: {\n          // Nested comments are supported up to 2 levels\n          pattern: /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\n          lookbehind: true,\n          greedy: true\n        },\n        \"string-literal\": [\n          // https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\n          {\n            pattern: RegExp(\n              /(^|[^\"#])/.source + \"(?:\" + // single-line string\n              /\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/.source + \"|\" + // multi-line string\n              /\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/.source + \")\" + /(?![\"#])/.source\n            ),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              interpolation: {\n                pattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n                lookbehind: true,\n                inside: null\n                // see below\n              },\n              \"interpolation-punctuation\": {\n                pattern: /^\\)|\\\\\\($/,\n                alias: \"punctuation\"\n              },\n              punctuation: /\\\\(?=[\\r\\n])/,\n              string: /[\\s\\S]+/\n            }\n          },\n          {\n            pattern: RegExp(\n              /(^|[^\"#])(#+)/.source + \"(?:\" + // single-line string\n              /\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/.source + \"|\" + // multi-line string\n              /\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source + \")\\\\2\"\n            ),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              interpolation: {\n                pattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n                lookbehind: true,\n                inside: null\n                // see below\n              },\n              \"interpolation-punctuation\": {\n                pattern: /^\\)|\\\\#+\\($/,\n                alias: \"punctuation\"\n              },\n              string: /[\\s\\S]+/\n            }\n          }\n        ],\n        directive: {\n          // directives with conditions\n          pattern: RegExp(\n            /#/.source + \"(?:\" + (/(?:elseif|if)\\b/.source + \"(?:[ \t]*\" + // This regex is a little complex. It's equivalent to this:\n            //   (?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*<round>)?|<round>)(?:[ \\t]*(?:&&|\\|\\|))?\n            // where <round> is a general parentheses expression.\n            /(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/.source + \")+\") + \"|\" + /(?:else|endif)\\b/.source + \")\"\n          ),\n          alias: \"property\",\n          inside: {\n            \"directive-name\": /^#\\w+/,\n            boolean: /\\b(?:false|true)\\b/,\n            number: /\\b\\d+(?:\\.\\d+)*\\b/,\n            operator: /!|&&|\\|\\||[<>]=?/,\n            punctuation: /[(),]/\n          }\n        },\n        literal: {\n          pattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\n          alias: \"constant\"\n        },\n        \"other-directive\": {\n          pattern: /#\\w+\\b/,\n          alias: \"property\"\n        },\n        attribute: {\n          pattern: /@\\w+/,\n          alias: \"atrule\"\n        },\n        \"function-definition\": {\n          pattern: /(\\bfunc\\s+)\\w+/,\n          lookbehind: true,\n          alias: \"function\"\n        },\n        label: {\n          // https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141\n          pattern: /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\n          lookbehind: true,\n          alias: \"important\"\n        },\n        keyword: /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\n        boolean: /\\b(?:false|true)\\b/,\n        nil: {\n          pattern: /\\bnil\\b/,\n          alias: \"constant\"\n        },\n        \"short-argument\": /\\$\\d+\\b/,\n        omit: {\n          pattern: /\\b_\\b/,\n          alias: \"keyword\"\n        },\n        number: /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n        // A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.\n        \"class-name\": /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\n        function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n        constant: /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n        // Operators are generic in Swift. Developers can even create new operators (e.g. +++).\n        // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481\n        // This regex only supports ASCII operators.\n        operator: /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\n        punctuation: /[{}[\\]();,.:\\\\]/\n      };\n      Prism.languages.swift[\"string-literal\"].forEach(function(rule) {\n        rule.inside[\"interpolation\"].inside = Prism.languages.swift;\n      });\n    }\n  }\n});\n\nexport {\n  require_swift\n};\n//# sourceMappingURL=chunk-RTLXNGMU.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.0004081249935552478
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-RTLXNGMU.js (200) â€” 2024-07-28T11:41:34.149Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-RTLXNGMU.js"
        }
      ]
    }
  ]
}