{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-5NF4KCYF.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"1599-y96q+ugcswf0PP1VNBUQYpwOfZo\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/ada.js\nvar require_ada = __commonJS({\n  \"node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/ada.js\"(exports, module) {\n    function ada(hljs) {\n      const INTEGER_RE = \"\\\\d(_|\\\\d)*\";\n      const EXPONENT_RE = \"[eE][-+]?\" + INTEGER_RE;\n      const DECIMAL_LITERAL_RE = INTEGER_RE + \"(\\\\.\" + INTEGER_RE + \")?(\" + EXPONENT_RE + \")?\";\n      const BASED_INTEGER_RE = \"\\\\w+\";\n      const BASED_LITERAL_RE = INTEGER_RE + \"#\" + BASED_INTEGER_RE + \"(\\\\.\" + BASED_INTEGER_RE + \")?#(\" + EXPONENT_RE + \")?\";\n      const NUMBER_RE = \"\\\\b(\" + BASED_LITERAL_RE + \"|\" + DECIMAL_LITERAL_RE + \")\";\n      const ID_REGEX = \"[A-Za-z](_?[A-Za-z0-9.])*\";\n      const BAD_CHARS = `[]\\\\{\\\\}%#'\"`;\n      const COMMENTS = hljs.COMMENT(\"--\", \"$\");\n      const VAR_DECLS = {\n        // TODO: These spaces are not required by the Ada syntax\n        // however, I have yet to see handwritten Ada code where\n        // someone does not put spaces around :\n        begin: \"\\\\s+:\\\\s+\",\n        end: \"\\\\s*(:=|;|\\\\)|=>|$)\",\n        // endsWithParent: true,\n        // returnBegin: true,\n        illegal: BAD_CHARS,\n        contains: [\n          {\n            // workaround to avoid highlighting\n            // named loops and declare blocks\n            beginKeywords: \"loop for declare others\",\n            endsParent: true\n          },\n          {\n            // properly highlight all modifiers\n            className: \"keyword\",\n            beginKeywords: \"not null constant access function procedure in out aliased exception\"\n          },\n          {\n            className: \"type\",\n            begin: ID_REGEX,\n            endsParent: true,\n            relevance: 0\n          }\n        ]\n      };\n      return {\n        name: \"Ada\",\n        case_insensitive: true,\n        keywords: {\n          keyword: \"abort else new return abs elsif not reverse abstract end accept entry select access exception of separate aliased exit or some all others subtype and for out synchronized array function overriding at tagged generic package task begin goto pragma terminate body private then if procedure type case in protected constant interface is raise use declare range delay limited record when delta loop rem while digits renames with do mod requeue xor\",\n          literal: \"True False\"\n        },\n        contains: [\n          COMMENTS,\n          // strings \"foobar\"\n          {\n            className: \"string\",\n            begin: /\"/,\n            end: /\"/,\n            contains: [{\n              begin: /\"\"/,\n              relevance: 0\n            }]\n          },\n          // characters ''\n          {\n            // character literals always contain one char\n            className: \"string\",\n            begin: /'.'/\n          },\n          {\n            // number literals\n            className: \"number\",\n            begin: NUMBER_RE,\n            relevance: 0\n          },\n          {\n            // Attributes\n            className: \"symbol\",\n            begin: \"'\" + ID_REGEX\n          },\n          {\n            // package definition, maybe inside generic\n            className: \"title\",\n            begin: \"(\\\\bwith\\\\s+)?(\\\\bprivate\\\\s+)?\\\\bpackage\\\\s+(\\\\bbody\\\\s+)?\",\n            end: \"(is|$)\",\n            keywords: \"package body\",\n            excludeBegin: true,\n            excludeEnd: true,\n            illegal: BAD_CHARS\n          },\n          {\n            // function/procedure declaration/definition\n            // maybe inside generic\n            begin: \"(\\\\b(with|overriding)\\\\s+)?\\\\b(function|procedure)\\\\s+\",\n            end: \"(\\\\bis|\\\\bwith|\\\\brenames|\\\\)\\\\s*;)\",\n            keywords: \"overriding function procedure with is renames return\",\n            // we need to re-match the 'function' keyword, so that\n            // the title mode below matches only exactly once\n            returnBegin: true,\n            contains: [\n              COMMENTS,\n              {\n                // name of the function/procedure\n                className: \"title\",\n                begin: \"(\\\\bwith\\\\s+)?\\\\b(function|procedure)\\\\s+\",\n                end: \"(\\\\(|\\\\s+|$)\",\n                excludeBegin: true,\n                excludeEnd: true,\n                illegal: BAD_CHARS\n              },\n              // 'self'\n              // // parameter types\n              VAR_DECLS,\n              {\n                // return type\n                className: \"type\",\n                begin: \"\\\\breturn\\\\s+\",\n                end: \"(\\\\s+|;|$)\",\n                keywords: \"return\",\n                excludeBegin: true,\n                excludeEnd: true,\n                // we are done with functions\n                endsParent: true,\n                illegal: BAD_CHARS\n              }\n            ]\n          },\n          {\n            // new type declarations\n            // maybe inside generic\n            className: \"type\",\n            begin: \"\\\\b(sub)?type\\\\s+\",\n            end: \"\\\\s+\",\n            keywords: \"type\",\n            excludeBegin: true,\n            illegal: BAD_CHARS\n          },\n          // see comment above the definition\n          VAR_DECLS\n          // no markup\n          // relevance boosters for small snippets\n          // {begin: '\\\\s*=>\\\\s*'},\n          // {begin: '\\\\s*:=\\\\s*'},\n          // {begin: '\\\\s+:=\\\\s+'},\n        ]\n      };\n    }\n    module.exports = ada;\n  }\n});\n\nexport {\n  require_ada\n};\n//# sourceMappingURL=chunk-5NF4KCYF.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00019262498244643211
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-5NF4KCYF.js (200) â€” 2024-07-28T11:41:40.398Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-5NF4KCYF.js"
        }
      ]
    }
  ]
}