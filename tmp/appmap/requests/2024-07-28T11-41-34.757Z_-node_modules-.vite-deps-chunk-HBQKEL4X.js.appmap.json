{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-HBQKEL4X.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"fd1-8Du5Q3SwZHW3FG/ARWnMz6UsZYY\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/elixir.js\nvar require_elixir = __commonJS({\n  \"node_modules/refractor/lang/elixir.js\"(exports, module) {\n    module.exports = elixir;\n    elixir.displayName = \"elixir\";\n    elixir.aliases = [];\n    function elixir(Prism) {\n      Prism.languages.elixir = {\n        doc: {\n          pattern: /@(?:doc|moduledoc)\\s+(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2)/,\n          inside: {\n            attribute: /^@\\w+/,\n            string: /['\"][\\s\\S]+/\n          }\n        },\n        comment: {\n          pattern: /#.*/,\n          greedy: true\n        },\n        // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n        regex: {\n          pattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n          greedy: true\n        },\n        string: [\n          {\n            // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n            pattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n            greedy: true,\n            inside: {\n              // See interpolation below\n            }\n          },\n          {\n            pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n            greedy: true,\n            inside: {\n              // See interpolation below\n            }\n          },\n          {\n            // Multi-line strings are allowed\n            pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n            greedy: true,\n            inside: {\n              // See interpolation below\n            }\n          }\n        ],\n        atom: {\n          // Look-behind prevents bad highlighting of the :: operator\n          pattern: /(^|[^:]):\\w+/,\n          lookbehind: true,\n          alias: \"symbol\"\n        },\n        module: {\n          pattern: /\\b[A-Z]\\w*\\b/,\n          alias: \"class-name\"\n        },\n        // Look-ahead prevents bad highlighting of the :: operator\n        \"attr-name\": /\\b\\w+\\??:(?!:)/,\n        argument: {\n          // Look-behind prevents bad highlighting of the && operator\n          pattern: /(^|[^&])&\\d+/,\n          lookbehind: true,\n          alias: \"variable\"\n        },\n        attribute: {\n          pattern: /@\\w+/,\n          alias: \"variable\"\n        },\n        function: /\\b[_a-zA-Z]\\w*[?!]?(?:(?=\\s*(?:\\.\\s*)?\\()|(?=\\/\\d))/,\n        number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n        keyword: /\\b(?:after|alias|and|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n|np|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|quote|raise|require|rescue|try|unless|unquote|use|when)\\b/,\n        boolean: /\\b(?:false|nil|true)\\b/,\n        operator: [\n          /\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,\n          {\n            // We don't want to match <<\n            pattern: /([^<])<(?!<)/,\n            lookbehind: true\n          },\n          {\n            // We don't want to match >>\n            pattern: /([^>])>(?!>)/,\n            lookbehind: true\n          }\n        ],\n        punctuation: /<<|>>|[.,%\\[\\]{}()]/\n      };\n      Prism.languages.elixir.string.forEach(function(o) {\n        o.inside = {\n          interpolation: {\n            pattern: /#\\{[^}]+\\}/,\n            inside: {\n              delimiter: {\n                pattern: /^#\\{|\\}$/,\n                alias: \"punctuation\"\n              },\n              rest: Prism.languages.elixir\n            }\n          }\n        };\n      });\n    }\n  }\n});\n\nexport {\n  require_elixir\n};\n//# sourceMappingURL=chunk-HBQKEL4X.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.0003361250273883343
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-HBQKEL4X.js (200) â€” 2024-07-28T11:41:34.757Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-HBQKEL4X.js"
        }
      ]
    }
  ]
}