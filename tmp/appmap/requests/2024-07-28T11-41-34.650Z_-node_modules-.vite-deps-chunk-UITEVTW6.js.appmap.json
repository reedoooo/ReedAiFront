{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-UITEVTW6.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"2fd4-x7ZPEGsMvGUoFaqE/UAnAwgB1Bc\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  require_markup_templating\n} from \"/node_modules/.vite/deps/chunk-BCCZJ3TR.js?v=b39bb78e\";\nimport {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/php.js\nvar require_php = __commonJS({\n  \"node_modules/refractor/lang/php.js\"(exports, module) {\n    var refractorMarkupTemplating = require_markup_templating();\n    module.exports = php;\n    php.displayName = \"php\";\n    php.aliases = [];\n    function php(Prism) {\n      Prism.register(refractorMarkupTemplating);\n      (function(Prism2) {\n        var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/;\n        var constant = [\n          {\n            pattern: /\\b(?:false|true)\\b/i,\n            alias: \"boolean\"\n          },\n          {\n            pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n            greedy: true,\n            lookbehind: true\n          },\n          {\n            pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n            greedy: true,\n            lookbehind: true\n          },\n          /\\b(?:null)\\b/i,\n          /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/\n        ];\n        var number = /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i;\n        var operator = /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;\n        var punctuation = /[{}\\[\\](),:;]/;\n        Prism2.languages.php = {\n          delimiter: {\n            pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n            alias: \"important\"\n          },\n          comment,\n          variable: /\\$+(?:\\w+\\b|(?=\\{))/,\n          package: {\n            pattern: /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n            lookbehind: true,\n            inside: {\n              punctuation: /\\\\/\n            }\n          },\n          \"class-name-definition\": {\n            pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n            lookbehind: true,\n            alias: \"class-name\"\n          },\n          \"function-definition\": {\n            pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n            lookbehind: true,\n            alias: \"function\"\n          },\n          keyword: [\n            {\n              pattern: /(\\(\\s*)\\b(?:array|bool|boolean|float|int|integer|object|string)\\b(?=\\s*\\))/i,\n              alias: \"type-casting\",\n              greedy: true,\n              lookbehind: true\n            },\n            {\n              pattern: /([(,?]\\s*)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string)\\b(?=\\s*\\$)/i,\n              alias: \"type-hint\",\n              greedy: true,\n              lookbehind: true\n            },\n            {\n              pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string|void)\\b/i,\n              alias: \"return-type\",\n              greedy: true,\n              lookbehind: true\n            },\n            {\n              pattern: /\\b(?:array(?!\\s*\\()|bool|float|int|iterable|mixed|object|string|void)\\b/i,\n              alias: \"type-declaration\",\n              greedy: true\n            },\n            {\n              pattern: /(\\|\\s*)(?:false|null)\\b|\\b(?:false|null)(?=\\s*\\|)/i,\n              alias: \"type-declaration\",\n              greedy: true,\n              lookbehind: true\n            },\n            {\n              pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n              alias: \"static-context\",\n              greedy: true\n            },\n            {\n              // yield from\n              pattern: /(\\byield\\s+)from\\b/i,\n              lookbehind: true\n            },\n            // `class` is always a keyword unlike other keywords\n            /\\bclass\\b/i,\n            {\n              // https://www.php.net/manual/en/reserved.keywords.php\n              //\n              // keywords cannot be preceded by \"->\"\n              // the complex lookbehind means `(?<!(?:->|::)\\s*)`\n              pattern: /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\b/i,\n              lookbehind: true\n            }\n          ],\n          \"argument-name\": {\n            pattern: /([(,]\\s+)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n            lookbehind: true\n          },\n          \"class-name\": [\n            {\n              pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n              greedy: true,\n              lookbehind: true\n            },\n            {\n              pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n              greedy: true,\n              lookbehind: true\n            },\n            {\n              pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n              greedy: true\n            },\n            {\n              pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n              alias: \"class-name-fully-qualified\",\n              greedy: true,\n              lookbehind: true,\n              inside: {\n                punctuation: /\\\\/\n              }\n            },\n            {\n              pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n              alias: \"class-name-fully-qualified\",\n              greedy: true,\n              inside: {\n                punctuation: /\\\\/\n              }\n            },\n            {\n              pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n              alias: \"class-name-fully-qualified\",\n              greedy: true,\n              lookbehind: true,\n              inside: {\n                punctuation: /\\\\/\n              }\n            },\n            {\n              pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n              alias: \"type-declaration\",\n              greedy: true\n            },\n            {\n              pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n              alias: [\"class-name-fully-qualified\", \"type-declaration\"],\n              greedy: true,\n              inside: {\n                punctuation: /\\\\/\n              }\n            },\n            {\n              pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n              alias: \"static-context\",\n              greedy: true\n            },\n            {\n              pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n              alias: [\"class-name-fully-qualified\", \"static-context\"],\n              greedy: true,\n              inside: {\n                punctuation: /\\\\/\n              }\n            },\n            {\n              pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n              alias: \"type-hint\",\n              greedy: true,\n              lookbehind: true\n            },\n            {\n              pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n              alias: [\"class-name-fully-qualified\", \"type-hint\"],\n              greedy: true,\n              lookbehind: true,\n              inside: {\n                punctuation: /\\\\/\n              }\n            },\n            {\n              pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n              alias: \"return-type\",\n              greedy: true,\n              lookbehind: true\n            },\n            {\n              pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n              alias: [\"class-name-fully-qualified\", \"return-type\"],\n              greedy: true,\n              lookbehind: true,\n              inside: {\n                punctuation: /\\\\/\n              }\n            }\n          ],\n          constant,\n          function: {\n            pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n            lookbehind: true,\n            inside: {\n              punctuation: /\\\\/\n            }\n          },\n          property: {\n            pattern: /(->\\s*)\\w+/,\n            lookbehind: true\n          },\n          number,\n          operator,\n          punctuation\n        };\n        var string_interpolation = {\n          pattern: /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n          lookbehind: true,\n          inside: Prism2.languages.php\n        };\n        var string = [\n          {\n            pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n            alias: \"nowdoc-string\",\n            greedy: true,\n            inside: {\n              delimiter: {\n                pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n                alias: \"symbol\",\n                inside: {\n                  punctuation: /^<<<'?|[';]$/\n                }\n              }\n            }\n          },\n          {\n            pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n            alias: \"heredoc-string\",\n            greedy: true,\n            inside: {\n              delimiter: {\n                pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n                alias: \"symbol\",\n                inside: {\n                  punctuation: /^<<<\"?|[\";]$/\n                }\n              },\n              interpolation: string_interpolation\n            }\n          },\n          {\n            pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n            alias: \"backtick-quoted-string\",\n            greedy: true\n          },\n          {\n            pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n            alias: \"single-quoted-string\",\n            greedy: true\n          },\n          {\n            pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n            alias: \"double-quoted-string\",\n            greedy: true,\n            inside: {\n              interpolation: string_interpolation\n            }\n          }\n    ... (2244 more characters)"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.0009513330878689885
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-UITEVTW6.js (200) — 2024-07-28T11:41:34.650Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-UITEVTW6.js"
        }
      ]
    }
  ]
}