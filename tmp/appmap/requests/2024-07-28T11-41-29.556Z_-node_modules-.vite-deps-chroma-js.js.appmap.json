{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chroma-js.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/src/assets/themes/functions/hexToRgb.jsx",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b6dab07a'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"19ab3-slAUmU4CPkWIjZZNrgc8zJZnZlk\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/chroma-js/chroma.js\nvar require_chroma = __commonJS({\n  \"node_modules/chroma-js/chroma.js\"(exports, module) {\n    (function(global, factory) {\n      typeof exports === \"object\" && typeof module !== \"undefined\" ? module.exports = factory() : typeof define === \"function\" && define.amd ? define(factory) : (global = typeof globalThis !== \"undefined\" ? globalThis : global || self, global.chroma = factory());\n    })(exports, function() {\n      \"use strict\";\n      var limit$2 = function(x, min2, max2) {\n        if (min2 === void 0) min2 = 0;\n        if (max2 === void 0) max2 = 1;\n        return x < min2 ? min2 : x > max2 ? max2 : x;\n      };\n      var limit$1 = limit$2;\n      var clip_rgb$3 = function(rgb2) {\n        rgb2._clipped = false;\n        rgb2._unclipped = rgb2.slice(0);\n        for (var i2 = 0; i2 <= 3; i2++) {\n          if (i2 < 3) {\n            if (rgb2[i2] < 0 || rgb2[i2] > 255) {\n              rgb2._clipped = true;\n            }\n            rgb2[i2] = limit$1(rgb2[i2], 0, 255);\n          } else if (i2 === 3) {\n            rgb2[i2] = limit$1(rgb2[i2], 0, 1);\n          }\n        }\n        return rgb2;\n      };\n      var classToType = {};\n      for (var i$1 = 0, list$1 = [\"Boolean\", \"Number\", \"String\", \"Function\", \"Array\", \"Date\", \"RegExp\", \"Undefined\", \"Null\"]; i$1 < list$1.length; i$1 += 1) {\n        var name = list$1[i$1];\n        classToType[\"[object \" + name + \"]\"] = name.toLowerCase();\n      }\n      var type$p = function(obj) {\n        return classToType[Object.prototype.toString.call(obj)] || \"object\";\n      };\n      var type$o = type$p;\n      var unpack$B = function(args, keyOrder) {\n        if (keyOrder === void 0) keyOrder = null;\n        if (args.length >= 3) {\n          return Array.prototype.slice.call(args);\n        }\n        if (type$o(args[0]) == \"object\" && keyOrder) {\n          return keyOrder.split(\"\").filter(function(k) {\n            return args[0][k] !== void 0;\n          }).map(function(k) {\n            return args[0][k];\n          });\n        }\n        return args[0];\n      };\n      var type$n = type$p;\n      var last$4 = function(args) {\n        if (args.length < 2) {\n          return null;\n        }\n        var l = args.length - 1;\n        if (type$n(args[l]) == \"string\") {\n          return args[l].toLowerCase();\n        }\n        return null;\n      };\n      var PI$2 = Math.PI;\n      var utils = {\n        clip_rgb: clip_rgb$3,\n        limit: limit$2,\n        type: type$p,\n        unpack: unpack$B,\n        last: last$4,\n        PI: PI$2,\n        TWOPI: PI$2 * 2,\n        PITHIRD: PI$2 / 3,\n        DEG2RAD: PI$2 / 180,\n        RAD2DEG: 180 / PI$2\n      };\n      var input$h = {\n        format: {},\n        autodetect: []\n      };\n      var last$3 = utils.last;\n      var clip_rgb$2 = utils.clip_rgb;\n      var type$m = utils.type;\n      var _input = input$h;\n      var Color$D = function Color2() {\n        var args = [], len = arguments.length;\n        while (len--) args[len] = arguments[len];\n        var me = this;\n        if (type$m(args[0]) === \"object\" && args[0].constructor && args[0].constructor === this.constructor) {\n          return args[0];\n        }\n        var mode = last$3(args);\n        var autodetect = false;\n        if (!mode) {\n          autodetect = true;\n          if (!_input.sorted) {\n            _input.autodetect = _input.autodetect.sort(function(a, b) {\n              return b.p - a.p;\n            });\n            _input.sorted = true;\n          }\n          for (var i2 = 0, list2 = _input.autodetect; i2 < list2.length; i2 += 1) {\n            var chk = list2[i2];\n            mode = chk.test.apply(chk, args);\n            if (mode) {\n              break;\n            }\n          }\n        }\n        if (_input.format[mode]) {\n          var rgb2 = _input.format[mode].apply(null, autodetect ? args : args.slice(0, -1));\n          me._rgb = clip_rgb$2(rgb2);\n        } else {\n          throw new Error(\"unknown format: \" + args);\n        }\n        if (me._rgb.length === 3) {\n          me._rgb.push(1);\n        }\n      };\n      Color$D.prototype.toString = function toString() {\n        if (type$m(this.hex) == \"function\") {\n          return this.hex();\n        }\n        return \"[\" + this._rgb.join(\",\") + \"]\";\n      };\n      var Color_1 = Color$D;\n      var chroma$k = function() {\n        var args = [], len = arguments.length;\n        while (len--) args[len] = arguments[len];\n        return new (Function.prototype.bind.apply(chroma$k.Color, [null].concat(args)))();\n      };\n      chroma$k.Color = Color_1;\n      chroma$k.version = \"2.4.2\";\n      var chroma_1 = chroma$k;\n      var unpack$A = utils.unpack;\n      var max$2 = Math.max;\n      var rgb2cmyk$1 = function() {\n        var args = [], len = arguments.length;\n        while (len--) args[len] = arguments[len];\n        var ref = unpack$A(args, \"rgb\");\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        r = r / 255;\n        g = g / 255;\n        b = b / 255;\n        var k = 1 - max$2(r, max$2(g, b));\n        var f = k < 1 ? 1 / (1 - k) : 0;\n        var c = (1 - r - k) * f;\n        var m = (1 - g - k) * f;\n        var y = (1 - b - k) * f;\n        return [c, m, y, k];\n      };\n      var rgb2cmyk_1 = rgb2cmyk$1;\n      var unpack$z = utils.unpack;\n      var cmyk2rgb = function() {\n        var args = [], len = arguments.length;\n        while (len--) args[len] = arguments[len];\n        args = unpack$z(args, \"cmyk\");\n        var c = args[0];\n        var m = args[1];\n        var y = args[2];\n        var k = args[3];\n        var alpha = args.length > 4 ? args[4] : 1;\n        if (k === 1) {\n          return [0, 0, 0, alpha];\n        }\n        return [\n          c >= 1 ? 0 : 255 * (1 - c) * (1 - k),\n          // r\n          m >= 1 ? 0 : 255 * (1 - m) * (1 - k),\n          // g\n          y >= 1 ? 0 : 255 * (1 - y) * (1 - k),\n          // b\n          alpha\n        ];\n      };\n      var cmyk2rgb_1 = cmyk2rgb;\n      var chroma$j = chroma_1;\n      var Color$C = Color_1;\n      var input$g = input$h;\n      var unpack$y = utils.unpack;\n      var type$l = utils.type;\n      var rgb2cmyk = rgb2cmyk_1;\n      Color$C.prototype.cmyk = function() {\n        return rgb2cmyk(this._rgb);\n      };\n      chroma$j.cmyk = function() {\n        var args = [], len = arguments.length;\n        while (len--) args[len] = arguments[len];\n        return new (Function.prototype.bind.apply(Color$C, [null].concat(args, [\"cmyk\"])))();\n      };\n      input$g.format.cmyk = cmyk2rgb_1;\n      input$g.autodetect.push({\n        p: 2,\n        test: function() {\n          var args = [], len = arguments.length;\n          while (len--) args[len] = arguments[len];\n          args = unpack$y(args, \"cmyk\");\n          if (type$l(args) === \"array\" && args.length === 4) {\n            return \"cmyk\";\n          }\n        }\n      });\n      var unpack$x = utils.unpack;\n      var last$2 = utils.last;\n      var rnd = function(a) {\n        return Math.round(a * 100) / 100;\n      };\n      var hsl2css$1 = function() {\n        var args = [], len = arguments.length;\n        while (len--) args[len] = arguments[len];\n        var hsla = unpack$x(args, \"hsla\");\n        var mode = last$2(args) || \"lsa\";\n        hsla[0] = rnd(hsla[0] || 0);\n        hsla[1] = rnd(hsla[1] * 100) + \"%\";\n        hsla[2] = rnd(hsla[2] * 100) + \"%\";\n        if (mode === \"hsla\" || hsla.length > 3 && hsla[3] < 1) {\n          hsla[3] = hsla.length > 3 ? hsla[3] : 1;\n          mode = \"hsla\";\n        } else {\n          hsla.length = 3;\n        }\n        return mode + \"(\" + hsla.join(\",\") + \")\";\n      };\n      var hsl2css_1 = hsl2css$1;\n      var unpack$w = utils.unpack;\n      var rgb2hsl$3 = function() {\n        var args = [], len = arguments.length;\n        while (len--) args[len] = arguments[len];\n        args = unpack$w(args, \"rgba\");\n        var r = args[0];\n        var g = args[1];\n        var b = args[2];\n        r /= 255;\n        g /= 255;\n        b /= 255;\n        var min2 = Math.min(r, g, b);\n        var max2 = Math.max(r, g, b);\n        var l = (max2 + min2) / 2;\n        var s, h;\n        if (max2 === min2) {\n          s = 0;\n          h = Number.NaN;\n        } else {\n          s = l < 0.5 ? (max2 - min2) / (max2 + min2) : (max2 - min2) / (2 - max2 - min2);\n        }\n        if (r == max2) {\n          h = (g - b) / (max2 - min2);\n        } else if (g == max2) {\n          h = 2 + (b - r) / (max2 - min2);\n        } else if (b == max2) {\n          h = 4 + (r - g) / (max2 - min2);\n        }\n        h *= 60;\n        if (h < 0) {\n          h += 360;\n        }\n        if (args.length > 3 && args[3] !== void 0) {\n          return [h, s, l, args[3]];\n        }\n        return [h, s, l];\n      };\n      var rgb2hsl_1 = rgb2hsl$3;\n      var unpack$v = utils.unpack;\n      var last$1 = utils.last;\n      var hsl2css = hsl2css_1;\n      var rgb2hsl$2 = rgb2hsl_1;\n      var round$6 = Math.round;\n      var rgb2css$1 = function() {\n        var args = [], len = arguments.length;\n        while (len--) args[len] = arguments[len];\n        var rgba = unpack$v(args, \"rgba\");\n        var mode = last$1(args) || \"rgb\";\n        if (mode.substr(0, 3) == \"hsl\") {\n          return hsl2css(rgb2hsl$2(rgba), mode);\n        }\n        rgba[0] = round$6(rgba[0]);\n        rgba[1] = round$6(rgba[1]);\n        rgba[2] = round$6(rgba[2]);\n        if (mode === \"rgba\" || rgba.length > 3 && rgba[3] < 1) {\n          rgba[3] = rgba.length > 3 ? rgba[3] : 1;\n          mode = \"rgba\";\n        }\n        return mode + \"(\" + rgba.slice(0, mode === \"rgb\" ? 3 : 4).join(\",\") + \")\";\n      };\n      var rgb2css_1 = rgb2css$1;\n      var unpack$u = utils.unpack;\n      var round$5 = Math.round;\n      var hsl2rgb$1 = function() {\n        var assign;\n        var args = [], len = arguments.length;\n        while (len--) args[len] = arguments[len];\n        args = unpack$u(args, \"hsl\");\n        var h = args[0];\n        var s = args[1];\n        var l = args[2];\n        var r, ... (95139 more characters)"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00041145796421915293
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chroma-js.js (200) — 2024-07-28T11:41:29.556Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chroma-js.js"
        }
      ]
    }
  ]
}