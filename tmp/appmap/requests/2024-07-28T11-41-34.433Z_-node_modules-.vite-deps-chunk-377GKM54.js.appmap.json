{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-377GKM54.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"157b-CpkhwlACQZhVEG1p7DJV5n9b8L0\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/pure.js\nvar require_pure = __commonJS({\n  \"node_modules/refractor/lang/pure.js\"(exports, module) {\n    module.exports = pure;\n    pure.displayName = \"pure\";\n    pure.aliases = [];\n    function pure(Prism) {\n      ;\n      (function(Prism2) {\n        Prism2.languages.pure = {\n          comment: [\n            {\n              pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n              lookbehind: true\n            },\n            {\n              pattern: /(^|[^\\\\:])\\/\\/.*/,\n              lookbehind: true\n            },\n            /#!.+/\n          ],\n          \"inline-lang\": {\n            pattern: /%<[\\s\\S]+?%>/,\n            greedy: true,\n            inside: {\n              lang: {\n                pattern: /(^%< *)-\\*-.+?-\\*-/,\n                lookbehind: true,\n                alias: \"comment\"\n              },\n              delimiter: {\n                pattern: /^%<.*|%>$/,\n                alias: \"punctuation\"\n              }\n            }\n          },\n          string: {\n            pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n            greedy: true\n          },\n          number: {\n            // The look-behind prevents wrong highlighting of the .. operator\n            pattern: /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?L?)/i,\n            lookbehind: true\n          },\n          keyword: /\\b(?:NULL|ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,\n          function: /\\b(?:abs|add_(?:addr|constdef|(?:fundef|interface|macdef|typedef)(?:_at)?|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_c?string(?:_pointer)?|byte_(?:matrix|pointer)|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|sentry|short|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,\n          special: {\n            pattern: /\\b__[a-z]+__\\b/i,\n            alias: \"builtin\"\n          },\n          // Any combination of operator chars can be an operator\n          // eslint-disable-next-line no-misleading-character-class\n          operator: /(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,\n          // FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?\n          punctuation: /[(){}\\[\\];,|]/\n        };\n        var inlineLanguages = [\n          \"c\",\n          {\n            lang: \"c++\",\n            alias: \"cpp\"\n          },\n          \"fortran\"\n        ];\n        var inlineLanguageRe = /%< *-\\*- *<lang>\\d* *-\\*-[\\s\\S]+?%>/.source;\n        inlineLanguages.forEach(function(lang) {\n          var alias = lang;\n          if (typeof lang !== \"string\") {\n            alias = lang.alias;\n            lang = lang.lang;\n          }\n          if (Prism2.languages[alias]) {\n            var o = {};\n            o[\"inline-lang-\" + alias] = {\n              pattern: RegExp(\n                inlineLanguageRe.replace(\n                  \"<lang>\",\n                  lang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g, \"\\\\$1\")\n                ),\n                \"i\"\n              ),\n              inside: Prism2.util.clone(Prism2.languages.pure[\"inline-lang\"].inside)\n            };\n            o[\"inline-lang-\" + alias].inside.rest = Prism2.util.clone(\n              Prism2.languages[alias]\n            );\n            Prism2.languages.insertBefore(\"pure\", \"inline-lang\", o);\n          }\n        });\n        if (Prism2.languages.c) {\n          Prism2.languages.pure[\"inline-lang\"].inside.rest = Prism2.util.clone(\n            Prism2.languages.c\n          );\n        }\n      })(Prism);\n    }\n  }\n});\n\nexport {\n  require_pure\n};\n//# sourceMappingURL=chunk-377GKM54.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00027395901270210743
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-377GKM54.js (200) â€” 2024-07-28T11:41:34.433Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-377GKM54.js"
        }
      ]
    }
  ]
}