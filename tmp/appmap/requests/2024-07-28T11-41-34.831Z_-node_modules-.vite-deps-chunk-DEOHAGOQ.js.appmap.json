{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-DEOHAGOQ.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"24f5-Fp491ISX3FV9/PPyPdC2p8Wajuk\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/asciidoc.js\nvar require_asciidoc = __commonJS({\n  \"node_modules/refractor/lang/asciidoc.js\"(exports, module) {\n    module.exports = asciidoc;\n    asciidoc.displayName = \"asciidoc\";\n    asciidoc.aliases = [\"adoc\"];\n    function asciidoc(Prism) {\n      ;\n      (function(Prism2) {\n        var attributes = {\n          pattern: /(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\[\\]\\\\]|\\\\.)*\\]|[^\\[\\]\\\\\"'$`]|\\\\.)*\\]/m,\n          lookbehind: true,\n          inside: {\n            quoted: {\n              pattern: /([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n              inside: {\n                punctuation: /^[$`]|[$`]$/\n              }\n            },\n            interpreted: {\n              pattern: /'(?:[^'\\\\]|\\\\.)*'/,\n              inside: {\n                punctuation: /^'|'$/\n                // See rest below\n              }\n            },\n            string: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n            variable: /\\w+(?==)/,\n            punctuation: /^\\[|\\]$|,/,\n            operator: /=/,\n            // The negative look-ahead prevents blank matches\n            \"attr-value\": /(?!^\\s+$).+/\n          }\n        };\n        var asciidoc2 = Prism2.languages.asciidoc = {\n          \"comment-block\": {\n            pattern: /^(\\/{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1/m,\n            alias: \"comment\"\n          },\n          table: {\n            pattern: /^\\|={3,}(?:(?:\\r?\\n|\\r(?!\\n)).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,\n            inside: {\n              specifiers: {\n                pattern: /(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*](?:[<^>](?:\\.[<^>])?|\\.[<^>])?|[<^>](?:\\.[<^>])?|\\.[<^>])[a-z]*|[a-z]+)(?=\\|)/,\n                alias: \"attr-value\"\n              },\n              punctuation: {\n                pattern: /(^|[^\\\\])[|!]=*/,\n                lookbehind: true\n              }\n              // See rest below\n            }\n          },\n          \"passthrough-block\": {\n            pattern: /^(\\+{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n            inside: {\n              punctuation: /^\\++|\\++$/\n              // See rest below\n            }\n          },\n          // Literal blocks and listing blocks\n          \"literal-block\": {\n            pattern: /^(-{4,}|\\.{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n            inside: {\n              punctuation: /^(?:-+|\\.+)|(?:-+|\\.+)$/\n              // See rest below\n            }\n          },\n          // Sidebar blocks, quote blocks, example blocks and open blocks\n          \"other-block\": {\n            pattern: /^(--|\\*{4,}|_{4,}|={4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n            inside: {\n              punctuation: /^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/\n              // See rest below\n            }\n          },\n          // list-punctuation and list-label must appear before indented-block\n          \"list-punctuation\": {\n            pattern: /(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,\n            lookbehind: true,\n            alias: \"punctuation\"\n          },\n          \"list-label\": {\n            pattern: /(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,\n            lookbehind: true,\n            alias: \"symbol\"\n          },\n          \"indented-block\": {\n            pattern: /((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,\n            lookbehind: true\n          },\n          comment: /^\\/\\/.*/m,\n          title: {\n            pattern: /^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} .+|^\\.(?![\\s.]).*/m,\n            alias: \"important\",\n            inside: {\n              punctuation: /^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/\n              // See rest below\n            }\n          },\n          \"attribute-entry\": {\n            pattern: /^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,\n            alias: \"tag\"\n          },\n          attributes,\n          hr: {\n            pattern: /^'{3,}$/m,\n            alias: \"punctuation\"\n          },\n          \"page-break\": {\n            pattern: /^<{3,}$/m,\n            alias: \"punctuation\"\n          },\n          admonition: {\n            pattern: /^(?:CAUTION|IMPORTANT|NOTE|TIP|WARNING):/m,\n            alias: \"keyword\"\n          },\n          callout: [\n            {\n              pattern: /(^[ \\t]*)<?\\d*>/m,\n              lookbehind: true,\n              alias: \"symbol\"\n            },\n            {\n              pattern: /<\\d+>/,\n              alias: \"symbol\"\n            }\n          ],\n          macro: {\n            pattern: /\\b[a-z\\d][a-z\\d-]*::?(?:[^\\s\\[\\]]*\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n            inside: {\n              function: /^[a-z\\d-]+(?=:)/,\n              punctuation: /^::?/,\n              attributes: {\n                pattern: /(?:\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n                inside: attributes.inside\n              }\n            }\n          },\n          inline: {\n            /*\n            The initial look-behind prevents the highlighting of escaped quoted text.\n            Quoted text can be multi-line but cannot span an empty line.\n            All quoted text can have attributes before [foobar, 'foobar', baz=\"bar\"].\n            First, we handle the constrained quotes.\n            Those must be bounded by non-word chars and cannot have spaces between the delimiter and the first char.\n            They are, in order: _emphasis_, ``double quotes'', `single quotes', `monospace`, 'emphasis', *strong*, +monospace+ and #unquoted#\n            Then we handle the unconstrained quotes.\n            Those do not have the restrictions of the constrained quotes.\n            They are, in order: __emphasis__, **strong**, ++monospace++, +++passthrough+++, ##unquoted##, $$passthrough$$, ~subscript~, ^superscript^, {attribute-reference}, [[anchor]], [[[bibliography anchor]]], <<xref>>, (((indexes))) and ((indexes))\n            */\n            pattern: /(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?:[^`'\\s]|\\s+\\S)+['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,\n            lookbehind: true,\n            inside: {\n              attributes,\n              url: {\n                pattern: /^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,\n                inside: {\n                  punctuation: /^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/\n                }\n              },\n              \"attribute-ref\": {\n                pattern: /^\\{.+\\}$/,\n                inside: {\n                  variable: {\n                    pattern: /(^\\{)[a-z\\d,+_-]+/,\n                    lookbehind: true\n                  },\n                  operator: /^[=?!#%@$]|!(?=[:}])/,\n                  punctuation: /^\\{|\\}$|::?/\n                }\n              },\n              italic: {\n                pattern: /^(['_])[\\s\\S]+\\1$/,\n                inside: {\n                  punctuation: /^(?:''?|__?)|(?:''?|__?)$/\n                }\n              },\n              bold: {\n                pattern: /^\\*[\\s\\S]+\\*$/,\n                inside: {\n                  punctuation: /^\\*\\*?|\\*\\*?$/\n                }\n              },\n              punctuation: /^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/\n            }\n          },\n          replacement: {\n            pattern: /\\((?:C|R|TM)\\)/,\n            alias: \"builtin\"\n          },\n          entity: /&#?[\\da-z]{1,8};/i,\n          \"line-continuation\": {\n            pattern: /(^| )\\+$/m,\n            lookbehind: true,\n            alias: \"punctuation\"\n          }\n        };\n        function copyFromAsciiDoc(keys) {\n          keys = keys.split(\" \");\n          var o = {};\n          for (var i = 0, l = keys.length; i < l; i++) {\n            o[keys[i]] = asciidoc2[keys[i]];\n          }\n          return o;\n        }\n        attributes.inside[\"interpreted\"].inside.rest = copyFromAsciiDoc(\n          \"macro inline replacement entity\"\n        );\n        asciidoc2[\"passthrough-block\"].inside.rest = copyFromAsciiDoc(\"macro\");\n        asciidoc2[\"literal-block\"].inside.rest = copyFromAsciiDoc(\"callout\");\n        asciidoc2[\"table\"].inside.rest = copyFromAsciiDoc(\n          \"comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation\"\n        );\n        asciidoc2[\"other-block\"].inside.rest = copyFromAsciiDoc(\n          \"table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation\"\n        );\n        asciidoc2[\"title\"].inside.rest = copyFromAsciiDoc(\n          \"macro inline replacement entity\"\n        );\n        Prism2.hooks.add(\"wrap\", function(env) {\n          if (env.type === \"entity\") {\n            env.attributes[\"title\"] = env.content.value.replace(/&amp;/, \"&\");\n          }\n        });\n        Prism2.languages.adoc = Prism2.languages.asciidoc;\n      })(Prism);\n    }\n  }\n});\n\nexport {\n  require_asciidoc\n};\n//# sourceMappingURL=chunk-DEOHAGOQ.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00014341599307954311
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-DEOHAGOQ.js (200) — 2024-07-28T11:41:34.831Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-DEOHAGOQ.js"
        }
      ]
    }
  ]
}