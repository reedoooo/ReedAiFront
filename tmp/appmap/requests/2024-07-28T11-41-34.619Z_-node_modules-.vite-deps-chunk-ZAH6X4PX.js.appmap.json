{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-ZAH6X4PX.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"1a05-khO2c0w9v3tEpxbejWN0Y3vy3yY\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/markup.js\nvar require_markup = __commonJS({\n  \"node_modules/refractor/lang/markup.js\"(exports, module) {\n    module.exports = markup;\n    markup.displayName = \"markup\";\n    markup.aliases = [\"html\", \"mathml\", \"svg\", \"xml\", \"ssml\", \"atom\", \"rss\"];\n    function markup(Prism) {\n      Prism.languages.markup = {\n        comment: {\n          pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n          greedy: true\n        },\n        prolog: {\n          pattern: /<\\?[\\s\\S]+?\\?>/,\n          greedy: true\n        },\n        doctype: {\n          // https://www.w3.org/TR/xml/#NT-doctypedecl\n          pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n          greedy: true,\n          inside: {\n            \"internal-subset\": {\n              pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n              lookbehind: true,\n              greedy: true,\n              inside: null\n              // see below\n            },\n            string: {\n              pattern: /\"[^\"]*\"|'[^']*'/,\n              greedy: true\n            },\n            punctuation: /^<!|>$|[[\\]]/,\n            \"doctype-tag\": /^DOCTYPE/i,\n            name: /[^\\s<>'\"]+/\n          }\n        },\n        cdata: {\n          pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n          greedy: true\n        },\n        tag: {\n          pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n          greedy: true,\n          inside: {\n            tag: {\n              pattern: /^<\\/?[^\\s>\\/]+/,\n              inside: {\n                punctuation: /^<\\/?/,\n                namespace: /^[^\\s>\\/:]+:/\n              }\n            },\n            \"special-attr\": [],\n            \"attr-value\": {\n              pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n              inside: {\n                punctuation: [\n                  {\n                    pattern: /^=/,\n                    alias: \"attr-equals\"\n                  },\n                  /\"|'/\n                ]\n              }\n            },\n            punctuation: /\\/?>/,\n            \"attr-name\": {\n              pattern: /[^\\s>\\/]+/,\n              inside: {\n                namespace: /^[^\\s>\\/:]+:/\n              }\n            }\n          }\n        },\n        entity: [\n          {\n            pattern: /&[\\da-z]{1,8};/i,\n            alias: \"named-entity\"\n          },\n          /&#x?[\\da-f]{1,8};/i\n        ]\n      };\n      Prism.languages.markup[\"tag\"].inside[\"attr-value\"].inside[\"entity\"] = Prism.languages.markup[\"entity\"];\n      Prism.languages.markup[\"doctype\"].inside[\"internal-subset\"].inside = Prism.languages.markup;\n      Prism.hooks.add(\"wrap\", function(env) {\n        if (env.type === \"entity\") {\n          env.attributes[\"title\"] = env.content.value.replace(/&amp;/, \"&\");\n        }\n      });\n      Object.defineProperty(Prism.languages.markup.tag, \"addInlined\", {\n        /**\n         * Adds an inlined language to markup.\n         *\n         * An example of an inlined language is CSS with `<style>` tags.\n         *\n         * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n         * case insensitive.\n         * @param {string} lang The language key.\n         * @example\n         * addInlined('style', 'css');\n         */\n        value: function addInlined(tagName, lang) {\n          var includedCdataInside = {};\n          includedCdataInside[\"language-\" + lang] = {\n            pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n            lookbehind: true,\n            inside: Prism.languages[lang]\n          };\n          includedCdataInside[\"cdata\"] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n          var inside = {\n            \"included-cdata\": {\n              pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n              inside: includedCdataInside\n            }\n          };\n          inside[\"language-\" + lang] = {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages[lang]\n          };\n          var def = {};\n          def[tagName] = {\n            pattern: RegExp(\n              /(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(\n                /__/g,\n                function() {\n                  return tagName;\n                }\n              ),\n              \"i\"\n            ),\n            lookbehind: true,\n            greedy: true,\n            inside\n          };\n          Prism.languages.insertBefore(\"markup\", \"cdata\", def);\n        }\n      });\n      Object.defineProperty(Prism.languages.markup.tag, \"addAttribute\", {\n        /**\n         * Adds an pattern to highlight languages embedded in HTML attributes.\n         *\n         * An example of an inlined language is CSS with `style` attributes.\n         *\n         * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n         * case insensitive.\n         * @param {string} lang The language key.\n         * @example\n         * addAttribute('style', 'css');\n         */\n        value: function(attrName, lang) {\n          Prism.languages.markup.tag.inside[\"special-attr\"].push({\n            pattern: RegExp(\n              /(^|[\"'\\s])/.source + \"(?:\" + attrName + \")\" + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\n              \"i\"\n            ),\n            lookbehind: true,\n            inside: {\n              \"attr-name\": /^[^\\s=]+/,\n              \"attr-value\": {\n                pattern: /=[\\s\\S]+/,\n                inside: {\n                  value: {\n                    pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n                    lookbehind: true,\n                    alias: [lang, \"language-\" + lang],\n                    inside: Prism.languages[lang]\n                  },\n                  punctuation: [\n                    {\n                      pattern: /^=/,\n                      alias: \"attr-equals\"\n                    },\n                    /\"|'/\n                  ]\n                }\n              }\n            }\n          });\n        }\n      });\n      Prism.languages.html = Prism.languages.markup;\n      Prism.languages.mathml = Prism.languages.markup;\n      Prism.languages.svg = Prism.languages.markup;\n      Prism.languages.xml = Prism.languages.extend(\"markup\", {});\n      Prism.languages.ssml = Prism.languages.xml;\n      Prism.languages.atom = Prism.languages.xml;\n      Prism.languages.rss = Prism.languages.xml;\n    }\n  }\n});\n\nexport {\n  require_markup\n};\n//# sourceMappingURL=chunk-ZAH6X4PX.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00022499996703118086
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-ZAH6X4PX.js (200) â€” 2024-07-28T11:41:34.619Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-ZAH6X4PX.js"
        }
      ]
    }
  ]
}