{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-MGMVGAXZ.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"1cd5-5TfQfC/eM7WJb9p8InSNpSd5aD8\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/xquery.js\nvar require_xquery = __commonJS({\n  \"node_modules/refractor/lang/xquery.js\"(exports, module) {\n    module.exports = xquery;\n    xquery.displayName = \"xquery\";\n    xquery.aliases = [];\n    function xquery(Prism) {\n      ;\n      (function(Prism2) {\n        Prism2.languages.xquery = Prism2.languages.extend(\"markup\", {\n          \"xquery-comment\": {\n            pattern: /\\(:[\\s\\S]*?:\\)/,\n            greedy: true,\n            alias: \"comment\"\n          },\n          string: {\n            pattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,\n            greedy: true\n          },\n          extension: {\n            pattern: /\\(#.+?#\\)/,\n            alias: \"symbol\"\n          },\n          variable: /\\$[-\\w:]+/,\n          axis: {\n            pattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,\n            lookbehind: true,\n            alias: \"operator\"\n          },\n          \"keyword-operator\": {\n            pattern: /(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,\n            lookbehind: true,\n            alias: \"operator\"\n          },\n          keyword: {\n            pattern: /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,\n            lookbehind: true\n          },\n          function: /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\n          \"xquery-element\": {\n            pattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,\n            lookbehind: true,\n            alias: \"tag\"\n          },\n          \"xquery-attribute\": {\n            pattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,\n            lookbehind: true,\n            alias: \"attr-name\"\n          },\n          builtin: {\n            pattern: /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:ENTITIES|ENTITY|ID|IDREFS?|NCName|NMTOKENS?|NOTATION|Name|QName|anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|int|integer|language|long|negativeInteger|nonNegativeInteger|nonPositiveInteger|normalizedString|positiveInteger|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,\n            lookbehind: true\n          },\n          number: /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,\n          operator: [\n            /[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/,\n            {\n              pattern: /(\\s)-(?=\\s)/,\n              lookbehind: true\n            }\n          ],\n          punctuation: /[[\\](){},;:/]/\n        });\n        Prism2.languages.xquery.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|\\{(?!\\{)(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/;\n        Prism2.languages.xquery[\"tag\"].inside[\"attr-value\"].pattern = /=(?:(\"|')(?:\\\\[\\s\\S]|\\{(?!\\{)(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/;\n        Prism2.languages.xquery[\"tag\"].inside[\"attr-value\"].inside[\"punctuation\"] = /^=\"|\"$/;\n        Prism2.languages.xquery[\"tag\"].inside[\"attr-value\"].inside[\"expression\"] = {\n          // Allow for two levels of nesting\n          pattern: /\\{(?!\\{)(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}/,\n          inside: Prism2.languages.xquery,\n          alias: \"language-xquery\"\n        };\n        var stringifyToken = function(token) {\n          if (typeof token === \"string\") {\n            return token;\n          }\n          if (typeof token.content === \"string\") {\n            return token.content;\n          }\n          return token.content.map(stringifyToken).join(\"\");\n        };\n        var walkTokens = function(tokens) {\n          var openedTags = [];\n          for (var i = 0; i < tokens.length; i++) {\n            var token = tokens[i];\n            var notTagNorBrace = false;\n            if (typeof token !== \"string\") {\n              if (token.type === \"tag\" && token.content[0] && token.content[0].type === \"tag\") {\n                if (token.content[0].content[0].content === \"</\") {\n                  if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n                    openedTags.pop();\n                  }\n                } else {\n                  if (token.content[token.content.length - 1].content === \"/>\") {\n                  } else {\n                    openedTags.push({\n                      tagName: stringifyToken(token.content[0].content[1]),\n                      openedBraces: 0\n                    });\n                  }\n                }\n              } else if (openedTags.length > 0 && token.type === \"punctuation\" && token.content === \"{\" && // Ignore `{{`\n              (!tokens[i + 1] || tokens[i + 1].type !== \"punctuation\" || tokens[i + 1].content !== \"{\") && (!tokens[i - 1] || tokens[i - 1].type !== \"plain-text\" || tokens[i - 1].content !== \"{\")) {\n                openedTags[openedTags.length - 1].openedBraces++;\n              } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === \"punctuation\" && token.content === \"}\") {\n                openedTags[openedTags.length - 1].openedBraces--;\n              } else if (token.type !== \"comment\") {\n                notTagNorBrace = true;\n              }\n            }\n            if (notTagNorBrace || typeof token === \"string\") {\n              if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n                var plainText = stringifyToken(token);\n                if (i < tokens.length - 1 && (typeof tokens[i + 1] === \"string\" || tokens[i + 1].type === \"plain-text\")) {\n                  plainText += stringifyToken(tokens[i + 1]);\n                  tokens.splice(i + 1, 1);\n                }\n                if (i > 0 && (typeof tokens[i - 1] === \"string\" || tokens[i - 1].type === \"plain-text\")) {\n                  plainText = stringifyToken(tokens[i - 1]) + plainText;\n                  tokens.splice(i - 1, 1);\n                  i--;\n                }\n                if (/^\\s+$/.test(plainText)) {\n                  tokens[i] = plainText;\n                } else {\n                  tokens[i] = new Prism2.Token(\n                    \"plain-text\",\n                    plainText,\n                    null,\n                    plainText\n                  );\n                }\n              }\n            }\n            if (token.content && typeof token.content !== \"string\") {\n              walkTokens(token.content);\n            }\n          }\n        };\n        Prism2.hooks.add(\"after-tokenize\", function(env) {\n          if (env.language !== \"xquery\") {\n            return;\n          }\n          walkTokens(env.tokens);\n        });\n      })(Prism);\n    }\n  }\n});\n\nexport {\n  require_xquery\n};\n//# sourceMappingURL=chunk-MGMVGAXZ.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00023329199757426977
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-MGMVGAXZ.js (200) — 2024-07-28T11:41:34.058Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-MGMVGAXZ.js"
        }
      ]
    }
  ]
}