{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/src/api/chat/chat_main.jsx",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/src/api/index.jsx",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22",
          "If-None-Match": "W/\"1988-vyO7q13tPNyUZIFyLEjrzt7PBdQ\""
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "no-cache",
          "Etag": "W/\"1988-lfIi3b6wjqBIfAXRRaaD+Me957o\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import { createParser } from \"/node_modules/.vite/deps/eventsource-parser.js?v=e79ddb2a\";\nimport constants from \"/src/config/constants.jsx\";\nimport request from \"/src/utils/request/axios.jsx\";\nimport { fetchDefaultChatModel } from \"/src/api/chat/chat_model.jsx\";\nconst { API_URL, OPENAI_API_KEY } = constants;\nexport async function fetchMessageStream({\n  sessionId,\n  chatId,\n  prompt,\n  userId,\n  clientApiKey,\n  role = \"assistant\",\n  signal\n}) {\n  let response;\n  try {\n    response = await fetch(\"http://localhost:3001/api/chat/v1/stream\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        sessionId,\n        chatId,\n        prompt,\n        userId,\n        clientApiKey,\n        role,\n        stream: true\n      }),\n      signal\n    });\n  } catch (error) {\n    if (error instanceof Error && error.name === \"AbortError\") {\n      console.log(\"Request aborted:\", error.message);\n    } else if (error instanceof Error) {\n      console.error(\"Error reading stream response:\", error.message);\n    } else {\n      console.error(\"An unexpected error occurred\");\n    }\n    return;\n  }\n  const encoder = new TextEncoder();\n  const decoder = new TextDecoder(\"utf-8\");\n  if (!response.ok) {\n    const err = await response.json();\n    throw new Error(`Error reading stream response: ${err.error}`);\n  }\n  if (signal.aborted) {\n    console.log(\"Request aborted\");\n    return;\n  }\n  if (response.status !== 200) {\n    const result = await response.text();\n    throw new Error(`OpenAI API returned an error: ${result}`);\n  }\n  return new ReadableStream({\n    async start(controller) {\n      const onParse = (event) => {\n        if (event.type === \"event\") {\n          const data = event.data;\n          if (data === \"[DONE]\") {\n            controller.close();\n            return;\n          }\n          try {\n            const json = JSON.parse(data);\n            const text = json.content;\n            controller.enqueue(text);\n          } catch (e) {\n            controller.error(e);\n          }\n        }\n      };\n      const parser = createParser(onParse);\n      console.log(\"Started reading stream\");\n      for await (const chunk of response.body) {\n        parser.feed(decoder.decode(chunk, { stream: true }));\n      }\n    }\n  });\n}\nexport async function getWorkspaceByWorkspaceId(workspaceId) {\n  const id = encodeURIComponent(workspaceId);\n  try {\n    const response = await fetch(\n      `http://localhost:3001/api/chat/workspaces/workspace`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          workspaceId: id\n        })\n      }\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\nexport const getChatSessionMessagesByMessagesIds = async (messageIds) => {\n  try {\n    const response = await fetch(\n      `${API_URL}/chat/chat_messages/session/messages`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ messageIds })\n      }\n    );\n    if (!response.ok) {\n      throw new Error(\n        `HTTP error! status: ${response.status} message: ${response.statusText}`\n      );\n    }\n    const messagesData = await response.json();\n    return messagesData;\n  } catch (error) {\n    console.error(\"Error fetching messages data:\", error);\n    throw error;\n  }\n};\nexport const getChatSessionsByWorkspaceId = async (workspaceId) => {\n  const response = await fetch(`${API_URL}/chat/chatSessions`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ workspaceId })\n  });\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n  const data = await response.json();\n  if (!data.chatSessions) {\n    throw new Error(data.error);\n  }\n  return data.chatSessions;\n};\nexport const getChatSessionBySessionId = async (sessionId) => {\n  try {\n    const response = await fetch(`${API_URL}/chat/chatSessions/session`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ sessionId })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const sessionData = await response.json();\n    return sessionData;\n  } catch (error) {\n    console.error(\"Error fetching session data:\", error);\n    throw error;\n  }\n};\nexport const getChatSessionByUserId = async (sessionId) => {\n  try {\n    const response = await fetch(`${API_URL}/chat/chatSessions/session/user`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ sessionId })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const sessionData = await response.json();\n    return sessionData;\n  } catch (error) {\n    console.error(\"Error fetching session data:\", error);\n    throw error;\n  }\n};\nexport const getChatSessionMessagesBySessionId = async (sessionId) => {\n  const id = encodeURIComponent(sessionId);\n  try {\n    const response = await fetch(\n      `${API_URL}/chat/chatSessions/session/messages`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sessionId: id\n        })\n      }\n    );\n    if (!response.ok) {\n      throw new Error(\n        `HTTP error! status: ${response.status} message: ${response.statusText}`\n      );\n    }\n    const messagesData = await response.json();\n    return messagesData;\n  } catch (error) {\n    console.error(\"Error fetching messages data:\", error);\n    throw error;\n  }\n};\nexport const saveMessagesToSession = async (userId, workspaceId, sessionId, messages) => {\n  console.log(\"ID\", sessionId);\n  const id = encodeURIComponent(sessionId);\n  try {\n    const updatedMessages = messages?.map((message) => ({\n      content: message.content,\n      role: message.role\n    }));\n    const body = {\n      sessionId,\n      messages,\n      updatedMessages\n    };\n    const response = await fetch(\n      `/api/chat/chat_sessions/session/${id}/messages/save`,\n      {\n        method: \"PUT\",\n        body: JSON.stringify(body),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    );\n    console.log(response);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n//# sourceMappingURL=data:application/json;base64,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... (14603 more characters)"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.0009144580690190196
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /src/api/chat/chat_main.jsx (200) — 2024-07-28T11:41:29.125Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /src/api/chat/chat_main.jsx"
        }
      ]
    }
  ]
}