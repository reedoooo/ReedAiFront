{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-QDGX24S3.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"6765-lP8r/OLfuFCGBegZ14cfa8tJBZU\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/factor.js\nvar require_factor = __commonJS({\n  \"node_modules/refractor/lang/factor.js\"(exports, module) {\n    module.exports = factor;\n    factor.displayName = \"factor\";\n    factor.aliases = [];\n    function factor(Prism) {\n      ;\n      (function(Prism2) {\n        var comment_inside = {\n          function: /\\b(?:BUGS?|FIX(?:MES?)?|NOTES?|TODOS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/\n        };\n        var string_inside = {\n          number: /\\\\[^\\s']|%\\w/\n        };\n        var factor2 = {\n          comment: [\n            {\n              // ! single-line exclamation point comments with whitespace after/around the !\n              pattern: /(^|\\s)(?:! .*|!$)/,\n              lookbehind: true,\n              inside: comment_inside\n            },\n            /* from basis/multiline: */\n            {\n              // /* comment */, /* comment*/\n              pattern: /(^|\\s)\\/\\*\\s[\\s\\S]*?\\*\\/(?=\\s|$)/,\n              lookbehind: true,\n              greedy: true,\n              inside: comment_inside\n            },\n            {\n              // ![[ comment ]] , ![===[ comment]===]\n              pattern: /(^|\\s)!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n              lookbehind: true,\n              greedy: true,\n              inside: comment_inside\n            }\n          ],\n          number: [\n            {\n              // basic base 10 integers 9, -9\n              pattern: /(^|\\s)[+-]?\\d+(?=\\s|$)/,\n              lookbehind: true\n            },\n            {\n              // base prefix integers 0b010 0o70 0xad 0d10 0XAD -0xa9\n              pattern: /(^|\\s)[+-]?0(?:b[01]+|o[0-7]+|d\\d+|x[\\dA-F]+)(?=\\s|$)/i,\n              lookbehind: true\n            },\n            {\n              // fractional ratios 1/5 -1/5 and the literal float approximations 1/5. -1/5.\n              pattern: /(^|\\s)[+-]?\\d+\\/\\d+\\.?(?=\\s|$)/,\n              lookbehind: true\n            },\n            {\n              // positive mixed numbers 23+1/5 +23+1/5\n              pattern: /(^|\\s)\\+?\\d+\\+\\d+\\/\\d+(?=\\s|$)/,\n              lookbehind: true\n            },\n            {\n              // negative mixed numbers -23-1/5\n              pattern: /(^|\\s)-\\d+-\\d+\\/\\d+(?=\\s|$)/,\n              lookbehind: true\n            },\n            {\n              // basic decimal floats -0.01 0. .0 .1 -.1 -1. -12.13 +12.13\n              // and scientific notation with base 10 exponents 3e4 3e-4 .3e-4\n              pattern: /(^|\\s)[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:e[+-]?\\d+)?(?=\\s|$)/i,\n              lookbehind: true\n            },\n            {\n              // NAN literal syntax NAN: 80000deadbeef, NAN: a\n              pattern: /(^|\\s)NAN:\\s+[\\da-fA-F]+(?=\\s|$)/,\n              lookbehind: true\n            },\n            {\n              /*\n              base prefix floats 0x1.0p3 (8.0) 0b1.010p2 (5.0) 0x1.p1 0b1.11111111p11111...\n              \"The normalized hex form ±0x1.MMMMMMMMMMMMM[pP]±EEEE allows any floating-point number to be specified precisely.\n              The values of MMMMMMMMMMMMM and EEEE map directly to the mantissa and exponent fields of the binary IEEE 754 representation.\"\n              <https://docs.factorcode.org/content/article-syntax-floats.html>\n              */\n              pattern: /(^|\\s)[+-]?0(?:b1\\.[01]*|o1\\.[0-7]*|d1\\.\\d*|x1\\.[\\dA-F]*)p\\d+(?=\\s|$)/i,\n              lookbehind: true\n            }\n          ],\n          // R/ regexp?\\/\\\\/\n          regexp: {\n            pattern: /(^|\\s)R\\/\\s(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\\s|$)/,\n            lookbehind: true,\n            alias: \"number\",\n            inside: {\n              variable: /\\\\\\S/,\n              keyword: /[+?*\\[\\]^$(){}.|]/,\n              operator: {\n                pattern: /(\\/)[idmsr]+(?:-[idmsr]+)?/,\n                lookbehind: true\n              }\n            }\n          },\n          boolean: {\n            pattern: /(^|\\s)[tf](?=\\s|$)/,\n            lookbehind: true\n          },\n          // SBUF\" asd\", URL\" ://...\", P\" /etc/\"\n          \"custom-string\": {\n            pattern: /(^|\\s)[A-Z0-9\\-]+\"\\s(?:\\\\\\S|[^\"\\\\])*\"/,\n            lookbehind: true,\n            greedy: true,\n            alias: \"string\",\n            inside: {\n              number: /\\\\\\S|%\\w|\\//\n            }\n          },\n          \"multiline-string\": [\n            {\n              // STRING: name \\n content \\n ; -> CONSTANT: name \"content\" (symbol)\n              pattern: /(^|\\s)STRING:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*;(?=\\s|$)/,\n              lookbehind: true,\n              greedy: true,\n              alias: \"string\",\n              inside: {\n                number: string_inside.number,\n                // trailing semicolon on its own line\n                \"semicolon-or-setlocal\": {\n                  pattern: /([\\r\\n][ \\t]*);(?=\\s|$)/,\n                  lookbehind: true,\n                  alias: \"function\"\n                }\n              }\n            },\n            {\n              // HEREDOC: marker \\n content \\n marker ; -> \"content\" (immediate)\n              pattern: /(^|\\s)HEREDOC:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*\\S+(?=\\s|$)/,\n              lookbehind: true,\n              greedy: true,\n              alias: \"string\",\n              inside: string_inside\n            },\n            {\n              // [[ string ]], [==[ string]==]\n              pattern: /(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n              lookbehind: true,\n              greedy: true,\n              alias: \"string\",\n              inside: string_inside\n            }\n          ],\n          \"special-using\": {\n            pattern: /(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?:\\s|$))/,\n            lookbehind: true,\n            alias: \"function\",\n            inside: {\n              // this is essentially a regex for vocab names, which i don't want to specify\n              // but the USING: gets picked up as a vocab name\n              string: {\n                pattern: /(\\s)[^:\\s]+/,\n                lookbehind: true\n              }\n            }\n          },\n          /* this description of stack effect literal syntax is not complete and not as specific as theoretically possible\n          trying to do better is more work and regex-computation-time than it's worth though.\n          - we'd like to have the \"delimiter\" parts of the stack effect [ (, --, and ) ] be a different (less-important or comment-like) colour to the stack effect contents\n          - we'd like if nested stack effects were treated as such rather than just appearing flat (with `inside`)\n          - we'd like if the following variable name conventions were recognised specifically:\n          special row variables = ..a b..\n          type and stack effect annotations end with a colon = ( quot: ( a: ( -- ) -- b ) -- x ), ( x: number -- )\n          word throws unconditional error = *\n          any other word-like variable name = a ? q' etc\n          https://docs.factorcode.org/content/article-effects.html\n          these are pretty complicated to highlight properly without a real parser, and therefore out of scope\n          the old pattern, which may be later useful, was: (^|\\s)(?:call|execute|eval)?\\((?:\\s+[^\"\\r\\n\\t ]\\S*)*?\\s+--(?:\\s+[^\"\\n\\t ]\\S*)*?\\s+\\)(?=\\s|$)\n          */\n          // current solution is not great\n          \"stack-effect-delimiter\": [\n            {\n              // opening parenthesis\n              pattern: /(^|\\s)(?:call|eval|execute)?\\((?=\\s)/,\n              lookbehind: true,\n              alias: \"operator\"\n            },\n            {\n              // middle --\n              pattern: /(\\s)--(?=\\s)/,\n              lookbehind: true,\n              alias: \"operator\"\n            },\n            {\n              // closing parenthesis\n              pattern: /(\\s)\\)(?=\\s|$)/,\n              lookbehind: true,\n              alias: \"operator\"\n            }\n          ],\n          combinators: {\n            pattern: null,\n            lookbehind: true,\n            alias: \"keyword\"\n          },\n          \"kernel-builtin\": {\n            pattern: null,\n            lookbehind: true,\n            alias: \"variable\"\n          },\n          \"sequences-builtin\": {\n            pattern: null,\n            lookbehind: true,\n            alias: \"variable\"\n          },\n          \"math-builtin\": {\n            pattern: null,\n            lookbehind: true,\n            alias: \"variable\"\n          },\n          \"constructor-word\": {\n            // <array> but not <=>\n            pattern: /(^|\\s)<(?!=+>|-+>)\\S+>(?=\\s|$)/,\n            lookbehind: true,\n            alias: \"keyword\"\n          },\n          \"other-builtin-syntax\": {\n            pattern: null,\n            lookbehind: true,\n            alias: \"operator\"\n          },\n          /*\n          full list of supported word naming conventions: (the convention appears outside of the [brackets])\n          set-[x]\n          change-[x]\n          with-[x]\n          new-[x]\n          >[string]\n          [base]>\n          [string]>[number]\n          +[symbol]+\n          [boolean-word]?\n          ?[of]\n          [slot-reader]>>\n          >>[slot-setter]\n          [slot-writer]<<\n          ([implementation-detail])\n          [mutater]!\n          [variant]*\n          [prettyprint].\n          $[help-markup]\n          <constructors>, SYNTAX:, etc are supported by their own patterns.\n          `with` and `new` from `kernel` are their own builtins.\n          see <https://docs.factorcode.org/content/article-conventions.html>\n          */\n          \"conventionally-named-word\": {\n            pattern: /(^|\\s)(?!\")(?:(?:change|new|set|with)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?=\\s|$)/,\n            lookbehind: true,\n            alias: \"keyword\"\n          },\n          \"colon-syntax\": {\n            pattern: /(^|\\s)(?:[A-Z0-9\\-]+#?)?:{1,2}\\s+(?:;\\S+|(?!;)\\S+)(?=\\s|$)/,\n            lookbehind: true,\n            greedy: true,\n            alias: \"fu... (16467 more characters)"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.0002003329573199153
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-QDGX24S3.js (200) — 2024-07-28T11:41:34.770Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-QDGX24S3.js"
        }
      ]
    }
  ]
}