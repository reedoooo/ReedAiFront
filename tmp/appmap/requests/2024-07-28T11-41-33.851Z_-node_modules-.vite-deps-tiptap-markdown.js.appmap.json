{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/tiptap-markdown.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/src/hooks/useTipTapEditor.jsx",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'f5135d62'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"43d87-QZ0U+cFMlUmqK7yIFnncDdUG05s\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  DOMParser,\n  Extension,\n  Fragment,\n  Mark,\n  Mark2,\n  Node as Node2,\n  Plugin,\n  PluginKey,\n  Schema,\n  getHTMLFromFragment,\n  index\n} from \"/node_modules/.vite/deps/chunk-3FZAEXWV.js?v=b39bb78e\";\nimport {\n  __commonJS,\n  __export,\n  __toESM\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/markdown-it-task-lists/index.js\nvar require_markdown_it_task_lists = __commonJS({\n  \"node_modules/markdown-it-task-lists/index.js\"(exports, module) {\n    var disableCheckboxes = true;\n    var useLabelWrapper = false;\n    var useLabelAfter = false;\n    module.exports = function(md2, options) {\n      if (options) {\n        disableCheckboxes = !options.enabled;\n        useLabelWrapper = !!options.label;\n        useLabelAfter = !!options.labelAfter;\n      }\n      md2.core.ruler.after(\"inline\", \"github-task-lists\", function(state) {\n        var tokens = state.tokens;\n        for (var i = 2; i < tokens.length; i++) {\n          if (isTodoItem(tokens, i)) {\n            todoify(tokens[i], state.Token);\n            attrSet2(tokens[i - 2], \"class\", \"task-list-item\" + (!disableCheckboxes ? \" enabled\" : \"\"));\n            attrSet2(tokens[parentToken(tokens, i - 2)], \"class\", \"contains-task-list\");\n          }\n        }\n      });\n    };\n    function attrSet2(token, name, value) {\n      var index2 = token.attrIndex(name);\n      var attr = [name, value];\n      if (index2 < 0) {\n        token.attrPush(attr);\n      } else {\n        token.attrs[index2] = attr;\n      }\n    }\n    function parentToken(tokens, index2) {\n      var targetLevel = tokens[index2].level - 1;\n      for (var i = index2 - 1; i >= 0; i--) {\n        if (tokens[i].level === targetLevel) {\n          return i;\n        }\n      }\n      return -1;\n    }\n    function isTodoItem(tokens, index2) {\n      return isInline(tokens[index2]) && isParagraph(tokens[index2 - 1]) && isListItem(tokens[index2 - 2]) && startsWithTodoMarkdown(tokens[index2]);\n    }\n    function todoify(token, TokenConstructor) {\n      token.children.unshift(makeCheckbox(token, TokenConstructor));\n      token.children[1].content = token.children[1].content.slice(3);\n      token.content = token.content.slice(3);\n      if (useLabelWrapper) {\n        if (useLabelAfter) {\n          token.children.pop();\n          var id = \"task-item-\" + Math.ceil(Math.random() * (1e4 * 1e3) - 1e3);\n          token.children[0].content = token.children[0].content.slice(0, -1) + ' id=\"' + id + '\">';\n          token.children.push(afterLabel(token.content, id, TokenConstructor));\n        } else {\n          token.children.unshift(beginLabel(TokenConstructor));\n          token.children.push(endLabel(TokenConstructor));\n        }\n      }\n    }\n    function makeCheckbox(token, TokenConstructor) {\n      var checkbox = new TokenConstructor(\"html_inline\", \"\", 0);\n      var disabledAttr = disableCheckboxes ? ' disabled=\"\" ' : \"\";\n      if (token.content.indexOf(\"[ ] \") === 0) {\n        checkbox.content = '<input class=\"task-list-item-checkbox\"' + disabledAttr + 'type=\"checkbox\">';\n      } else if (token.content.indexOf(\"[x] \") === 0 || token.content.indexOf(\"[X] \") === 0) {\n        checkbox.content = '<input class=\"task-list-item-checkbox\" checked=\"\"' + disabledAttr + 'type=\"checkbox\">';\n      }\n      return checkbox;\n    }\n    function beginLabel(TokenConstructor) {\n      var token = new TokenConstructor(\"html_inline\", \"\", 0);\n      token.content = \"<label>\";\n      return token;\n    }\n    function endLabel(TokenConstructor) {\n      var token = new TokenConstructor(\"html_inline\", \"\", 0);\n      token.content = \"</label>\";\n      return token;\n    }\n    function afterLabel(content, id, TokenConstructor) {\n      var token = new TokenConstructor(\"html_inline\", \"\", 0);\n      token.content = '<label class=\"task-list-item-label\" for=\"' + id + '\">' + content + \"</label>\";\n      token.attrs = [{ for: id }];\n      return token;\n    }\n    function isInline(token) {\n      return token.type === \"inline\";\n    }\n    function isParagraph(token) {\n      return token.type === \"paragraph_open\";\n    }\n    function isListItem(token) {\n      return token.type === \"list_item_open\";\n    }\n    function startsWithTodoMarkdown(token) {\n      return token.content.indexOf(\"[ ] \") === 0 || token.content.indexOf(\"[x] \") === 0 || token.content.indexOf(\"[X] \") === 0;\n    }\n  }\n});\n\n// node_modules/markdown-it/lib/common/utils.mjs\nvar utils_exports = {};\n__export(utils_exports, {\n  arrayReplaceAt: () => arrayReplaceAt,\n  assign: () => assign,\n  escapeHtml: () => escapeHtml,\n  escapeRE: () => escapeRE,\n  fromCodePoint: () => fromCodePoint2,\n  has: () => has,\n  isMdAsciiPunct: () => isMdAsciiPunct,\n  isPunctChar: () => isPunctChar,\n  isSpace: () => isSpace,\n  isString: () => isString,\n  isValidEntityCode: () => isValidEntityCode,\n  isWhiteSpace: () => isWhiteSpace,\n  lib: () => lib,\n  normalizeReference: () => normalizeReference,\n  unescapeAll: () => unescapeAll,\n  unescapeMd: () => unescapeMd\n});\n\n// node_modules/mdurl/index.mjs\nvar mdurl_exports = {};\n__export(mdurl_exports, {\n  decode: () => decode_default,\n  encode: () => encode_default,\n  format: () => format,\n  parse: () => parse_default\n});\n\n// node_modules/mdurl/lib/decode.mjs\nvar decodeCache = {};\nfunction getDecodeCache(exclude) {\n  let cache = decodeCache[exclude];\n  if (cache) {\n    return cache;\n  }\n  cache = decodeCache[exclude] = [];\n  for (let i = 0; i < 128; i++) {\n    const ch = String.fromCharCode(i);\n    cache.push(ch);\n  }\n  for (let i = 0; i < exclude.length; i++) {\n    const ch = exclude.charCodeAt(i);\n    cache[ch] = \"%\" + (\"0\" + ch.toString(16).toUpperCase()).slice(-2);\n  }\n  return cache;\n}\nfunction decode(string, exclude) {\n  if (typeof exclude !== \"string\") {\n    exclude = decode.defaultChars;\n  }\n  const cache = getDecodeCache(exclude);\n  return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n    let result = \"\";\n    for (let i = 0, l = seq.length; i < l; i += 3) {\n      const b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n      if (b1 < 128) {\n        result += cache[b1];\n        continue;\n      }\n      if ((b1 & 224) === 192 && i + 3 < l) {\n        const b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        if ((b2 & 192) === 128) {\n          const chr = b1 << 6 & 1984 | b2 & 63;\n          if (chr < 128) {\n            result += \"��\";\n          } else {\n            result += String.fromCharCode(chr);\n          }\n          i += 3;\n          continue;\n        }\n      }\n      if ((b1 & 240) === 224 && i + 6 < l) {\n        const b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        const b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n        if ((b2 & 192) === 128 && (b3 & 192) === 128) {\n          const chr = b1 << 12 & 61440 | b2 << 6 & 4032 | b3 & 63;\n          if (chr < 2048 || chr >= 55296 && chr <= 57343) {\n            result += \"���\";\n          } else {\n            result += String.fromCharCode(chr);\n          }\n          i += 6;\n          continue;\n        }\n      }\n      if ((b1 & 248) === 240 && i + 9 < l) {\n        const b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        const b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n        const b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n        if ((b2 & 192) === 128 && (b3 & 192) === 128 && (b4 & 192) === 128) {\n          let chr = b1 << 18 & 1835008 | b2 << 12 & 258048 | b3 << 6 & 4032 | b4 & 63;\n          if (chr < 65536 || chr > 1114111) {\n            result += \"����\";\n          } else {\n            chr -= 65536;\n            result += String.fromCharCode(55296 + (chr >> 10), 56320 + (chr & 1023));\n          }\n          i += 9;\n          continue;\n        }\n      }\n      result += \"�\";\n    }\n    return result;\n  });\n}\ndecode.defaultChars = \";/?:@&=+$,#\";\ndecode.componentChars = \"\";\nvar decode_default = decode;\n\n// node_modules/mdurl/lib/encode.mjs\nvar encodeCache = {};\nfunction getEncodeCache(exclude) {\n  let cache = encodeCache[exclude];\n  if (cache) {\n    return cache;\n  }\n  cache = encodeCache[exclude] = [];\n  for (let i = 0; i < 128; i++) {\n    const ch = String.fromCharCode(i);\n    if (/^[0-9a-z]$/i.test(ch)) {\n      cache.push(ch);\n    } else {\n      cache.push(\"%\" + (\"0\" + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n  for (let i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n  return cache;\n}\nfunction encode(string, exclude, keepEscaped) {\n  if (typeof exclude !== \"string\") {\n    keepEscaped = exclude;\n    exclude = encode.defaultChars;\n  }\n  if (typeof keepEscaped === \"undefined\") {\n    keepEscaped = true;\n  }\n  const cache = getEncodeCache(exclude);\n  let result = \"\";\n  for (let i = 0, l = string.length; i < l; i++) {\n    const code2 = string.charCodeAt(i);\n    if (keepEscaped && code2 === 37 && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n    if (code2 < 128) {\n      result += cache[code2];\n      continue;\n    }\n    if (code2 >= 55296 && code2 <= 57343) {\n      if (code2 >= 55296 && code2 <= 56319 && i + 1 < l) {\n        const nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 56320 && nextCode <= 57343) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += \"%EF%BF%BD\";\n      continue;\n    }\n    result += encodeURIComponent(string[i]);\n  }\n  return result;\n}\nencode.defaultChars = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\nvar encode_default = encode;\n\n// node_modules/mdurl/lib/format.mjs\nfunction format(url) {\n  let result = \"\";\n  result += url.protocol || \"\";\n  result += url.slashes ? \"//\" : \"\";\n  result += url.auth ? url.auth + \"@\" : \"\";\n  if (url.hostname && url.hostname.indexOf(\":\") !== -1) {\n    result += \"[\" + url.hostname + \"]\";\n  } else {\n    result += url.hostname || \"\";\n  }\n  result += url.port ? \":\" + url.port : \"\";\n  result += url.pathname || \"\";\n  result += url.search || \"\";\n  result += url.hash || \"\";\n  return result;\n}\n... (256512 more characters)"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.0019587089773267508
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/tiptap-markdown.js (200) — 2024-07-28T11:41:33.851Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/tiptap-markdown.js"
        }
      ]
    }
  ]
}