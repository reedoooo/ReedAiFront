{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-LKEFS5D4.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"109d-680hnbbTaYDvXhEBDzJGAPq1YtM\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/web-idl.js\nvar require_web_idl = __commonJS({\n  \"node_modules/refractor/lang/web-idl.js\"(exports, module) {\n    module.exports = webIdl;\n    webIdl.displayName = \"webIdl\";\n    webIdl.aliases = [];\n    function webIdl(Prism) {\n      ;\n      (function(Prism2) {\n        var id = /(?:\\B-|\\b_|\\b)[A-Za-z][\\w-]*(?![\\w-])/.source;\n        var type = \"(?:\" + /\\b(?:unsigned\\s+)?long\\s+long(?![\\w-])/.source + \"|\" + /\\b(?:unrestricted|unsigned)\\s+[a-z]+(?![\\w-])/.source + \"|\" + /(?!(?:unrestricted|unsigned)\\b)/.source + id + /(?:\\s*<(?:[^<>]|<[^<>]*>)*>)?/.source + \")\" + /(?:\\s*\\?)?/.source;\n        var typeInside = {};\n        Prism2.languages[\"web-idl\"] = {\n          comment: {\n            pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n            greedy: true\n          },\n          string: {\n            pattern: /\"[^\"]*\"/,\n            greedy: true\n          },\n          namespace: {\n            pattern: RegExp(/(\\bnamespace\\s+)/.source + id),\n            lookbehind: true\n          },\n          \"class-name\": [\n            {\n              pattern: /(^|[^\\w-])(?:iterable|maplike|setlike)\\s*<(?:[^<>]|<[^<>]*>)*>/,\n              lookbehind: true,\n              inside: typeInside\n            },\n            {\n              pattern: RegExp(\n                /(\\b(?:attribute|const|deleter|getter|optional|setter)\\s+)/.source + type\n              ),\n              lookbehind: true,\n              inside: typeInside\n            },\n            {\n              // callback return type\n              pattern: RegExp(\n                \"(\" + /\\bcallback\\s+/.source + id + /\\s*=\\s*/.source + \")\" + type\n              ),\n              lookbehind: true,\n              inside: typeInside\n            },\n            {\n              // typedef\n              pattern: RegExp(/(\\btypedef\\b\\s*)/.source + type),\n              lookbehind: true,\n              inside: typeInside\n            },\n            {\n              pattern: RegExp(\n                /(\\b(?:callback|dictionary|enum|interface(?:\\s+mixin)?)\\s+)(?!(?:interface|mixin)\\b)/.source + id\n              ),\n              lookbehind: true\n            },\n            {\n              // inheritance\n              pattern: RegExp(/(:\\s*)/.source + id),\n              lookbehind: true\n            },\n            // includes and implements\n            RegExp(id + /(?=\\s+(?:implements|includes)\\b)/.source),\n            {\n              pattern: RegExp(/(\\b(?:implements|includes)\\s+)/.source + id),\n              lookbehind: true\n            },\n            {\n              // function return type, parameter types, and dictionary members\n              pattern: RegExp(\n                type + \"(?=\" + /\\s*(?:\\.{3}\\s*)?/.source + id + /\\s*[(),;=]/.source + \")\"\n              ),\n              inside: typeInside\n            }\n          ],\n          builtin: /\\b(?:ArrayBuffer|BigInt64Array|BigUint64Array|ByteString|DOMString|DataView|Float32Array|Float64Array|FrozenArray|Int16Array|Int32Array|Int8Array|ObservableArray|Promise|USVString|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray)\\b/,\n          keyword: [\n            /\\b(?:async|attribute|callback|const|constructor|deleter|dictionary|enum|getter|implements|includes|inherit|interface|mixin|namespace|null|optional|or|partial|readonly|required|setter|static|stringifier|typedef|unrestricted)\\b/,\n            // type keywords\n            /\\b(?:any|bigint|boolean|byte|double|float|iterable|long|maplike|object|octet|record|sequence|setlike|short|symbol|undefined|unsigned|void)\\b/\n          ],\n          boolean: /\\b(?:false|true)\\b/,\n          number: {\n            pattern: /(^|[^\\w-])-?(?:0x[0-9a-f]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|NaN|Infinity)(?![\\w-])/i,\n            lookbehind: true\n          },\n          operator: /\\.{3}|[=:?<>-]/,\n          punctuation: /[(){}[\\].,;]/\n        };\n        for (var key in Prism2.languages[\"web-idl\"]) {\n          if (key !== \"class-name\") {\n            typeInside[key] = Prism2.languages[\"web-idl\"][key];\n          }\n        }\n        Prism2.languages[\"webidl\"] = Prism2.languages[\"web-idl\"];\n      })(Prism);\n    }\n  }\n});\n\nexport {\n  require_web_idl\n};\n//# sourceMappingURL=chunk-LKEFS5D4.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.0005047499435022473
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-LKEFS5D4.js (200) â€” 2024-07-28T11:41:34.079Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-LKEFS5D4.js"
        }
      ]
    }
  ]
}