{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-BAFNMJF7.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"ca8-XXeVGEXokOa5QT6KQQkumCYuCDo\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/sml.js\nvar require_sml = __commonJS({\n  \"node_modules/refractor/lang/sml.js\"(exports, module) {\n    module.exports = sml;\n    sml.displayName = \"sml\";\n    sml.aliases = [\"smlnj\"];\n    function sml(Prism) {\n      ;\n      (function(Prism2) {\n        var keywords = /\\b(?:abstype|and|andalso|as|case|datatype|do|else|end|eqtype|exception|fn|fun|functor|handle|if|in|include|infix|infixr|let|local|nonfix|of|op|open|orelse|raise|rec|sharing|sig|signature|struct|structure|then|type|val|where|while|with|withtype)\\b/i;\n        Prism2.languages.sml = {\n          // allow one level of nesting\n          comment: /\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*)|\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*))*\\*\\))*\\*\\)/,\n          string: {\n            pattern: /#?\"(?:[^\"\\\\]|\\\\.)*\"/,\n            greedy: true\n          },\n          \"class-name\": [\n            {\n              // This is only an approximation since the real grammar is context-free\n              //\n              // Why the main loop so complex?\n              // The main loop is approximately the same as /(?:\\s*(?:[*,]|->)\\s*<TERMINAL>)*/ which is, obviously, a lot\n              // simpler. The difference is that if a comma is the last iteration of the loop, then the terminal must be\n              // followed by a long identifier.\n              pattern: RegExp(\n                /((?:^|[^:]):\\s*)<TERMINAL>(?:\\s*(?:(?:\\*|->)\\s*<TERMINAL>|,\\s*<TERMINAL>(?:(?=<NOT-LAST>)|(?!<NOT-LAST>)\\s+<LONG-ID>)))*/.source.replace(/<NOT-LAST>/g, function() {\n                  return /\\s*(?:[*,]|->)/.source;\n                }).replace(/<TERMINAL>/g, function() {\n                  return /(?:'[\\w']*|<LONG-ID>|\\((?:[^()]|\\([^()]*\\))*\\)|\\{(?:[^{}]|\\{[^{}]*\\})*\\})(?:\\s+<LONG-ID>)*/.source;\n                }).replace(/<LONG-ID>/g, function() {\n                  return /(?!<KEYWORD>)[a-z\\d_][\\w'.]*/.source;\n                }).replace(/<KEYWORD>/g, function() {\n                  return keywords.source;\n                }),\n                \"i\"\n              ),\n              lookbehind: true,\n              greedy: true,\n              inside: null\n              // see below\n            },\n            {\n              pattern: /((?:^|[^\\w'])(?:datatype|exception|functor|signature|structure|type)\\s+)[a-z_][\\w'.]*/i,\n              lookbehind: true\n            }\n          ],\n          function: {\n            pattern: /((?:^|[^\\w'])fun\\s+)[a-z_][\\w'.]*/i,\n            lookbehind: true\n          },\n          keyword: keywords,\n          variable: {\n            pattern: /(^|[^\\w'])'[\\w']*/,\n            lookbehind: true\n          },\n          number: /~?\\b(?:\\d+(?:\\.\\d+)?(?:e~?\\d+)?|0x[\\da-f]+)\\b/i,\n          word: {\n            pattern: /\\b0w(?:\\d+|x[\\da-f]+)\\b/i,\n            alias: \"constant\"\n          },\n          boolean: /\\b(?:false|true)\\b/i,\n          operator: /\\.\\.\\.|:[>=:]|=>?|->|[<>]=?|[!+\\-*/^#|@~]/,\n          punctuation: /[(){}\\[\\].:,;]/\n        };\n        Prism2.languages.sml[\"class-name\"][0].inside = Prism2.languages.sml;\n        Prism2.languages.smlnj = Prism2.languages.sml;\n      })(Prism);\n    }\n  }\n});\n\nexport {\n  require_sml\n};\n//# sourceMappingURL=chunk-BAFNMJF7.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.0001267909538000822
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-BAFNMJF7.js (200) â€” 2024-07-28T11:41:34.204Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-BAFNMJF7.js"
        }
      ]
    }
  ]
}