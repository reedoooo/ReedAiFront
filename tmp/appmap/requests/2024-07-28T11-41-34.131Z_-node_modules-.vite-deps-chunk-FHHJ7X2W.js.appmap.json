{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-FHHJ7X2W.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"2b20-bgHn0oxhziDbXCVP5jfnpM70Dwc\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/textile.js\nvar require_textile = __commonJS({\n  \"node_modules/refractor/lang/textile.js\"(exports, module) {\n    module.exports = textile;\n    textile.displayName = \"textile\";\n    textile.aliases = [];\n    function textile(Prism) {\n      ;\n      (function(Prism2) {\n        var modifierRegex = /\\([^|()\\n]+\\)|\\[[^\\]\\n]+\\]|\\{[^}\\n]+\\}/.source;\n        var parenthesesRegex = /\\)|\\((?![^|()\\n]+\\))/.source;\n        function withModifier(source, flags) {\n          return RegExp(\n            source.replace(/<MOD>/g, function() {\n              return \"(?:\" + modifierRegex + \")\";\n            }).replace(/<PAR>/g, function() {\n              return \"(?:\" + parenthesesRegex + \")\";\n            }),\n            flags || \"\"\n          );\n        }\n        var modifierTokens = {\n          css: {\n            pattern: /\\{[^{}]+\\}/,\n            inside: {\n              rest: Prism2.languages.css\n            }\n          },\n          \"class-id\": {\n            pattern: /(\\()[^()]+(?=\\))/,\n            lookbehind: true,\n            alias: \"attr-value\"\n          },\n          lang: {\n            pattern: /(\\[)[^\\[\\]]+(?=\\])/,\n            lookbehind: true,\n            alias: \"attr-value\"\n          },\n          // Anything else is punctuation (the first pattern is for row/col spans inside tables)\n          punctuation: /[\\\\\\/]\\d+|\\S/\n        };\n        var textile2 = Prism2.languages.textile = Prism2.languages.extend(\"markup\", {\n          phrase: {\n            pattern: /(^|\\r|\\n)\\S[\\s\\S]*?(?=$|\\r?\\n\\r?\\n|\\r\\r)/,\n            lookbehind: true,\n            inside: {\n              // h1. Header 1\n              \"block-tag\": {\n                pattern: withModifier(/^[a-z]\\w*(?:<MOD>|<PAR>|[<>=])*\\./.source),\n                inside: {\n                  modifier: {\n                    pattern: withModifier(\n                      /(^[a-z]\\w*)(?:<MOD>|<PAR>|[<>=])+(?=\\.)/.source\n                    ),\n                    lookbehind: true,\n                    inside: modifierTokens\n                  },\n                  tag: /^[a-z]\\w*/,\n                  punctuation: /\\.$/\n                }\n              },\n              // # List item\n              // * List item\n              list: {\n                pattern: withModifier(/^[*#]+<MOD>*\\s+\\S.*/.source, \"m\"),\n                inside: {\n                  modifier: {\n                    pattern: withModifier(/(^[*#]+)<MOD>+/.source),\n                    lookbehind: true,\n                    inside: modifierTokens\n                  },\n                  punctuation: /^[*#]+/\n                }\n              },\n              // | cell | cell | cell |\n              table: {\n                // Modifiers can be applied to the row: {color:red}.|1|2|3|\n                // or the cell: |{color:red}.1|2|3|\n                pattern: withModifier(\n                  /^(?:(?:<MOD>|<PAR>|[<>=^~])+\\.\\s*)?(?:\\|(?:(?:<MOD>|<PAR>|[<>=^~_]|[\\\\/]\\d+)+\\.|(?!(?:<MOD>|<PAR>|[<>=^~_]|[\\\\/]\\d+)+\\.))[^|]*)+\\|/.source,\n                  \"m\"\n                ),\n                inside: {\n                  modifier: {\n                    // Modifiers for rows after the first one are\n                    // preceded by a pipe and a line feed\n                    pattern: withModifier(\n                      /(^|\\|(?:\\r?\\n|\\r)?)(?:<MOD>|<PAR>|[<>=^~_]|[\\\\/]\\d+)+(?=\\.)/.source\n                    ),\n                    lookbehind: true,\n                    inside: modifierTokens\n                  },\n                  punctuation: /\\||^\\./\n                }\n              },\n              inline: {\n                // eslint-disable-next-line regexp/no-super-linear-backtracking\n                pattern: withModifier(\n                  /(^|[^a-zA-Z\\d])(\\*\\*|__|\\?\\?|[*_%@+\\-^~])<MOD>*.+?\\2(?![a-zA-Z\\d])/.source\n                ),\n                lookbehind: true,\n                inside: {\n                  // Note: superscripts and subscripts are not handled specifically\n                  // *bold*, **bold**\n                  bold: {\n                    // eslint-disable-next-line regexp/no-super-linear-backtracking\n                    pattern: withModifier(/(^(\\*\\*?)<MOD>*).+?(?=\\2)/.source),\n                    lookbehind: true\n                  },\n                  // _italic_, __italic__\n                  italic: {\n                    // eslint-disable-next-line regexp/no-super-linear-backtracking\n                    pattern: withModifier(/(^(__?)<MOD>*).+?(?=\\2)/.source),\n                    lookbehind: true\n                  },\n                  // ??cite??\n                  cite: {\n                    // eslint-disable-next-line regexp/no-super-linear-backtracking\n                    pattern: withModifier(/(^\\?\\?<MOD>*).+?(?=\\?\\?)/.source),\n                    lookbehind: true,\n                    alias: \"string\"\n                  },\n                  // @code@\n                  code: {\n                    // eslint-disable-next-line regexp/no-super-linear-backtracking\n                    pattern: withModifier(/(^@<MOD>*).+?(?=@)/.source),\n                    lookbehind: true,\n                    alias: \"keyword\"\n                  },\n                  // +inserted+\n                  inserted: {\n                    // eslint-disable-next-line regexp/no-super-linear-backtracking\n                    pattern: withModifier(/(^\\+<MOD>*).+?(?=\\+)/.source),\n                    lookbehind: true\n                  },\n                  // -deleted-\n                  deleted: {\n                    // eslint-disable-next-line regexp/no-super-linear-backtracking\n                    pattern: withModifier(/(^-<MOD>*).+?(?=-)/.source),\n                    lookbehind: true\n                  },\n                  // %span%\n                  span: {\n                    // eslint-disable-next-line regexp/no-super-linear-backtracking\n                    pattern: withModifier(/(^%<MOD>*).+?(?=%)/.source),\n                    lookbehind: true\n                  },\n                  modifier: {\n                    pattern: withModifier(\n                      /(^\\*\\*|__|\\?\\?|[*_%@+\\-^~])<MOD>+/.source\n                    ),\n                    lookbehind: true,\n                    inside: modifierTokens\n                  },\n                  punctuation: /[*_%?@+\\-^~]+/\n                }\n              },\n              // [alias]http://example.com\n              \"link-ref\": {\n                pattern: /^\\[[^\\]]+\\]\\S+$/m,\n                inside: {\n                  string: {\n                    pattern: /(^\\[)[^\\]]+(?=\\])/,\n                    lookbehind: true\n                  },\n                  url: {\n                    pattern: /(^\\])\\S+$/,\n                    lookbehind: true\n                  },\n                  punctuation: /[\\[\\]]/\n                }\n              },\n              // \"text\":http://example.com\n              // \"text\":link-ref\n              link: {\n                // eslint-disable-next-line regexp/no-super-linear-backtracking\n                pattern: withModifier(\n                  /\"<MOD>*[^\"]+\":.+?(?=[^\\w/]?(?:\\s|$))/.source\n                ),\n                inside: {\n                  text: {\n                    // eslint-disable-next-line regexp/no-super-linear-backtracking\n                    pattern: withModifier(/(^\"<MOD>*)[^\"]+(?=\")/.source),\n                    lookbehind: true\n                  },\n                  modifier: {\n                    pattern: withModifier(/(^\")<MOD>+/.source),\n                    lookbehind: true,\n                    inside: modifierTokens\n                  },\n                  url: {\n                    pattern: /(:).+/,\n                    lookbehind: true\n                  },\n                  punctuation: /[\":]/\n                }\n              },\n              // !image.jpg!\n              // !image.jpg(Title)!:http://example.com\n              image: {\n                pattern: withModifier(\n                  /!(?:<MOD>|<PAR>|[<>=])*(?![<>=])[^!\\s()]+(?:\\([^)]+\\))?!(?::.+?(?=[^\\w/]?(?:\\s|$)))?/.source\n                ),\n                inside: {\n                  source: {\n                    pattern: withModifier(\n                      /(^!(?:<MOD>|<PAR>|[<>=])*)(?![<>=])[^!\\s()]+(?:\\([^)]+\\))?(?=!)/.source\n                    ),\n                    lookbehind: true,\n                    alias: \"url\"\n                  },\n                  modifier: {\n                    pattern: withModifier(/(^!)(?:<MOD>|<PAR>|[<>=])+/.source),\n                    lookbehind: true,\n                    inside: modifierTokens\n                  },\n                  url: {\n                    pattern: /(:).+/,\n                    lookbehind: true\n                  },\n                  punctuation: /[!:]/\n                }\n              },\n              // Footnote[1]\n              footnote: {\n                pattern: /\\b\\[\\d+\\]/,\n                alias: \"comment\",\n                inside: {\n                  punctuation: /\\[|\\]/\n                }\n              },\n              // CSS(Cascading Style Sheet)\n              acronym: {\n                pattern: /\\b[A-Z\\d]+\\([^)]+\\)/,\n                inside: {\n                  comment: {\n                    pattern: /(\\()[^()]+(?=\\))/,\n                    lookbehind: true\n                  },\n                  punctuation: /[()]/\n                }\n              },\n              // Prism(C)\n              mark: {\n                pattern: /\\b\\((?:C|R|TM)\\)/,\n                alias: \"comment\",\n                inside: {\n                  punctuation: /[()]/\n                }\n              }\n            }\n          }\n        });\n        var phraseInside = textile2[\"phrase\"].inside;\n        var nestedPatterns = {\n          inline: phraseInside[\"inline\"],\n          link: phraseInside[\"link\"],\n          image: phraseInside[\"image\"],\n          footnote: phraseInside[\"footnote\"],\n          acronym: phraseInside[\"acronym\"],\n          mark: phraseInside[\"mark\"]\n        };\n        texti... (1040 more characters)"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00021395809017121792
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-FHHJ7X2W.js (200) — 2024-07-28T11:41:34.131Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-FHHJ7X2W.js"
        }
      ]
    }
  ]
}