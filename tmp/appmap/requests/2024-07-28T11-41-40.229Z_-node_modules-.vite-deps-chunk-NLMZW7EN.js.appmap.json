{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-NLMZW7EN.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"1ef0-v5bO7yhPtatAuIqEzTGPnMTDCCg\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/asciidoc.js\nvar require_asciidoc = __commonJS({\n  \"node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/asciidoc.js\"(exports, module) {\n    function source(re) {\n      if (!re) return null;\n      if (typeof re === \"string\") return re;\n      return re.source;\n    }\n    function concat(...args) {\n      const joined = args.map((x) => source(x)).join(\"\");\n      return joined;\n    }\n    function asciidoc(hljs) {\n      const HORIZONTAL_RULE = {\n        begin: \"^'{3,}[ \\\\t]*$\",\n        relevance: 10\n      };\n      const ESCAPED_FORMATTING = [\n        // escaped constrained formatting marks (i.e., \\* \\_ or \\`)\n        {\n          begin: /\\\\[*_`]/\n        },\n        // escaped unconstrained formatting marks (i.e., \\\\** \\\\__ or \\\\``)\n        // must ignore until the next formatting marks\n        // this rule might not be 100% compliant with Asciidoctor 2.0 but we are entering undefined behavior territory...\n        {\n          begin: /\\\\\\\\\\*{2}[^\\n]*?\\*{2}/\n        },\n        {\n          begin: /\\\\\\\\_{2}[^\\n]*_{2}/\n        },\n        {\n          begin: /\\\\\\\\`{2}[^\\n]*`{2}/\n        },\n        // guard: constrained formatting mark may not be preceded by \":\", \";\" or\n        // \"}\". match these so the constrained rule doesn't see them\n        {\n          begin: /[:;}][*_`](?![*_`])/\n        }\n      ];\n      const STRONG = [\n        // inline unconstrained strong (single line)\n        {\n          className: \"strong\",\n          begin: /\\*{2}([^\\n]+?)\\*{2}/\n        },\n        // inline unconstrained strong (multi-line)\n        {\n          className: \"strong\",\n          begin: concat(\n            /\\*\\*/,\n            /((\\*(?!\\*)|\\\\[^\\n]|[^*\\n\\\\])+\\n)+/,\n            /(\\*(?!\\*)|\\\\[^\\n]|[^*\\n\\\\])*/,\n            /\\*\\*/\n          ),\n          relevance: 0\n        },\n        // inline constrained strong (single line)\n        {\n          className: \"strong\",\n          // must not precede or follow a word character\n          begin: /\\B\\*(\\S|\\S[^\\n]*?\\S)\\*(?!\\w)/\n        },\n        // inline constrained strong (multi-line)\n        {\n          className: \"strong\",\n          // must not precede or follow a word character\n          begin: /\\*[^\\s]([^\\n]+\\n)+([^\\n]+)\\*/\n        }\n      ];\n      const EMPHASIS = [\n        // inline unconstrained emphasis (single line)\n        {\n          className: \"emphasis\",\n          begin: /_{2}([^\\n]+?)_{2}/\n        },\n        // inline unconstrained emphasis (multi-line)\n        {\n          className: \"emphasis\",\n          begin: concat(\n            /__/,\n            /((_(?!_)|\\\\[^\\n]|[^_\\n\\\\])+\\n)+/,\n            /(_(?!_)|\\\\[^\\n]|[^_\\n\\\\])*/,\n            /__/\n          ),\n          relevance: 0\n        },\n        // inline constrained emphasis (single line)\n        {\n          className: \"emphasis\",\n          // must not precede or follow a word character\n          begin: /\\b_(\\S|\\S[^\\n]*?\\S)_(?!\\w)/\n        },\n        // inline constrained emphasis (multi-line)\n        {\n          className: \"emphasis\",\n          // must not precede or follow a word character\n          begin: /_[^\\s]([^\\n]+\\n)+([^\\n]+)_/\n        },\n        // inline constrained emphasis using single quote (legacy)\n        {\n          className: \"emphasis\",\n          // must not follow a word character or be followed by a single quote or space\n          begin: \"\\\\B'(?!['\\\\s])\",\n          end: \"(\\\\n{2}|')\",\n          // allow escaped single quote followed by word char\n          contains: [{\n            begin: \"\\\\\\\\'\\\\w\",\n            relevance: 0\n          }],\n          relevance: 0\n        }\n      ];\n      const ADMONITION = {\n        className: \"symbol\",\n        begin: \"^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\\\s+\",\n        relevance: 10\n      };\n      const BULLET_LIST = {\n        className: \"bullet\",\n        begin: \"^(\\\\*+|-+|\\\\.+|[^\\\\n]+?::)\\\\s+\"\n      };\n      return {\n        name: \"AsciiDoc\",\n        aliases: [\"adoc\"],\n        contains: [\n          // block comment\n          hljs.COMMENT(\n            \"^/{4,}\\\\n\",\n            \"\\\\n/{4,}$\",\n            // can also be done as...\n            // '^/{4,}$',\n            // '^/{4,}$',\n            {\n              relevance: 10\n            }\n          ),\n          // line comment\n          hljs.COMMENT(\n            \"^//\",\n            \"$\",\n            {\n              relevance: 0\n            }\n          ),\n          // title\n          {\n            className: \"title\",\n            begin: \"^\\\\.\\\\w.*$\"\n          },\n          // example, admonition & sidebar blocks\n          {\n            begin: \"^[=\\\\*]{4,}\\\\n\",\n            end: \"\\\\n^[=\\\\*]{4,}$\",\n            relevance: 10\n          },\n          // headings\n          {\n            className: \"section\",\n            relevance: 10,\n            variants: [\n              {\n                begin: \"^(={1,6})[ \t].+?([ \t]\\\\1)?$\"\n              },\n              {\n                begin: \"^[^\\\\[\\\\]\\\\n]+?\\\\n[=\\\\-~\\\\^\\\\+]{2,}$\"\n              }\n            ]\n          },\n          // document attributes\n          {\n            className: \"meta\",\n            begin: \"^:.+?:\",\n            end: \"\\\\s\",\n            excludeEnd: true,\n            relevance: 10\n          },\n          // block attributes\n          {\n            className: \"meta\",\n            begin: \"^\\\\[.+?\\\\]$\",\n            relevance: 0\n          },\n          // quoteblocks\n          {\n            className: \"quote\",\n            begin: \"^_{4,}\\\\n\",\n            end: \"\\\\n_{4,}$\",\n            relevance: 10\n          },\n          // listing and literal blocks\n          {\n            className: \"code\",\n            begin: \"^[\\\\-\\\\.]{4,}\\\\n\",\n            end: \"\\\\n[\\\\-\\\\.]{4,}$\",\n            relevance: 10\n          },\n          // passthrough blocks\n          {\n            begin: \"^\\\\+{4,}\\\\n\",\n            end: \"\\\\n\\\\+{4,}$\",\n            contains: [{\n              begin: \"<\",\n              end: \">\",\n              subLanguage: \"xml\",\n              relevance: 0\n            }],\n            relevance: 10\n          },\n          BULLET_LIST,\n          ADMONITION,\n          ...ESCAPED_FORMATTING,\n          ...STRONG,\n          ...EMPHASIS,\n          // inline smart quotes\n          {\n            className: \"string\",\n            variants: [\n              {\n                begin: \"``.+?''\"\n              },\n              {\n                begin: \"`.+?'\"\n              }\n            ]\n          },\n          // inline unconstrained emphasis\n          {\n            className: \"code\",\n            begin: /`{2}/,\n            end: /(\\n{2}|`{2})/\n          },\n          // inline code snippets (TODO should get same treatment as strong and emphasis)\n          {\n            className: \"code\",\n            begin: \"(`.+?`|\\\\+.+?\\\\+)\",\n            relevance: 0\n          },\n          // indented literal block\n          {\n            className: \"code\",\n            begin: \"^[ \\\\t]\",\n            end: \"$\",\n            relevance: 0\n          },\n          HORIZONTAL_RULE,\n          // images and links\n          {\n            begin: \"(link:)?(http|https|ftp|file|irc|image:?):\\\\S+?\\\\[[^[]*?\\\\]\",\n            returnBegin: true,\n            contains: [\n              {\n                begin: \"(link|image:?):\",\n                relevance: 0\n              },\n              {\n                className: \"link\",\n                begin: \"\\\\w\",\n                end: \"[^\\\\[]+\",\n                relevance: 0\n              },\n              {\n                className: \"string\",\n                begin: \"\\\\[\",\n                end: \"\\\\]\",\n                excludeBegin: true,\n                excludeEnd: true,\n                relevance: 0\n              }\n            ],\n            relevance: 10\n          }\n        ]\n      };\n    }\n    module.exports = asciidoc;\n  }\n});\n\nexport {\n  require_asciidoc\n};\n//# sourceMappingURL=chunk-NLMZW7EN.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.0001836250303313136
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-NLMZW7EN.js (200) — 2024-07-28T11:41:40.229Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-NLMZW7EN.js"
        }
      ]
    }
  ]
}