{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-QZCOTIFW.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"28b0-NFLoB664MfBuPfSKIg7ZxJz9ai0\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/csharp.js\nvar require_csharp = __commonJS({\n  \"node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/csharp.js\"(exports, module) {\n    function csharp(hljs) {\n      const BUILT_IN_KEYWORDS = [\n        \"bool\",\n        \"byte\",\n        \"char\",\n        \"decimal\",\n        \"delegate\",\n        \"double\",\n        \"dynamic\",\n        \"enum\",\n        \"float\",\n        \"int\",\n        \"long\",\n        \"nint\",\n        \"nuint\",\n        \"object\",\n        \"sbyte\",\n        \"short\",\n        \"string\",\n        \"ulong\",\n        \"uint\",\n        \"ushort\"\n      ];\n      const FUNCTION_MODIFIERS = [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"static\",\n        \"internal\",\n        \"protected\",\n        \"abstract\",\n        \"async\",\n        \"extern\",\n        \"override\",\n        \"unsafe\",\n        \"virtual\",\n        \"new\",\n        \"sealed\",\n        \"partial\"\n      ];\n      const LITERAL_KEYWORDS = [\n        \"default\",\n        \"false\",\n        \"null\",\n        \"true\"\n      ];\n      const NORMAL_KEYWORDS = [\n        \"abstract\",\n        \"as\",\n        \"base\",\n        \"break\",\n        \"case\",\n        \"class\",\n        \"const\",\n        \"continue\",\n        \"do\",\n        \"else\",\n        \"event\",\n        \"explicit\",\n        \"extern\",\n        \"finally\",\n        \"fixed\",\n        \"for\",\n        \"foreach\",\n        \"goto\",\n        \"if\",\n        \"implicit\",\n        \"in\",\n        \"interface\",\n        \"internal\",\n        \"is\",\n        \"lock\",\n        \"namespace\",\n        \"new\",\n        \"operator\",\n        \"out\",\n        \"override\",\n        \"params\",\n        \"private\",\n        \"protected\",\n        \"public\",\n        \"readonly\",\n        \"record\",\n        \"ref\",\n        \"return\",\n        \"sealed\",\n        \"sizeof\",\n        \"stackalloc\",\n        \"static\",\n        \"struct\",\n        \"switch\",\n        \"this\",\n        \"throw\",\n        \"try\",\n        \"typeof\",\n        \"unchecked\",\n        \"unsafe\",\n        \"using\",\n        \"virtual\",\n        \"void\",\n        \"volatile\",\n        \"while\"\n      ];\n      const CONTEXTUAL_KEYWORDS = [\n        \"add\",\n        \"alias\",\n        \"and\",\n        \"ascending\",\n        \"async\",\n        \"await\",\n        \"by\",\n        \"descending\",\n        \"equals\",\n        \"from\",\n        \"get\",\n        \"global\",\n        \"group\",\n        \"init\",\n        \"into\",\n        \"join\",\n        \"let\",\n        \"nameof\",\n        \"not\",\n        \"notnull\",\n        \"on\",\n        \"or\",\n        \"orderby\",\n        \"partial\",\n        \"remove\",\n        \"select\",\n        \"set\",\n        \"unmanaged\",\n        \"value|0\",\n        \"var\",\n        \"when\",\n        \"where\",\n        \"with\",\n        \"yield\"\n      ];\n      const KEYWORDS = {\n        keyword: NORMAL_KEYWORDS.concat(CONTEXTUAL_KEYWORDS),\n        built_in: BUILT_IN_KEYWORDS,\n        literal: LITERAL_KEYWORDS\n      };\n      const TITLE_MODE = hljs.inherit(hljs.TITLE_MODE, {\n        begin: \"[a-zA-Z](\\\\.?\\\\w)*\"\n      });\n      const NUMBERS = {\n        className: \"number\",\n        variants: [\n          {\n            begin: \"\\\\b(0b[01']+)\"\n          },\n          {\n            begin: \"(-?)\\\\b([\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)(u|U|l|L|ul|UL|f|F|b|B)\"\n          },\n          {\n            begin: \"(-?)(\\\\b0[xX][a-fA-F0-9']+|(\\\\b[\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)([eE][-+]?[\\\\d']+)?)\"\n          }\n        ],\n        relevance: 0\n      };\n      const VERBATIM_STRING = {\n        className: \"string\",\n        begin: '@\"',\n        end: '\"',\n        contains: [\n          {\n            begin: '\"\"'\n          }\n        ]\n      };\n      const VERBATIM_STRING_NO_LF = hljs.inherit(VERBATIM_STRING, {\n        illegal: /\\n/\n      });\n      const SUBST = {\n        className: \"subst\",\n        begin: /\\{/,\n        end: /\\}/,\n        keywords: KEYWORDS\n      };\n      const SUBST_NO_LF = hljs.inherit(SUBST, {\n        illegal: /\\n/\n      });\n      const INTERPOLATED_STRING = {\n        className: \"string\",\n        begin: /\\$\"/,\n        end: '\"',\n        illegal: /\\n/,\n        contains: [\n          {\n            begin: /\\{\\{/\n          },\n          {\n            begin: /\\}\\}/\n          },\n          hljs.BACKSLASH_ESCAPE,\n          SUBST_NO_LF\n        ]\n      };\n      const INTERPOLATED_VERBATIM_STRING = {\n        className: \"string\",\n        begin: /\\$@\"/,\n        end: '\"',\n        contains: [\n          {\n            begin: /\\{\\{/\n          },\n          {\n            begin: /\\}\\}/\n          },\n          {\n            begin: '\"\"'\n          },\n          SUBST\n        ]\n      };\n      const INTERPOLATED_VERBATIM_STRING_NO_LF = hljs.inherit(INTERPOLATED_VERBATIM_STRING, {\n        illegal: /\\n/,\n        contains: [\n          {\n            begin: /\\{\\{/\n          },\n          {\n            begin: /\\}\\}/\n          },\n          {\n            begin: '\"\"'\n          },\n          SUBST_NO_LF\n        ]\n      });\n      SUBST.contains = [\n        INTERPOLATED_VERBATIM_STRING,\n        INTERPOLATED_STRING,\n        VERBATIM_STRING,\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE,\n        NUMBERS,\n        hljs.C_BLOCK_COMMENT_MODE\n      ];\n      SUBST_NO_LF.contains = [\n        INTERPOLATED_VERBATIM_STRING_NO_LF,\n        INTERPOLATED_STRING,\n        VERBATIM_STRING_NO_LF,\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE,\n        NUMBERS,\n        hljs.inherit(hljs.C_BLOCK_COMMENT_MODE, {\n          illegal: /\\n/\n        })\n      ];\n      const STRING = {\n        variants: [\n          INTERPOLATED_VERBATIM_STRING,\n          INTERPOLATED_STRING,\n          VERBATIM_STRING,\n          hljs.APOS_STRING_MODE,\n          hljs.QUOTE_STRING_MODE\n        ]\n      };\n      const GENERIC_MODIFIER = {\n        begin: \"<\",\n        end: \">\",\n        contains: [\n          {\n            beginKeywords: \"in out\"\n          },\n          TITLE_MODE\n        ]\n      };\n      const TYPE_IDENT_RE = hljs.IDENT_RE + \"(<\" + hljs.IDENT_RE + \"(\\\\s*,\\\\s*\" + hljs.IDENT_RE + \")*>)?(\\\\[\\\\])?\";\n      const AT_IDENTIFIER = {\n        // prevents expressions like `@class` from incorrect flagging\n        // `class` as a keyword\n        begin: \"@\" + hljs.IDENT_RE,\n        relevance: 0\n      };\n      return {\n        name: \"C#\",\n        aliases: [\n          \"cs\",\n          \"c#\"\n        ],\n        keywords: KEYWORDS,\n        illegal: /::/,\n        contains: [\n          hljs.COMMENT(\n            \"///\",\n            \"$\",\n            {\n              returnBegin: true,\n              contains: [\n                {\n                  className: \"doctag\",\n                  variants: [\n                    {\n                      begin: \"///\",\n                      relevance: 0\n                    },\n                    {\n                      begin: \"<!--|-->\"\n                    },\n                    {\n                      begin: \"</?\",\n                      end: \">\"\n                    }\n                  ]\n                }\n              ]\n            }\n          ),\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          {\n            className: \"meta\",\n            begin: \"#\",\n            end: \"$\",\n            keywords: {\n              \"meta-keyword\": \"if else elif endif define undef warning error line region endregion pragma checksum\"\n            }\n          },\n          STRING,\n          NUMBERS,\n          {\n            beginKeywords: \"class interface\",\n            relevance: 0,\n            end: /[{;=]/,\n            illegal: /[^\\s:,]/,\n            contains: [\n              {\n                beginKeywords: \"where class\"\n              },\n              TITLE_MODE,\n              GENERIC_MODIFIER,\n              hljs.C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE\n            ]\n          },\n          {\n            beginKeywords: \"namespace\",\n            relevance: 0,\n            end: /[{;=]/,\n            illegal: /[^\\s:]/,\n            contains: [\n              TITLE_MODE,\n              hljs.C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE\n            ]\n          },\n          {\n            beginKeywords: \"record\",\n            relevance: 0,\n            end: /[{;=]/,\n            illegal: /[^\\s:]/,\n            contains: [\n              TITLE_MODE,\n              GENERIC_MODIFIER,\n              hljs.C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE\n            ]\n          },\n          {\n            // [Attributes(\"\")]\n            className: \"meta\",\n            begin: \"^\\\\s*\\\\[\",\n            excludeBegin: true,\n            end: \"\\\\]\",\n            excludeEnd: true,\n            contains: [\n              {\n                className: \"meta-string\",\n                begin: /\"/,\n                end: /\"/\n              }\n            ]\n          },\n          {\n            // Expression keywords prevent 'keyword Name(...)' from being\n            // recognized as a function definition\n            beginKeywords: \"new return throw await else\",\n            relevance: 0\n          },\n          {\n            className: \"function\",\n            begin: \"(\" + TYPE_IDENT_RE + \"\\\\s+)+\" + hljs.IDENT_RE + \"\\\\s*(<.+>\\\\s*)?\\\\(\",\n            returnBegin: true,\n            end: /\\s*[{;=]/,\n            excludeEnd: true,\n            keywords: KEYWORDS,\n            contains: [\n              // prevents these from being highlighted `title`\n              {\n                beginKeywords: FUNCTION_MODIFIERS.join(\" \"),\n                relevance: 0\n              },\n              {\n                begin: hljs.IDENT_RE + \"\\\\s*(<.+>\\\\s*)?\\\\(\",\n                returnBegin: true,\n                contains: [\n                  hljs.TITLE_MODE,\n                  GENERIC_MODIFIER\n                ],\n                relevance: 0\n              },\n              {\n                className: \"params\",\n                begin: /\\(/,\n                end: /\\)/,\n                excludeBegin: true,\n                excludeEnd: true,\n                keywords: KEYWORDS,\n                relevance: 0,\n          ... (416 more characters)"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00017366698011755943
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-QZCOTIFW.js (200) — 2024-07-28T11:41:39.998Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-QZCOTIFW.js"
        }
      ]
    }
  ]
}