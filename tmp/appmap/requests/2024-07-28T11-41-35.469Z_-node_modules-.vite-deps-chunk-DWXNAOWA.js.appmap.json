{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-DWXNAOWA.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"2787-y2bi29JW/CAyoXnKD7mYgMBaBUI\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/python.js\nvar require_python = __commonJS({\n  \"node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/python.js\"(exports, module) {\n    function source(re) {\n      if (!re) return null;\n      if (typeof re === \"string\") return re;\n      return re.source;\n    }\n    function lookahead(re) {\n      return concat(\"(?=\", re, \")\");\n    }\n    function concat(...args) {\n      const joined = args.map((x) => source(x)).join(\"\");\n      return joined;\n    }\n    function python(hljs) {\n      const RESERVED_WORDS = [\n        \"and\",\n        \"as\",\n        \"assert\",\n        \"async\",\n        \"await\",\n        \"break\",\n        \"class\",\n        \"continue\",\n        \"def\",\n        \"del\",\n        \"elif\",\n        \"else\",\n        \"except\",\n        \"finally\",\n        \"for\",\n        \"from\",\n        \"global\",\n        \"if\",\n        \"import\",\n        \"in\",\n        \"is\",\n        \"lambda\",\n        \"nonlocal|10\",\n        \"not\",\n        \"or\",\n        \"pass\",\n        \"raise\",\n        \"return\",\n        \"try\",\n        \"while\",\n        \"with\",\n        \"yield\"\n      ];\n      const BUILT_INS = [\n        \"__import__\",\n        \"abs\",\n        \"all\",\n        \"any\",\n        \"ascii\",\n        \"bin\",\n        \"bool\",\n        \"breakpoint\",\n        \"bytearray\",\n        \"bytes\",\n        \"callable\",\n        \"chr\",\n        \"classmethod\",\n        \"compile\",\n        \"complex\",\n        \"delattr\",\n        \"dict\",\n        \"dir\",\n        \"divmod\",\n        \"enumerate\",\n        \"eval\",\n        \"exec\",\n        \"filter\",\n        \"float\",\n        \"format\",\n        \"frozenset\",\n        \"getattr\",\n        \"globals\",\n        \"hasattr\",\n        \"hash\",\n        \"help\",\n        \"hex\",\n        \"id\",\n        \"input\",\n        \"int\",\n        \"isinstance\",\n        \"issubclass\",\n        \"iter\",\n        \"len\",\n        \"list\",\n        \"locals\",\n        \"map\",\n        \"max\",\n        \"memoryview\",\n        \"min\",\n        \"next\",\n        \"object\",\n        \"oct\",\n        \"open\",\n        \"ord\",\n        \"pow\",\n        \"print\",\n        \"property\",\n        \"range\",\n        \"repr\",\n        \"reversed\",\n        \"round\",\n        \"set\",\n        \"setattr\",\n        \"slice\",\n        \"sorted\",\n        \"staticmethod\",\n        \"str\",\n        \"sum\",\n        \"super\",\n        \"tuple\",\n        \"type\",\n        \"vars\",\n        \"zip\"\n      ];\n      const LITERALS = [\n        \"__debug__\",\n        \"Ellipsis\",\n        \"False\",\n        \"None\",\n        \"NotImplemented\",\n        \"True\"\n      ];\n      const TYPES = [\n        \"Any\",\n        \"Callable\",\n        \"Coroutine\",\n        \"Dict\",\n        \"List\",\n        \"Literal\",\n        \"Generic\",\n        \"Optional\",\n        \"Sequence\",\n        \"Set\",\n        \"Tuple\",\n        \"Type\",\n        \"Union\"\n      ];\n      const KEYWORDS = {\n        $pattern: /[A-Za-z]\\w+|__\\w+__/,\n        keyword: RESERVED_WORDS,\n        built_in: BUILT_INS,\n        literal: LITERALS,\n        type: TYPES\n      };\n      const PROMPT = {\n        className: \"meta\",\n        begin: /^(>>>|\\.\\.\\.) /\n      };\n      const SUBST = {\n        className: \"subst\",\n        begin: /\\{/,\n        end: /\\}/,\n        keywords: KEYWORDS,\n        illegal: /#/\n      };\n      const LITERAL_BRACKET = {\n        begin: /\\{\\{/,\n        relevance: 0\n      };\n      const STRING = {\n        className: \"string\",\n        contains: [hljs.BACKSLASH_ESCAPE],\n        variants: [\n          {\n            begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,\n            end: /'''/,\n            contains: [\n              hljs.BACKSLASH_ESCAPE,\n              PROMPT\n            ],\n            relevance: 10\n          },\n          {\n            begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/,\n            end: /\"\"\"/,\n            contains: [\n              hljs.BACKSLASH_ESCAPE,\n              PROMPT\n            ],\n            relevance: 10\n          },\n          {\n            begin: /([fF][rR]|[rR][fF]|[fF])'''/,\n            end: /'''/,\n            contains: [\n              hljs.BACKSLASH_ESCAPE,\n              PROMPT,\n              LITERAL_BRACKET,\n              SUBST\n            ]\n          },\n          {\n            begin: /([fF][rR]|[rR][fF]|[fF])\"\"\"/,\n            end: /\"\"\"/,\n            contains: [\n              hljs.BACKSLASH_ESCAPE,\n              PROMPT,\n              LITERAL_BRACKET,\n              SUBST\n            ]\n          },\n          {\n            begin: /([uU]|[rR])'/,\n            end: /'/,\n            relevance: 10\n          },\n          {\n            begin: /([uU]|[rR])\"/,\n            end: /\"/,\n            relevance: 10\n          },\n          {\n            begin: /([bB]|[bB][rR]|[rR][bB])'/,\n            end: /'/\n          },\n          {\n            begin: /([bB]|[bB][rR]|[rR][bB])\"/,\n            end: /\"/\n          },\n          {\n            begin: /([fF][rR]|[rR][fF]|[fF])'/,\n            end: /'/,\n            contains: [\n              hljs.BACKSLASH_ESCAPE,\n              LITERAL_BRACKET,\n              SUBST\n            ]\n          },\n          {\n            begin: /([fF][rR]|[rR][fF]|[fF])\"/,\n            end: /\"/,\n            contains: [\n              hljs.BACKSLASH_ESCAPE,\n              LITERAL_BRACKET,\n              SUBST\n            ]\n          },\n          hljs.APOS_STRING_MODE,\n          hljs.QUOTE_STRING_MODE\n        ]\n      };\n      const digitpart = \"[0-9](_?[0-9])*\";\n      const pointfloat = `(\\\\b(${digitpart}))?\\\\.(${digitpart})|\\\\b(${digitpart})\\\\.`;\n      const NUMBER = {\n        className: \"number\",\n        relevance: 0,\n        variants: [\n          // exponentfloat, pointfloat\n          // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals\n          // optionally imaginary\n          // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n          // Note: no leading \\b because floats can start with a decimal point\n          // and we don't want to mishandle e.g. `fn(.5)`,\n          // no trailing \\b for pointfloat because it can end with a decimal point\n          // and we don't want to mishandle e.g. `0..hex()`; this should be safe\n          // because both MUST contain a decimal point and so cannot be confused with\n          // the interior part of an identifier\n          {\n            begin: `(\\\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?\\\\b`\n          },\n          {\n            begin: `(${pointfloat})[jJ]?`\n          },\n          // decinteger, bininteger, octinteger, hexinteger\n          // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals\n          // optionally \"long\" in Python 2\n          // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals\n          // decinteger is optionally imaginary\n          // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n          {\n            begin: \"\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?\\\\b\"\n          },\n          {\n            begin: \"\\\\b0[bB](_?[01])+[lL]?\\\\b\"\n          },\n          {\n            begin: \"\\\\b0[oO](_?[0-7])+[lL]?\\\\b\"\n          },\n          {\n            begin: \"\\\\b0[xX](_?[0-9a-fA-F])+[lL]?\\\\b\"\n          },\n          // imagnumber (digitpart-based)\n          // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n          {\n            begin: `\\\\b(${digitpart})[jJ]\\\\b`\n          }\n        ]\n      };\n      const COMMENT_TYPE = {\n        className: \"comment\",\n        begin: lookahead(/# type:/),\n        end: /$/,\n        keywords: KEYWORDS,\n        contains: [\n          {\n            // prevent keywords from coloring `type`\n            begin: /# type:/\n          },\n          // comment within a datatype comment includes no keywords\n          {\n            begin: /#/,\n            end: /\\b\\B/,\n            endsWithParent: true\n          }\n        ]\n      };\n      const PARAMS = {\n        className: \"params\",\n        variants: [\n          // Exclude params in functions without params\n          {\n            className: \"\",\n            begin: /\\(\\s*\\)/,\n            skip: true\n          },\n          {\n            begin: /\\(/,\n            end: /\\)/,\n            excludeBegin: true,\n            excludeEnd: true,\n            keywords: KEYWORDS,\n            contains: [\n              \"self\",\n              PROMPT,\n              NUMBER,\n              STRING,\n              hljs.HASH_COMMENT_MODE\n            ]\n          }\n        ]\n      };\n      SUBST.contains = [\n        STRING,\n        NUMBER,\n        PROMPT\n      ];\n      return {\n        name: \"Python\",\n        aliases: [\n          \"py\",\n          \"gyp\",\n          \"ipython\"\n        ],\n        keywords: KEYWORDS,\n        illegal: /(<\\/|->|\\?)|=>/,\n        contains: [\n          PROMPT,\n          NUMBER,\n          {\n            // very common convention\n            begin: /\\bself\\b/\n          },\n          {\n            // eat \"if\" prior to string so that it won't accidentally be\n            // labeled as an f-string\n            beginKeywords: \"if\",\n            relevance: 0\n          },\n          STRING,\n          COMMENT_TYPE,\n          hljs.HASH_COMMENT_MODE,\n          {\n            variants: [\n              {\n                className: \"function\",\n                beginKeywords: \"def\"\n              },\n              {\n                className: \"class\",\n                beginKeywords: \"class\"\n              }\n            ],\n            end: /:/,\n            illegal: /[${=;\\n,]/,\n            contains: [\n              hljs.UNDERSCORE_TITLE_MODE,\n              PARAMS,\n              {\n                begin: /->/,\n                endsWithParent: true,\n                keywords: KEYWORDS\n              }\n            ]\n          },\n          {\n            className: \"meta\",\n            begin: /^[\\t ]*@/,\n            end: /(?=#)|$/,\n            contains: [\n              NUMBER,\n              PARAMS,\n              STRING\n            ]\n          }\n        ]\n      ... (119 more characters)"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00019350007642060518
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-DWXNAOWA.js (200) — 2024-07-28T11:41:35.469Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-DWXNAOWA.js"
        }
      ]
    }
  ]
}