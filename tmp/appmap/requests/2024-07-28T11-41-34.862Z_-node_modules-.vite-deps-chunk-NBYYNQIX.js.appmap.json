{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-NBYYNQIX.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"15a1-GYq0SVZzgb4a7bsz9RfSH+o6AIY\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  require_c\n} from \"/node_modules/.vite/deps/chunk-LQXD5DEX.js?v=b39bb78e\";\nimport {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/cpp.js\nvar require_cpp = __commonJS({\n  \"node_modules/refractor/lang/cpp.js\"(exports, module) {\n    var refractorC = require_c();\n    module.exports = cpp;\n    cpp.displayName = \"cpp\";\n    cpp.aliases = [];\n    function cpp(Prism) {\n      Prism.register(refractorC);\n      (function(Prism2) {\n        var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n        var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(\n          /<keyword>/g,\n          function() {\n            return keyword.source;\n          }\n        );\n        Prism2.languages.cpp = Prism2.languages.extend(\"c\", {\n          \"class-name\": [\n            {\n              pattern: RegExp(\n                /(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(\n                  /<keyword>/g,\n                  function() {\n                    return keyword.source;\n                  }\n                )\n              ),\n              lookbehind: true\n            },\n            // This is intended to capture the class name of method implementations like:\n            //   void foo::bar() const {}\n            // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n            // it starts with an uppercase letter. This approximation should give decent results.\n            /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/,\n            // This will capture the class name before destructors like:\n            //   Foo::~Foo() {}\n            /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i,\n            // This also intends to capture the class name of method implementations but here the class has template\n            // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n            /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/\n          ],\n          keyword,\n          number: {\n            pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n            greedy: true\n          },\n          operator: />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n          boolean: /\\b(?:false|true)\\b/\n        });\n        Prism2.languages.insertBefore(\"cpp\", \"string\", {\n          module: {\n            // https://en.cppreference.com/w/cpp/language/modules\n            pattern: RegExp(\n              /(\\b(?:import|module)\\s+)/.source + \"(?:\" + // header-name\n              /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source + \"|\" + // module name or partition or both\n              /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(\n                /<mod-name>/g,\n                function() {\n                  return modName;\n                }\n              ) + \")\"\n            ),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              string: /^[<\"][\\s\\S]+/,\n              operator: /:/,\n              punctuation: /\\./\n            }\n          },\n          \"raw-string\": {\n            pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n            alias: \"string\",\n            greedy: true\n          }\n        });\n        Prism2.languages.insertBefore(\"cpp\", \"keyword\", {\n          \"generic-function\": {\n            pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n            inside: {\n              function: /^\\w+/,\n              generic: {\n                pattern: /<[\\s\\S]+/,\n                alias: \"class-name\",\n                inside: Prism2.languages.cpp\n              }\n            }\n          }\n        });\n        Prism2.languages.insertBefore(\"cpp\", \"operator\", {\n          \"double-colon\": {\n            pattern: /::/,\n            alias: \"punctuation\"\n          }\n        });\n        Prism2.languages.insertBefore(\"cpp\", \"class-name\", {\n          // the base clause is an optional list of parent classes\n          // https://en.cppreference.com/w/cpp/language/class\n          \"base-clause\": {\n            pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n            lookbehind: true,\n            greedy: true,\n            inside: Prism2.languages.extend(\"cpp\", {})\n          }\n        });\n        Prism2.languages.insertBefore(\n          \"inside\",\n          \"double-colon\",\n          {\n            // All untokenized words that are not namespaces should be class names\n            \"class-name\": /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n          },\n          Prism2.languages.cpp[\"base-clause\"]\n        );\n      })(Prism);\n    }\n  }\n});\n\nexport {\n  require_cpp\n};\n//# sourceMappingURL=chunk-NBYYNQIX.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00020358292385935783
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-NBYYNQIX.js (200) â€” 2024-07-28T11:41:34.862Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-NBYYNQIX.js"
        }
      ]
    }
  ]
}