{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-7WTRDBHM.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"1eaa-C3/hZBWCISqu/uIvaVPCKaXjwC8\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/handlebars.js\nvar require_handlebars = __commonJS({\n  \"node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/handlebars.js\"(exports, module) {\n    function source(re) {\n      if (!re) return null;\n      if (typeof re === \"string\") return re;\n      return re.source;\n    }\n    function anyNumberOfTimes(re) {\n      return concat(\"(\", re, \")*\");\n    }\n    function optional(re) {\n      return concat(\"(\", re, \")?\");\n    }\n    function concat(...args) {\n      const joined = args.map((x) => source(x)).join(\"\");\n      return joined;\n    }\n    function either(...args) {\n      const joined = \"(\" + args.map((x) => source(x)).join(\"|\") + \")\";\n      return joined;\n    }\n    function handlebars(hljs) {\n      const BUILT_INS = {\n        \"builtin-name\": [\n          \"action\",\n          \"bindattr\",\n          \"collection\",\n          \"component\",\n          \"concat\",\n          \"debugger\",\n          \"each\",\n          \"each-in\",\n          \"get\",\n          \"hash\",\n          \"if\",\n          \"in\",\n          \"input\",\n          \"link-to\",\n          \"loc\",\n          \"log\",\n          \"lookup\",\n          \"mut\",\n          \"outlet\",\n          \"partial\",\n          \"query-params\",\n          \"render\",\n          \"template\",\n          \"textarea\",\n          \"unbound\",\n          \"unless\",\n          \"view\",\n          \"with\",\n          \"yield\"\n        ]\n      };\n      const LITERALS = {\n        literal: [\n          \"true\",\n          \"false\",\n          \"undefined\",\n          \"null\"\n        ]\n      };\n      const DOUBLE_QUOTED_ID_REGEX = /\"\"|\"[^\"]+\"/;\n      const SINGLE_QUOTED_ID_REGEX = /''|'[^']+'/;\n      const BRACKET_QUOTED_ID_REGEX = /\\[\\]|\\[[^\\]]+\\]/;\n      const PLAIN_ID_REGEX = /[^\\s!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]+/;\n      const PATH_DELIMITER_REGEX = /(\\.|\\/)/;\n      const ANY_ID = either(\n        DOUBLE_QUOTED_ID_REGEX,\n        SINGLE_QUOTED_ID_REGEX,\n        BRACKET_QUOTED_ID_REGEX,\n        PLAIN_ID_REGEX\n      );\n      const IDENTIFIER_REGEX = concat(\n        optional(/\\.|\\.\\/|\\//),\n        // relative or absolute path\n        ANY_ID,\n        anyNumberOfTimes(concat(\n          PATH_DELIMITER_REGEX,\n          ANY_ID\n        ))\n      );\n      const HASH_PARAM_REGEX = concat(\n        \"(\",\n        BRACKET_QUOTED_ID_REGEX,\n        \"|\",\n        PLAIN_ID_REGEX,\n        \")(?==)\"\n      );\n      const HELPER_NAME_OR_PATH_EXPRESSION = {\n        begin: IDENTIFIER_REGEX,\n        lexemes: /[\\w.\\/]+/\n      };\n      const HELPER_PARAMETER = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n        keywords: LITERALS\n      });\n      const SUB_EXPRESSION = {\n        begin: /\\(/,\n        end: /\\)/\n        // the \"contains\" is added below when all necessary sub-modes are defined\n      };\n      const HASH = {\n        // fka \"attribute-assignment\", parameters of the form 'key=value'\n        className: \"attr\",\n        begin: HASH_PARAM_REGEX,\n        relevance: 0,\n        starts: {\n          begin: /=/,\n          end: /=/,\n          starts: {\n            contains: [\n              hljs.NUMBER_MODE,\n              hljs.QUOTE_STRING_MODE,\n              hljs.APOS_STRING_MODE,\n              HELPER_PARAMETER,\n              SUB_EXPRESSION\n            ]\n          }\n        }\n      };\n      const BLOCK_PARAMS = {\n        // parameters of the form '{{#with x as | y |}}...{{/with}}'\n        begin: /as\\s+\\|/,\n        keywords: {\n          keyword: \"as\"\n        },\n        end: /\\|/,\n        contains: [\n          {\n            // define sub-mode in order to prevent highlighting of block-parameter named \"as\"\n            begin: /\\w+/\n          }\n        ]\n      };\n      const HELPER_PARAMETERS = {\n        contains: [\n          hljs.NUMBER_MODE,\n          hljs.QUOTE_STRING_MODE,\n          hljs.APOS_STRING_MODE,\n          BLOCK_PARAMS,\n          HASH,\n          HELPER_PARAMETER,\n          SUB_EXPRESSION\n        ],\n        returnEnd: true\n        // the property \"end\" is defined through inheritance when the mode is used. If depends\n        // on the surrounding mode, but \"endsWithParent\" does not work here (i.e. it includes the\n        // end-token of the surrounding mode)\n      };\n      const SUB_EXPRESSION_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n        className: \"name\",\n        keywords: BUILT_INS,\n        starts: hljs.inherit(HELPER_PARAMETERS, {\n          end: /\\)/\n        })\n      });\n      SUB_EXPRESSION.contains = [SUB_EXPRESSION_CONTENTS];\n      const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n        keywords: BUILT_INS,\n        className: \"name\",\n        starts: hljs.inherit(HELPER_PARAMETERS, {\n          end: /\\}\\}/\n        })\n      });\n      const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n        keywords: BUILT_INS,\n        className: \"name\"\n      });\n      const BASIC_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n        className: \"name\",\n        keywords: BUILT_INS,\n        starts: hljs.inherit(HELPER_PARAMETERS, {\n          end: /\\}\\}/\n        })\n      });\n      const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {\n        begin: /\\\\\\{\\{/,\n        skip: true\n      };\n      const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {\n        begin: /\\\\\\\\(?=\\{\\{)/,\n        skip: true\n      };\n      return {\n        name: \"Handlebars\",\n        aliases: [\n          \"hbs\",\n          \"html.hbs\",\n          \"html.handlebars\",\n          \"htmlbars\"\n        ],\n        case_insensitive: true,\n        subLanguage: \"xml\",\n        contains: [\n          ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH,\n          PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH,\n          hljs.COMMENT(/\\{\\{!--/, /--\\}\\}/),\n          hljs.COMMENT(/\\{\\{!/, /\\}\\}/),\n          {\n            // open raw block \"{{{{raw}}}} content not evaluated {{{{/raw}}}}\"\n            className: \"template-tag\",\n            begin: /\\{\\{\\{\\{(?!\\/)/,\n            end: /\\}\\}\\}\\}/,\n            contains: [OPENING_BLOCK_MUSTACHE_CONTENTS],\n            starts: {\n              end: /\\{\\{\\{\\{\\//,\n              returnEnd: true,\n              subLanguage: \"xml\"\n            }\n          },\n          {\n            // close raw block\n            className: \"template-tag\",\n            begin: /\\{\\{\\{\\{\\//,\n            end: /\\}\\}\\}\\}/,\n            contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n          },\n          {\n            // open block statement\n            className: \"template-tag\",\n            begin: /\\{\\{#/,\n            end: /\\}\\}/,\n            contains: [OPENING_BLOCK_MUSTACHE_CONTENTS]\n          },\n          {\n            className: \"template-tag\",\n            begin: /\\{\\{(?=else\\}\\})/,\n            end: /\\}\\}/,\n            keywords: \"else\"\n          },\n          {\n            className: \"template-tag\",\n            begin: /\\{\\{(?=else if)/,\n            end: /\\}\\}/,\n            keywords: \"else if\"\n          },\n          {\n            // closing block statement\n            className: \"template-tag\",\n            begin: /\\{\\{\\//,\n            end: /\\}\\}/,\n            contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n          },\n          {\n            // template variable or helper-call that is NOT html-escaped\n            className: \"template-variable\",\n            begin: /\\{\\{\\{/,\n            end: /\\}\\}\\}/,\n            contains: [BASIC_MUSTACHE_CONTENTS]\n          },\n          {\n            // template variable or helper-call that is html-escaped\n            className: \"template-variable\",\n            begin: /\\{\\{/,\n            end: /\\}\\}/,\n            contains: [BASIC_MUSTACHE_CONTENTS]\n          }\n        ]\n      };\n    }\n    module.exports = handlebars;\n  }\n});\n\nexport {\n  require_handlebars\n};\n//# sourceMappingURL=chunk-7WTRDBHM.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00042591604869812727
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-7WTRDBHM.js (200) — 2024-07-28T11:41:39.692Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-7WTRDBHM.js"
        }
      ]
    }
  ]
}