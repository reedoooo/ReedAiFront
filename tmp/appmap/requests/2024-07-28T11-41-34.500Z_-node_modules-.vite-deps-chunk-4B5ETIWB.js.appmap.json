{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-4B5ETIWB.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"15fe-KCTGLNTflBcfxvhlFNNXoMT62/Q\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/perl.js\nvar require_perl = __commonJS({\n  \"node_modules/refractor/lang/perl.js\"(exports, module) {\n    module.exports = perl;\n    perl.displayName = \"perl\";\n    perl.aliases = [];\n    function perl(Prism) {\n      ;\n      (function(Prism2) {\n        var brackets = /(?:\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}|\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)/.source;\n        Prism2.languages.perl = {\n          comment: [\n            {\n              // POD\n              pattern: /(^\\s*)=\\w[\\s\\S]*?=cut.*/m,\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              pattern: /(^|[^\\\\$])#.*/,\n              lookbehind: true,\n              greedy: true\n            }\n          ],\n          // TODO Could be nice to handle Heredoc too.\n          string: [\n            {\n              pattern: RegExp(\n                /\\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\\s*/.source + \"(?:\" + [\n                  // q/.../\n                  /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n                  // q a...a\n                  // eslint-disable-next-line regexp/strict\n                  /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,\n                  // q(...)\n                  // q{...}\n                  // q[...]\n                  // q<...>\n                  brackets\n                ].join(\"|\") + \")\"\n              ),\n              greedy: true\n            },\n            // \"...\", `...`\n            {\n              pattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n              greedy: true\n            },\n            // '...'\n            // FIXME Multi-line single-quoted strings are not supported as they would break variables containing '\n            {\n              pattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n              greedy: true\n            }\n          ],\n          regex: [\n            {\n              pattern: RegExp(\n                /\\b(?:m|qr)(?![a-zA-Z0-9])\\s*/.source + \"(?:\" + [\n                  // m/.../\n                  /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n                  // m a...a\n                  // eslint-disable-next-line regexp/strict\n                  /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,\n                  // m(...)\n                  // m{...}\n                  // m[...]\n                  // m<...>\n                  brackets\n                ].join(\"|\") + \")\" + /[msixpodualngc]*/.source\n              ),\n              greedy: true\n            },\n            // The lookbehinds prevent -s from breaking\n            {\n              pattern: RegExp(\n                /(^|[^-])\\b(?:s|tr|y)(?![a-zA-Z0-9])\\s*/.source + \"(?:\" + [\n                  // s/.../.../\n                  // eslint-disable-next-line regexp/strict\n                  /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,\n                  // s a...a...a\n                  // eslint-disable-next-line regexp/strict\n                  /([a-zA-Z0-9])(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3/.source,\n                  // s(...)(...)\n                  // s{...}{...}\n                  // s[...][...]\n                  // s<...><...>\n                  // s(...)[...]\n                  brackets + /\\s*/.source + brackets\n                ].join(\"|\") + \")\" + /[msixpodualngcer]*/.source\n              ),\n              lookbehind: true,\n              greedy: true\n            },\n            // /.../\n            // The look-ahead tries to prevent two divisions on\n            // the same line from being highlighted as regex.\n            // This does not support multi-line regex.\n            {\n              pattern: /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\\b))/,\n              greedy: true\n            }\n          ],\n          // FIXME Not sure about the handling of ::, ', and #\n          variable: [\n            // ${^POSTMATCH}\n            /[&*$@%]\\{\\^[A-Z]+\\}/,\n            // $^V\n            /[&*$@%]\\^[A-Z_]/,\n            // ${...}\n            /[&*$@%]#?(?=\\{)/,\n            // $foo\n            /[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+(?![\\w$]))+(?:::)*/,\n            // $1\n            /[&*$@%]\\d+/,\n            // $_, @_, %!\n            // The negative lookahead prevents from breaking the %= operator\n            /(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/\n          ],\n          filehandle: {\n            // <>, <FOO>, _\n            pattern: /<(?![<=])\\S*?>|\\b_\\b/,\n            alias: \"symbol\"\n          },\n          \"v-string\": {\n            // v1.2, 1.2.3\n            pattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,\n            alias: \"string\"\n          },\n          function: {\n            pattern: /(\\bsub[ \\t]+)\\w+/,\n            lookbehind: true\n          },\n          keyword: /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,\n          number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\n          operator: /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\\b/,\n          punctuation: /[{}[\\];(),:]/\n        };\n      })(Prism);\n    }\n  }\n});\n\nexport {\n  require_perl\n};\n//# sourceMappingURL=chunk-4B5ETIWB.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00019804202020168304
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-4B5ETIWB.js (200) â€” 2024-07-28T11:41:34.500Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-4B5ETIWB.js"
        }
      ]
    }
  ]
}