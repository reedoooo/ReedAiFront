{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-DX5YETDI.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"13ef-KXr1aF3YUwohswUgJQl7AASt4hw\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/naniscript.js\nvar require_naniscript = __commonJS({\n  \"node_modules/refractor/lang/naniscript.js\"(exports, module) {\n    module.exports = naniscript;\n    naniscript.displayName = \"naniscript\";\n    naniscript.aliases = [];\n    function naniscript(Prism) {\n      ;\n      (function(Prism2) {\n        var expressionDef = /\\{[^\\r\\n\\[\\]{}]*\\}/;\n        var params = {\n          \"quoted-string\": {\n            pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n            alias: \"operator\"\n          },\n          \"command-param-id\": {\n            pattern: /(\\s)\\w+:/,\n            lookbehind: true,\n            alias: \"property\"\n          },\n          \"command-param-value\": [\n            {\n              pattern: expressionDef,\n              alias: \"selector\"\n            },\n            {\n              pattern: /([\\t ])\\S+/,\n              lookbehind: true,\n              greedy: true,\n              alias: \"operator\"\n            },\n            {\n              pattern: /\\S(?:.*\\S)?/,\n              alias: \"operator\"\n            }\n          ]\n        };\n        Prism2.languages.naniscript = {\n          // ; ...\n          comment: {\n            pattern: /^([\\t ]*);.*/m,\n            lookbehind: true\n          },\n          // > ...\n          // Define is a control line starting with '>' followed by a word, a space and a text.\n          define: {\n            pattern: /^>.+/m,\n            alias: \"tag\",\n            inside: {\n              value: {\n                pattern: /(^>\\w+[\\t ]+)(?!\\s)[^{}\\r\\n]+/,\n                lookbehind: true,\n                alias: \"operator\"\n              },\n              key: {\n                pattern: /(^>)\\w+/,\n                lookbehind: true\n              }\n            }\n          },\n          // # ...\n          label: {\n            pattern: /^([\\t ]*)#[\\t ]*\\w+[\\t ]*$/m,\n            lookbehind: true,\n            alias: \"regex\"\n          },\n          command: {\n            pattern: /^([\\t ]*)@\\w+(?=[\\t ]|$).*/m,\n            lookbehind: true,\n            alias: \"function\",\n            inside: {\n              \"command-name\": /^@\\w+/,\n              expression: {\n                pattern: expressionDef,\n                greedy: true,\n                alias: \"selector\"\n              },\n              \"command-params\": {\n                pattern: /\\s*\\S[\\s\\S]*/,\n                inside: params\n              }\n            }\n          },\n          // Generic is any line that doesn't start with operators: ;>#@\n          \"generic-text\": {\n            pattern: /(^[ \\t]*)[^#@>;\\s].*/m,\n            lookbehind: true,\n            alias: \"punctuation\",\n            inside: {\n              // \\{ ... \\} ... \\[ ... \\] ... \\\"\n              \"escaped-char\": /\\\\[{}\\[\\]\"]/,\n              expression: {\n                pattern: expressionDef,\n                greedy: true,\n                alias: \"selector\"\n              },\n              \"inline-command\": {\n                pattern: /\\[[\\t ]*\\w[^\\r\\n\\[\\]]*\\]/,\n                greedy: true,\n                alias: \"function\",\n                inside: {\n                  \"command-params\": {\n                    pattern: /(^\\[[\\t ]*\\w+\\b)[\\s\\S]+(?=\\]$)/,\n                    lookbehind: true,\n                    inside: params\n                  },\n                  \"command-param-name\": {\n                    pattern: /^(\\[[\\t ]*)\\w+/,\n                    lookbehind: true,\n                    alias: \"name\"\n                  },\n                  \"start-stop-char\": /[\\[\\]]/\n                }\n              }\n            }\n          }\n        };\n        Prism2.languages.nani = Prism2.languages[\"naniscript\"];\n        Prism2.hooks.add(\"after-tokenize\", function(env) {\n          var tokens = env.tokens;\n          tokens.forEach(function(token) {\n            if (typeof token !== \"string\" && token.type === \"generic-text\") {\n              var content = getTextContent(token);\n              if (!isBracketsBalanced(content)) {\n                token.type = \"bad-line\";\n                token.content = content;\n              }\n            }\n          });\n        });\n        function isBracketsBalanced(input) {\n          var brackets = \"[]{}\";\n          var stack = [];\n          for (var i = 0; i < input.length; i++) {\n            var bracket = input[i];\n            var bracketsIndex = brackets.indexOf(bracket);\n            if (bracketsIndex !== -1) {\n              if (bracketsIndex % 2 === 0) {\n                stack.push(bracketsIndex + 1);\n              } else if (stack.pop() !== bracketsIndex) {\n                return false;\n              }\n            }\n          }\n          return stack.length === 0;\n        }\n        function getTextContent(token) {\n          if (typeof token === \"string\") {\n            return token;\n          } else if (Array.isArray(token)) {\n            return token.map(getTextContent).join(\"\");\n          } else {\n            return getTextContent(token.content);\n          }\n        }\n      })(Prism);\n    }\n  }\n});\n\nexport {\n  require_naniscript\n};\n//# sourceMappingURL=chunk-DX5YETDI.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00015245797112584114
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-DX5YETDI.js (200) â€” 2024-07-28T11:41:34.552Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-DX5YETDI.js"
        }
      ]
    }
  ]
}