{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-E4LEP6HU.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"1ee2-LIofh6+WI3U9mMMxv+b2QGHuYbM\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/coffeescript.js\nvar require_coffeescript = __commonJS({\n  \"node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/coffeescript.js\"(exports, module) {\n    var KEYWORDS = [\n      \"as\",\n      // for exports\n      \"in\",\n      \"of\",\n      \"if\",\n      \"for\",\n      \"while\",\n      \"finally\",\n      \"var\",\n      \"new\",\n      \"function\",\n      \"do\",\n      \"return\",\n      \"void\",\n      \"else\",\n      \"break\",\n      \"catch\",\n      \"instanceof\",\n      \"with\",\n      \"throw\",\n      \"case\",\n      \"default\",\n      \"try\",\n      \"switch\",\n      \"continue\",\n      \"typeof\",\n      \"delete\",\n      \"let\",\n      \"yield\",\n      \"const\",\n      \"class\",\n      // JS handles these with a special rule\n      // \"get\",\n      // \"set\",\n      \"debugger\",\n      \"async\",\n      \"await\",\n      \"static\",\n      \"import\",\n      \"from\",\n      \"export\",\n      \"extends\"\n    ];\n    var LITERALS = [\n      \"true\",\n      \"false\",\n      \"null\",\n      \"undefined\",\n      \"NaN\",\n      \"Infinity\"\n    ];\n    var TYPES = [\n      \"Intl\",\n      \"DataView\",\n      \"Number\",\n      \"Math\",\n      \"Date\",\n      \"String\",\n      \"RegExp\",\n      \"Object\",\n      \"Function\",\n      \"Boolean\",\n      \"Error\",\n      \"Symbol\",\n      \"Set\",\n      \"Map\",\n      \"WeakSet\",\n      \"WeakMap\",\n      \"Proxy\",\n      \"Reflect\",\n      \"JSON\",\n      \"Promise\",\n      \"Float64Array\",\n      \"Int16Array\",\n      \"Int32Array\",\n      \"Int8Array\",\n      \"Uint16Array\",\n      \"Uint32Array\",\n      \"Float32Array\",\n      \"Array\",\n      \"Uint8Array\",\n      \"Uint8ClampedArray\",\n      \"ArrayBuffer\",\n      \"BigInt64Array\",\n      \"BigUint64Array\",\n      \"BigInt\"\n    ];\n    var ERROR_TYPES = [\n      \"EvalError\",\n      \"InternalError\",\n      \"RangeError\",\n      \"ReferenceError\",\n      \"SyntaxError\",\n      \"TypeError\",\n      \"URIError\"\n    ];\n    var BUILT_IN_GLOBALS = [\n      \"setInterval\",\n      \"setTimeout\",\n      \"clearInterval\",\n      \"clearTimeout\",\n      \"require\",\n      \"exports\",\n      \"eval\",\n      \"isFinite\",\n      \"isNaN\",\n      \"parseFloat\",\n      \"parseInt\",\n      \"decodeURI\",\n      \"decodeURIComponent\",\n      \"encodeURI\",\n      \"encodeURIComponent\",\n      \"escape\",\n      \"unescape\"\n    ];\n    var BUILT_IN_VARIABLES = [\n      \"arguments\",\n      \"this\",\n      \"super\",\n      \"console\",\n      \"window\",\n      \"document\",\n      \"localStorage\",\n      \"module\",\n      \"global\"\n      // Node.js\n    ];\n    var BUILT_INS = [].concat(\n      BUILT_IN_GLOBALS,\n      BUILT_IN_VARIABLES,\n      TYPES,\n      ERROR_TYPES\n    );\n    function coffeescript(hljs) {\n      const COFFEE_BUILT_INS = [\n        \"npm\",\n        \"print\"\n      ];\n      const COFFEE_LITERALS = [\n        \"yes\",\n        \"no\",\n        \"on\",\n        \"off\"\n      ];\n      const COFFEE_KEYWORDS = [\n        \"then\",\n        \"unless\",\n        \"until\",\n        \"loop\",\n        \"by\",\n        \"when\",\n        \"and\",\n        \"or\",\n        \"is\",\n        \"isnt\",\n        \"not\"\n      ];\n      const NOT_VALID_KEYWORDS = [\n        \"var\",\n        \"const\",\n        \"let\",\n        \"function\",\n        \"static\"\n      ];\n      const excluding = (list) => (kw) => !list.includes(kw);\n      const KEYWORDS$1 = {\n        keyword: KEYWORDS.concat(COFFEE_KEYWORDS).filter(excluding(NOT_VALID_KEYWORDS)),\n        literal: LITERALS.concat(COFFEE_LITERALS),\n        built_in: BUILT_INS.concat(COFFEE_BUILT_INS)\n      };\n      const JS_IDENT_RE = \"[A-Za-z$_][0-9A-Za-z$_]*\";\n      const SUBST = {\n        className: \"subst\",\n        begin: /#\\{/,\n        end: /\\}/,\n        keywords: KEYWORDS$1\n      };\n      const EXPRESSIONS = [\n        hljs.BINARY_NUMBER_MODE,\n        hljs.inherit(hljs.C_NUMBER_MODE, {\n          starts: {\n            end: \"(\\\\s*/)?\",\n            relevance: 0\n          }\n        }),\n        // a number tries to eat the following slash to prevent treating it as a regexp\n        {\n          className: \"string\",\n          variants: [\n            {\n              begin: /'''/,\n              end: /'''/,\n              contains: [hljs.BACKSLASH_ESCAPE]\n            },\n            {\n              begin: /'/,\n              end: /'/,\n              contains: [hljs.BACKSLASH_ESCAPE]\n            },\n            {\n              begin: /\"\"\"/,\n              end: /\"\"\"/,\n              contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n              ]\n            },\n            {\n              begin: /\"/,\n              end: /\"/,\n              contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n              ]\n            }\n          ]\n        },\n        {\n          className: \"regexp\",\n          variants: [\n            {\n              begin: \"///\",\n              end: \"///\",\n              contains: [\n                SUBST,\n                hljs.HASH_COMMENT_MODE\n              ]\n            },\n            {\n              begin: \"//[gim]{0,3}(?=\\\\W)\",\n              relevance: 0\n            },\n            {\n              // regex can't start with space to parse x / 2 / 3 as two divisions\n              // regex can't start with *, and it supports an \"illegal\" in the main mode\n              begin: /\\/(?![ *]).*?(?![\\\\]).\\/[gim]{0,3}(?=\\W)/\n            }\n          ]\n        },\n        {\n          begin: \"@\" + JS_IDENT_RE\n          // relevance booster\n        },\n        {\n          subLanguage: \"javascript\",\n          excludeBegin: true,\n          excludeEnd: true,\n          variants: [\n            {\n              begin: \"```\",\n              end: \"```\"\n            },\n            {\n              begin: \"`\",\n              end: \"`\"\n            }\n          ]\n        }\n      ];\n      SUBST.contains = EXPRESSIONS;\n      const TITLE = hljs.inherit(hljs.TITLE_MODE, {\n        begin: JS_IDENT_RE\n      });\n      const POSSIBLE_PARAMS_RE = \"(\\\\(.*\\\\)\\\\s*)?\\\\B[-=]>\";\n      const PARAMS = {\n        className: \"params\",\n        begin: \"\\\\([^\\\\(]\",\n        returnBegin: true,\n        /* We need another contained nameless mode to not have every nested\n        pair of parens to be called \"params\" */\n        contains: [{\n          begin: /\\(/,\n          end: /\\)/,\n          keywords: KEYWORDS$1,\n          contains: [\"self\"].concat(EXPRESSIONS)\n        }]\n      };\n      return {\n        name: \"CoffeeScript\",\n        aliases: [\n          \"coffee\",\n          \"cson\",\n          \"iced\"\n        ],\n        keywords: KEYWORDS$1,\n        illegal: /\\/\\*/,\n        contains: EXPRESSIONS.concat([\n          hljs.COMMENT(\"###\", \"###\"),\n          hljs.HASH_COMMENT_MODE,\n          {\n            className: \"function\",\n            begin: \"^\\\\s*\" + JS_IDENT_RE + \"\\\\s*=\\\\s*\" + POSSIBLE_PARAMS_RE,\n            end: \"[-=]>\",\n            returnBegin: true,\n            contains: [\n              TITLE,\n              PARAMS\n            ]\n          },\n          {\n            // anonymous function start\n            begin: /[:\\(,=]\\s*/,\n            relevance: 0,\n            contains: [{\n              className: \"function\",\n              begin: POSSIBLE_PARAMS_RE,\n              end: \"[-=]>\",\n              returnBegin: true,\n              contains: [PARAMS]\n            }]\n          },\n          {\n            className: \"class\",\n            beginKeywords: \"class\",\n            end: \"$\",\n            illegal: /[:=\"\\[\\]]/,\n            contains: [\n              {\n                beginKeywords: \"extends\",\n                endsWithParent: true,\n                illegal: /[:=\"\\[\\]]/,\n                contains: [TITLE]\n              },\n              TITLE\n            ]\n          },\n          {\n            begin: JS_IDENT_RE + \":\",\n            end: \":\",\n            returnBegin: true,\n            returnEnd: true,\n            relevance: 0\n          }\n        ])\n      };\n    }\n    module.exports = coffeescript;\n  }\n});\n\nexport {\n  require_coffeescript\n};\n//# sourceMappingURL=chunk-E4LEP6HU.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00018862495198845863
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-E4LEP6HU.js (200) — 2024-07-28T11:41:40.021Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-E4LEP6HU.js"
        }
      ]
    }
  ]
}