{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-252KRFP5.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"f62-5uS3plbK74jWojYXKhaZn4At37k\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/kumir.js\nvar require_kumir = __commonJS({\n  \"node_modules/refractor/lang/kumir.js\"(exports, module) {\n    module.exports = kumir;\n    kumir.displayName = \"kumir\";\n    kumir.aliases = [\"kum\"];\n    function kumir(Prism) {\n      ;\n      (function(Prism2) {\n        var nonId = /\\s\\x00-\\x1f\\x22-\\x2f\\x3a-\\x3f\\x5b-\\x5e\\x60\\x7b-\\x7e/.source;\n        function wrapId(pattern, flags) {\n          return RegExp(pattern.replace(/<nonId>/g, nonId), flags);\n        }\n        Prism2.languages.kumir = {\n          comment: {\n            pattern: /\\|.*/\n          },\n          prolog: {\n            pattern: /#.*/,\n            greedy: true\n          },\n          string: {\n            pattern: /\"[^\\n\\r\"]*\"|'[^\\n\\r']*'/,\n            greedy: true\n          },\n          boolean: {\n            pattern: wrapId(/(^|[<nonId>])(?:да|нет)(?=[<nonId>]|$)/.source),\n            lookbehind: true\n          },\n          \"operator-word\": {\n            pattern: wrapId(/(^|[<nonId>])(?:и|или|не)(?=[<nonId>]|$)/.source),\n            lookbehind: true,\n            alias: \"keyword\"\n          },\n          \"system-variable\": {\n            pattern: wrapId(/(^|[<nonId>])знач(?=[<nonId>]|$)/.source),\n            lookbehind: true,\n            alias: \"keyword\"\n          },\n          type: [\n            {\n              pattern: wrapId(\n                /(^|[<nonId>])(?:вещ|лит|лог|сим|цел)(?:\\x20*таб)?(?=[<nonId>]|$)/.source\n              ),\n              lookbehind: true,\n              alias: \"builtin\"\n            },\n            {\n              pattern: wrapId(\n                /(^|[<nonId>])(?:компл|сканкод|файл|цвет)(?=[<nonId>]|$)/.source\n              ),\n              lookbehind: true,\n              alias: \"important\"\n            }\n          ],\n          /**\n           * Should be performed after searching for type names because of \"таб\".\n           * \"таб\" is a reserved word, but never used without a preceding type name.\n           * \"НАЗНАЧИТЬ\", \"Фввод\", and \"Фвывод\" are not reserved words.\n           */\n          keyword: {\n            pattern: wrapId(\n              /(^|[<nonId>])(?:алг|арг(?:\\x20*рез)?|ввод|ВКЛЮЧИТЬ|вс[её]|выбор|вывод|выход|дано|для|до|дс|если|иначе|исп|использовать|кон(?:(?:\\x20+|_)исп)?|кц(?:(?:\\x20+|_)при)?|надо|нач|нс|нц|от|пауза|пока|при|раза?|рез|стоп|таб|то|утв|шаг)(?=[<nonId>]|$)/.source\n            ),\n            lookbehind: true\n          },\n          /** Should be performed after searching for reserved words. */\n          name: {\n            // eslint-disable-next-line regexp/no-super-linear-backtracking\n            pattern: wrapId(\n              /(^|[<nonId>])[^\\d<nonId>][^<nonId>]*(?:\\x20+[^<nonId>]+)*(?=[<nonId>]|$)/.source\n            ),\n            lookbehind: true\n          },\n          /** Should be performed after searching for names. */\n          number: {\n            pattern: wrapId(\n              /(^|[<nonId>])(?:\\B\\$[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?=[<nonId>]|$)/.source,\n              \"i\"\n            ),\n            lookbehind: true\n          },\n          /** Should be performed after searching for words. */\n          punctuation: /:=|[(),:;\\[\\]]/,\n          /**\n           * Should be performed after searching for\n           * - numeric constants (because of \"+\" and \"-\");\n           * - punctuation marks (because of \":=\" and \"=\").\n           */\n          \"operator-char\": {\n            pattern: /\\*\\*?|<[=>]?|>=?|[-+/=]/,\n            alias: \"operator\"\n          }\n        };\n        Prism2.languages.kum = Prism2.languages.kumir;\n      })(Prism);\n    }\n  }\n});\n\nexport {\n  require_kumir\n};\n//# sourceMappingURL=chunk-252KRFP5.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.0003249170258641243
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-252KRFP5.js (200) — 2024-07-28T11:41:34.647Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-252KRFP5.js"
        }
      ]
    }
  ]
}