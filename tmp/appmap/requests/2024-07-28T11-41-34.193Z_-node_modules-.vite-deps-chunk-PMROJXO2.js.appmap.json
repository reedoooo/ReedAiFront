{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-PMROJXO2.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"bdf-36lUqPuubkUZB4s+es8sJXDrqxo\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/stan.js\nvar require_stan = __commonJS({\n  \"node_modules/refractor/lang/stan.js\"(exports, module) {\n    module.exports = stan;\n    stan.displayName = \"stan\";\n    stan.aliases = [];\n    function stan(Prism) {\n      ;\n      (function(Prism2) {\n        var higherOrderFunctions = /\\b(?:algebra_solver|algebra_solver_newton|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect|ode_(?:adams|bdf|ckrk|rk45)(?:_tol)?|ode_adjoint_tol_ctl|reduce_sum|reduce_sum_static)\\b/;\n        Prism2.languages.stan = {\n          comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,\n          string: {\n            // String literals can contain spaces and any printable ASCII characters except for \" and \\\n            // https://mc-stan.org/docs/2_24/reference-manual/print-statements-section.html#string-literals\n            pattern: /\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,\n            greedy: true\n          },\n          directive: {\n            pattern: /^([ \\t]*)#include\\b.*/m,\n            lookbehind: true,\n            alias: \"property\"\n          },\n          \"function-arg\": {\n            pattern: RegExp(\n              \"(\" + higherOrderFunctions.source + /\\s*\\(\\s*/.source + \")\" + /[a-zA-Z]\\w*/.source\n            ),\n            lookbehind: true,\n            alias: \"function\"\n          },\n          constraint: {\n            pattern: /(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,\n            lookbehind: true,\n            inside: {\n              expression: {\n                pattern: /(=\\s*)\\S(?:\\S|\\s+(?!\\s))*?(?=\\s*(?:>$|,\\s*\\w+\\s*=))/,\n                lookbehind: true,\n                inside: null\n                // see below\n              },\n              property: /\\b[a-z]\\w*(?=\\s*=)/i,\n              operator: /=/,\n              punctuation: /^<|>$|,/\n            }\n          },\n          keyword: [\n            {\n              pattern: /\\bdata(?=\\s*\\{)|\\b(?:functions|generated|model|parameters|quantities|transformed)\\b/,\n              alias: \"program-block\"\n            },\n            /\\b(?:array|break|cholesky_factor_corr|cholesky_factor_cov|complex|continue|corr_matrix|cov_matrix|data|else|for|if|in|increment_log_prob|int|matrix|ordered|positive_ordered|print|real|reject|return|row_vector|simplex|target|unit_vector|vector|void|while)\\b/,\n            // these are functions that are known to take another function as their first argument.\n            higherOrderFunctions\n          ],\n          function: /\\b[a-z]\\w*(?=\\s*\\()/i,\n          number: /(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:E[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i,\n          boolean: /\\b(?:false|true)\\b/,\n          operator: /<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,\n          punctuation: /[()\\[\\]{},;]/\n        };\n        Prism2.languages.stan.constraint.inside.expression.inside = Prism2.languages.stan;\n      })(Prism);\n    }\n  }\n});\n\nexport {\n  require_stan\n};\n//# sourceMappingURL=chunk-PMROJXO2.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00011129199992865324
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-PMROJXO2.js (200) â€” 2024-07-28T11:41:34.193Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-PMROJXO2.js"
        }
      ]
    }
  ]
}