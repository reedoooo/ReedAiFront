{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-5TJHFX42.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"16cb-wIkEWqSvtC1e3cXJZxXcmMSnnhA\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/scheme.js\nvar require_scheme = __commonJS({\n  \"node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/scheme.js\"(exports, module) {\n    function scheme(hljs) {\n      const SCHEME_IDENT_RE = \"[^\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}\\\",'`;#|\\\\\\\\\\\\s]+\";\n      const SCHEME_SIMPLE_NUMBER_RE = \"(-|\\\\+)?\\\\d+([./]\\\\d+)?\";\n      const SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + \"[+\\\\-]\" + SCHEME_SIMPLE_NUMBER_RE + \"i\";\n      const KEYWORDS = {\n        $pattern: SCHEME_IDENT_RE,\n        \"builtin-name\": \"case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules ' * + , ,@ - ... / ; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?\"\n      };\n      const LITERAL = {\n        className: \"literal\",\n        begin: \"(#t|#f|#\\\\\\\\\" + SCHEME_IDENT_RE + \"|#\\\\\\\\.)\"\n      };\n      const NUMBER = {\n        className: \"number\",\n        variants: [\n          {\n            begin: SCHEME_SIMPLE_NUMBER_RE,\n            relevance: 0\n          },\n          {\n            begin: SCHEME_COMPLEX_NUMBER_RE,\n            relevance: 0\n          },\n          {\n            begin: \"#b[0-1]+(/[0-1]+)?\"\n          },\n          {\n            begin: \"#o[0-7]+(/[0-7]+)?\"\n          },\n          {\n            begin: \"#x[0-9a-f]+(/[0-9a-f]+)?\"\n          }\n        ]\n      };\n      const STRING = hljs.QUOTE_STRING_MODE;\n      const COMMENT_MODES = [\n        hljs.COMMENT(\n          \";\",\n          \"$\",\n          {\n            relevance: 0\n          }\n        ),\n        hljs.COMMENT(\"#\\\\|\", \"\\\\|#\")\n      ];\n      const IDENT = {\n        begin: SCHEME_IDENT_RE,\n        relevance: 0\n      };\n      const QUOTED_IDENT = {\n        className: \"symbol\",\n        begin: \"'\" + SCHEME_IDENT_RE\n      };\n      const BODY = {\n        endsWithParent: true,\n        relevance: 0\n      };\n      const QUOTED_LIST = {\n        variants: [\n          {\n            begin: /'/\n          },\n          {\n            begin: \"`\"\n          }\n        ],\n        contains: [\n          {\n            begin: \"\\\\(\",\n            end: \"\\\\)\",\n            contains: [\n              \"self\",\n              LITERAL,\n              STRING,\n              NUMBER,\n              IDENT,\n              QUOTED_IDENT\n            ]\n          }\n        ]\n      };\n      const NAME = {\n        className: \"name\",\n        relevance: 0,\n        begin: SCHEME_IDENT_RE,\n        keywords: KEYWORDS\n      };\n      const LAMBDA = {\n        begin: /lambda/,\n        endsWithParent: true,\n        returnBegin: true,\n        contains: [\n          NAME,\n          {\n            endsParent: true,\n            variants: [\n              {\n                begin: /\\(/,\n                end: /\\)/\n              },\n              {\n                begin: /\\[/,\n                end: /\\]/\n              }\n            ],\n            contains: [IDENT]\n          }\n        ]\n      };\n      const LIST = {\n        variants: [\n          {\n            begin: \"\\\\(\",\n            end: \"\\\\)\"\n          },\n          {\n            begin: \"\\\\[\",\n            end: \"\\\\]\"\n          }\n        ],\n        contains: [\n          LAMBDA,\n          NAME,\n          BODY\n        ]\n      };\n      BODY.contains = [\n        LITERAL,\n        NUMBER,\n        STRING,\n        IDENT,\n        QUOTED_IDENT,\n        QUOTED_LIST,\n        LIST\n      ].concat(COMMENT_MODES);\n      return {\n        name: \"Scheme\",\n        illegal: /\\S/,\n        contains: [\n          hljs.SHEBANG(),\n          NUMBER,\n          STRING,\n          QUOTED_IDENT,\n          QUOTED_LIST,\n          LIST\n        ].concat(COMMENT_MODES)\n      };\n    }\n    module.exports = scheme;\n  }\n});\n\nexport {\n  require_scheme\n};\n//# sourceMappingURL=chunk-5TJHFX42.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.001991958008147776
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-5TJHFX42.js (200) â€” 2024-07-28T11:41:35.463Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-5TJHFX42.js"
        }
      ]
    }
  ]
}