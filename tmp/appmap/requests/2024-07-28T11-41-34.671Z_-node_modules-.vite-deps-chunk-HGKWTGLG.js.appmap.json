{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-HGKWTGLG.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"ad4-rNy77XUny87EKx1jkDKfsGuWjlU\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/javadoclike.js\nvar require_javadoclike = __commonJS({\n  \"node_modules/refractor/lang/javadoclike.js\"(exports, module) {\n    module.exports = javadoclike;\n    javadoclike.displayName = \"javadoclike\";\n    javadoclike.aliases = [];\n    function javadoclike(Prism) {\n      ;\n      (function(Prism2) {\n        var javaDocLike = Prism2.languages.javadoclike = {\n          parameter: {\n            pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n            lookbehind: true\n          },\n          keyword: {\n            // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n            // @word, {@word}\n            pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n            lookbehind: true\n          },\n          punctuation: /[{}]/\n        };\n        function docCommentSupport(lang, callback) {\n          var tokenName = \"doc-comment\";\n          var grammar = Prism2.languages[lang];\n          if (!grammar) {\n            return;\n          }\n          var token = grammar[tokenName];\n          if (!token) {\n            var definition = {};\n            definition[tokenName] = {\n              pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n              lookbehind: true,\n              alias: \"comment\"\n            };\n            grammar = Prism2.languages.insertBefore(lang, \"comment\", definition);\n            token = grammar[tokenName];\n          }\n          if (token instanceof RegExp) {\n            token = grammar[tokenName] = {\n              pattern: token\n            };\n          }\n          if (Array.isArray(token)) {\n            for (var i = 0, l = token.length; i < l; i++) {\n              if (token[i] instanceof RegExp) {\n                token[i] = {\n                  pattern: token[i]\n                };\n              }\n              callback(token[i]);\n            }\n          } else {\n            callback(token);\n          }\n        }\n        function addSupport(languages, docLanguage) {\n          if (typeof languages === \"string\") {\n            languages = [languages];\n          }\n          languages.forEach(function(lang) {\n            docCommentSupport(lang, function(pattern) {\n              if (!pattern.inside) {\n                pattern.inside = {};\n              }\n              pattern.inside.rest = docLanguage;\n            });\n          });\n        }\n        Object.defineProperty(javaDocLike, \"addSupport\", {\n          value: addSupport\n        });\n        javaDocLike.addSupport([\"java\", \"javascript\", \"php\"], javaDocLike);\n      })(Prism);\n    }\n  }\n});\n\nexport {\n  require_javadoclike\n};\n//# sourceMappingURL=chunk-HGKWTGLG.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00031174998730421066
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-HGKWTGLG.js (200) â€” 2024-07-28T11:41:34.671Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-HGKWTGLG.js"
        }
      ]
    }
  ]
}