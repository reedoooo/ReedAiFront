{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-GO22KQUB.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"2e43-GABg1s487zu59HJNzEBO6uOWzPA\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/c-like.js\nvar require_c_like = __commonJS({\n  \"node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/c-like.js\"(exports, module) {\n    function source(re) {\n      if (!re) return null;\n      if (typeof re === \"string\") return re;\n      return re.source;\n    }\n    function lookahead(re) {\n      return concat(\"(?=\", re, \")\");\n    }\n    function optional(re) {\n      return concat(\"(\", re, \")?\");\n    }\n    function concat(...args) {\n      const joined = args.map((x) => source(x)).join(\"\");\n      return joined;\n    }\n    function cPlusPlus(hljs) {\n      const C_LINE_COMMENT_MODE = hljs.COMMENT(\"//\", \"$\", {\n        contains: [\n          {\n            begin: /\\\\\\n/\n          }\n        ]\n      });\n      const DECLTYPE_AUTO_RE = \"decltype\\\\(auto\\\\)\";\n      const NAMESPACE_RE = \"[a-zA-Z_]\\\\w*::\";\n      const TEMPLATE_ARGUMENT_RE = \"<[^<>]+>\";\n      const FUNCTION_TYPE_RE = \"(\" + DECLTYPE_AUTO_RE + \"|\" + optional(NAMESPACE_RE) + \"[a-zA-Z_]\\\\w*\" + optional(TEMPLATE_ARGUMENT_RE) + \")\";\n      const CPP_PRIMITIVE_TYPES = {\n        className: \"keyword\",\n        begin: \"\\\\b[a-z\\\\d_]*_t\\\\b\"\n      };\n      const CHARACTER_ESCAPES = \"\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)\";\n      const STRINGS = {\n        className: \"string\",\n        variants: [\n          {\n            begin: '(u8?|U|L)?\"',\n            end: '\"',\n            illegal: \"\\\\n\",\n            contains: [hljs.BACKSLASH_ESCAPE]\n          },\n          {\n            begin: \"(u8?|U|L)?'(\" + CHARACTER_ESCAPES + \"|.)\",\n            end: \"'\",\n            illegal: \".\"\n          },\n          hljs.END_SAME_AS_BEGIN({\n            begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n            end: /\\)([^()\\\\ ]{0,16})\"/\n          })\n        ]\n      };\n      const NUMBERS = {\n        className: \"number\",\n        variants: [\n          {\n            begin: \"\\\\b(0b[01']+)\"\n          },\n          {\n            begin: \"(-?)\\\\b([\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)\"\n          },\n          {\n            begin: \"(-?)(\\\\b0[xX][a-fA-F0-9']+|(\\\\b[\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)([eE][-+]?[\\\\d']+)?)\"\n          }\n        ],\n        relevance: 0\n      };\n      const PREPROCESSOR = {\n        className: \"meta\",\n        begin: /#\\s*[a-z]+\\b/,\n        end: /$/,\n        keywords: {\n          \"meta-keyword\": \"if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include\"\n        },\n        contains: [\n          {\n            begin: /\\\\\\n/,\n            relevance: 0\n          },\n          hljs.inherit(STRINGS, {\n            className: \"meta-string\"\n          }),\n          {\n            className: \"meta-string\",\n            begin: /<.*?>/\n          },\n          C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE\n        ]\n      };\n      const TITLE_MODE = {\n        className: \"title\",\n        begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n        relevance: 0\n      };\n      const FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + \"\\\\s*\\\\(\";\n      const COMMON_CPP_HINTS = [\n        \"asin\",\n        \"atan2\",\n        \"atan\",\n        \"calloc\",\n        \"ceil\",\n        \"cosh\",\n        \"cos\",\n        \"exit\",\n        \"exp\",\n        \"fabs\",\n        \"floor\",\n        \"fmod\",\n        \"fprintf\",\n        \"fputs\",\n        \"free\",\n        \"frexp\",\n        \"auto_ptr\",\n        \"deque\",\n        \"list\",\n        \"queue\",\n        \"stack\",\n        \"vector\",\n        \"map\",\n        \"set\",\n        \"pair\",\n        \"bitset\",\n        \"multiset\",\n        \"multimap\",\n        \"unordered_set\",\n        \"fscanf\",\n        \"future\",\n        \"isalnum\",\n        \"isalpha\",\n        \"iscntrl\",\n        \"isdigit\",\n        \"isgraph\",\n        \"islower\",\n        \"isprint\",\n        \"ispunct\",\n        \"isspace\",\n        \"isupper\",\n        \"isxdigit\",\n        \"tolower\",\n        \"toupper\",\n        \"labs\",\n        \"ldexp\",\n        \"log10\",\n        \"log\",\n        \"malloc\",\n        \"realloc\",\n        \"memchr\",\n        \"memcmp\",\n        \"memcpy\",\n        \"memset\",\n        \"modf\",\n        \"pow\",\n        \"printf\",\n        \"putchar\",\n        \"puts\",\n        \"scanf\",\n        \"sinh\",\n        \"sin\",\n        \"snprintf\",\n        \"sprintf\",\n        \"sqrt\",\n        \"sscanf\",\n        \"strcat\",\n        \"strchr\",\n        \"strcmp\",\n        \"strcpy\",\n        \"strcspn\",\n        \"strlen\",\n        \"strncat\",\n        \"strncmp\",\n        \"strncpy\",\n        \"strpbrk\",\n        \"strrchr\",\n        \"strspn\",\n        \"strstr\",\n        \"tanh\",\n        \"tan\",\n        \"unordered_map\",\n        \"unordered_multiset\",\n        \"unordered_multimap\",\n        \"priority_queue\",\n        \"make_pair\",\n        \"array\",\n        \"shared_ptr\",\n        \"abort\",\n        \"terminate\",\n        \"abs\",\n        \"acos\",\n        \"vfprintf\",\n        \"vprintf\",\n        \"vsprintf\",\n        \"endl\",\n        \"initializer_list\",\n        \"unique_ptr\",\n        \"complex\",\n        \"imaginary\",\n        \"std\",\n        \"string\",\n        \"wstring\",\n        \"cin\",\n        \"cout\",\n        \"cerr\",\n        \"clog\",\n        \"stdin\",\n        \"stdout\",\n        \"stderr\",\n        \"stringstream\",\n        \"istringstream\",\n        \"ostringstream\"\n      ];\n      const CPP_KEYWORDS = {\n        keyword: \"int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace unsigned long volatile static protected bool template mutable if public friend do goto auto void enum else break extern using asm case typeid wchar_t short reinterpret_cast|10 default double register explicit signed typename try this switch continue inline delete alignas alignof constexpr consteval constinit decltype concept co_await co_return co_yield requires noexcept static_assert thread_local restrict final override atomic_bool atomic_char atomic_schar atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong atomic_ullong new throw return and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq\",\n        built_in: \"_Bool _Complex _Imaginary\",\n        _relevance_hints: COMMON_CPP_HINTS,\n        literal: \"true false nullptr NULL\"\n      };\n      const FUNCTION_DISPATCH = {\n        className: \"function.dispatch\",\n        relevance: 0,\n        keywords: CPP_KEYWORDS,\n        begin: concat(\n          /\\b/,\n          /(?!decltype)/,\n          /(?!if)/,\n          /(?!for)/,\n          /(?!while)/,\n          hljs.IDENT_RE,\n          lookahead(/\\s*\\(/)\n        )\n      };\n      const EXPRESSION_CONTAINS = [\n        FUNCTION_DISPATCH,\n        PREPROCESSOR,\n        CPP_PRIMITIVE_TYPES,\n        C_LINE_COMMENT_MODE,\n        hljs.C_BLOCK_COMMENT_MODE,\n        NUMBERS,\n        STRINGS\n      ];\n      const EXPRESSION_CONTEXT = {\n        // This mode covers expression context where we can't expect a function\n        // definition and shouldn't highlight anything that looks like one:\n        // `return some()`, `else if()`, `(x*sum(1, 2))`\n        variants: [\n          {\n            begin: /=/,\n            end: /;/\n          },\n          {\n            begin: /\\(/,\n            end: /\\)/\n          },\n          {\n            beginKeywords: \"new throw return else\",\n            end: /;/\n          }\n        ],\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([\n          {\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            contains: EXPRESSION_CONTAINS.concat([\"self\"]),\n            relevance: 0\n          }\n        ]),\n        relevance: 0\n      };\n      const FUNCTION_DECLARATION = {\n        className: \"function\",\n        begin: \"(\" + FUNCTION_TYPE_RE + \"[\\\\*&\\\\s]+)+\" + FUNCTION_TITLE,\n        returnBegin: true,\n        end: /[{;=]/,\n        excludeEnd: true,\n        keywords: CPP_KEYWORDS,\n        illegal: /[^\\w\\s\\*&:<>.]/,\n        contains: [\n          {\n            // to prevent it from being confused as the function title\n            begin: DECLTYPE_AUTO_RE,\n            keywords: CPP_KEYWORDS,\n            relevance: 0\n          },\n          {\n            begin: FUNCTION_TITLE,\n            returnBegin: true,\n            contains: [TITLE_MODE],\n            relevance: 0\n          },\n          // needed because we do not have look-behind on the below rule\n          // to prevent it from grabbing the final : in a :: pair\n          {\n            begin: /::/,\n            relevance: 0\n          },\n          // initializers\n          {\n            begin: /:/,\n            endsWithParent: true,\n            contains: [\n              STRINGS,\n              NUMBERS\n            ]\n          },\n          {\n            className: \"params\",\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES,\n              // Count matching parentheses.\n              {\n                begin: /\\(/,\n                end: /\\)/,\n                keywords: CPP_KEYWORDS,\n                relevance: 0,\n                contains: [\n                  \"self\",\n                  C_LINE_COMMENT_MODE,\n                  hljs.C_BLOCK_COMMENT_MODE,\n                  STRINGS,\n                  NUMBERS,\n                  CPP_PRIMITIVE_TYPES\n                ]\n              }\n            ]\n          },\n          CPP_PRIMITIVE_TYPES,\n          C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          PREPROCESSOR\n        ]\n      };\n      return {\n        name: \"C++\",\n        aliases: [\n          \"cc\",\n          \"c++\",\n          \"h++\",\n          \"hpp\",\n          \"hh\",\n          \"hxx\",\n          \"cxx\"\n        ],\n        keywords: CPP_KEYWORDS,\n        illegal: \"</\",\n        classNameAliases: {\n          \"function.dispa... (1843 more characters)"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00017887505237013102
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-GO22KQUB.js (200) — 2024-07-28T11:41:40.111Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-GO22KQUB.js"
        }
      ]
    }
  ]
}