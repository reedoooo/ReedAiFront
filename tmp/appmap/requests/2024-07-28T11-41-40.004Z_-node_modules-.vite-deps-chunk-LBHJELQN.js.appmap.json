{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-LBHJELQN.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"172e-rul5MQYb78wP7Jcz/4PA1kQqLos\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/markdown.js\nvar require_markdown = __commonJS({\n  \"node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/markdown.js\"(exports, module) {\n    function source(re) {\n      if (!re) return null;\n      if (typeof re === \"string\") return re;\n      return re.source;\n    }\n    function concat(...args) {\n      const joined = args.map((x) => source(x)).join(\"\");\n      return joined;\n    }\n    function markdown(hljs) {\n      const INLINE_HTML = {\n        begin: /<\\/?[A-Za-z_]/,\n        end: \">\",\n        subLanguage: \"xml\",\n        relevance: 0\n      };\n      const HORIZONTAL_RULE = {\n        begin: \"^[-\\\\*]{3,}\",\n        end: \"$\"\n      };\n      const CODE = {\n        className: \"code\",\n        variants: [\n          // TODO: fix to allow these to work with sublanguage also\n          {\n            begin: \"(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*\"\n          },\n          {\n            begin: \"(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*\"\n          },\n          // needed to allow markdown as a sublanguage to work\n          {\n            begin: \"```\",\n            end: \"```+[ ]*$\"\n          },\n          {\n            begin: \"~~~\",\n            end: \"~~~+[ ]*$\"\n          },\n          {\n            begin: \"`.+?`\"\n          },\n          {\n            begin: \"(?=^( {4}|\\\\t))\",\n            // use contains to gobble up multiple lines to allow the block to be whatever size\n            // but only have a single open/close tag vs one per line\n            contains: [\n              {\n                begin: \"^( {4}|\\\\t)\",\n                end: \"(\\\\n)$\"\n              }\n            ],\n            relevance: 0\n          }\n        ]\n      };\n      const LIST = {\n        className: \"bullet\",\n        begin: \"^[ \t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)\",\n        end: \"\\\\s+\",\n        excludeEnd: true\n      };\n      const LINK_REFERENCE = {\n        begin: /^\\[[^\\n]+\\]:/,\n        returnBegin: true,\n        contains: [\n          {\n            className: \"symbol\",\n            begin: /\\[/,\n            end: /\\]/,\n            excludeBegin: true,\n            excludeEnd: true\n          },\n          {\n            className: \"link\",\n            begin: /:\\s*/,\n            end: /$/,\n            excludeBegin: true\n          }\n        ]\n      };\n      const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\n      const LINK = {\n        variants: [\n          // too much like nested array access in so many languages\n          // to have any real relevance\n          {\n            begin: /\\[.+?\\]\\[.*?\\]/,\n            relevance: 0\n          },\n          // popular internet URLs\n          {\n            begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\n            relevance: 2\n          },\n          {\n            begin: concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\n            relevance: 2\n          },\n          // relative urls\n          {\n            begin: /\\[.+?\\]\\([./?&#].*?\\)/,\n            relevance: 1\n          },\n          // whatever else, lower relevance (might not be a link at all)\n          {\n            begin: /\\[.+?\\]\\(.*?\\)/,\n            relevance: 0\n          }\n        ],\n        returnBegin: true,\n        contains: [\n          {\n            className: \"string\",\n            relevance: 0,\n            begin: \"\\\\[\",\n            end: \"\\\\]\",\n            excludeBegin: true,\n            returnEnd: true\n          },\n          {\n            className: \"link\",\n            relevance: 0,\n            begin: \"\\\\]\\\\(\",\n            end: \"\\\\)\",\n            excludeBegin: true,\n            excludeEnd: true\n          },\n          {\n            className: \"symbol\",\n            relevance: 0,\n            begin: \"\\\\]\\\\[\",\n            end: \"\\\\]\",\n            excludeBegin: true,\n            excludeEnd: true\n          }\n        ]\n      };\n      const BOLD = {\n        className: \"strong\",\n        contains: [],\n        // defined later\n        variants: [\n          {\n            begin: /_{2}/,\n            end: /_{2}/\n          },\n          {\n            begin: /\\*{2}/,\n            end: /\\*{2}/\n          }\n        ]\n      };\n      const ITALIC = {\n        className: \"emphasis\",\n        contains: [],\n        // defined later\n        variants: [\n          {\n            begin: /\\*(?!\\*)/,\n            end: /\\*/\n          },\n          {\n            begin: /_(?!_)/,\n            end: /_/,\n            relevance: 0\n          }\n        ]\n      };\n      BOLD.contains.push(ITALIC);\n      ITALIC.contains.push(BOLD);\n      let CONTAINABLE = [\n        INLINE_HTML,\n        LINK\n      ];\n      BOLD.contains = BOLD.contains.concat(CONTAINABLE);\n      ITALIC.contains = ITALIC.contains.concat(CONTAINABLE);\n      CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\n      const HEADER = {\n        className: \"section\",\n        variants: [\n          {\n            begin: \"^#{1,6}\",\n            end: \"$\",\n            contains: CONTAINABLE\n          },\n          {\n            begin: \"(?=^.+?\\\\n[=-]{2,}$)\",\n            contains: [\n              {\n                begin: \"^[=-]*$\"\n              },\n              {\n                begin: \"^\",\n                end: \"\\\\n\",\n                contains: CONTAINABLE\n              }\n            ]\n          }\n        ]\n      };\n      const BLOCKQUOTE = {\n        className: \"quote\",\n        begin: \"^>\\\\s+\",\n        contains: CONTAINABLE,\n        end: \"$\"\n      };\n      return {\n        name: \"Markdown\",\n        aliases: [\n          \"md\",\n          \"mkdown\",\n          \"mkd\"\n        ],\n        contains: [\n          HEADER,\n          INLINE_HTML,\n          LIST,\n          BOLD,\n          ITALIC,\n          BLOCKQUOTE,\n          CODE,\n          HORIZONTAL_RULE,\n          LINK,\n          LINK_REFERENCE\n        ]\n      };\n    }\n    module.exports = markdown;\n  }\n});\n\nexport {\n  require_markdown\n};\n//# sourceMappingURL=chunk-LBHJELQN.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00018749991431832314
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-LBHJELQN.js (200) â€” 2024-07-28T11:41:40.004Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-LBHJELQN.js"
        }
      ]
    }
  ]
}