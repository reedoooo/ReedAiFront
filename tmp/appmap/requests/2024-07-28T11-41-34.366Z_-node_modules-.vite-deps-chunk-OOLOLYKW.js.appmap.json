{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-OOLOLYKW.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"1aaf-i5iMPysd5t/9H+scd1MZF5+u/lo\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/rest.js\nvar require_rest = __commonJS({\n  \"node_modules/refractor/lang/rest.js\"(exports, module) {\n    module.exports = rest;\n    rest.displayName = \"rest\";\n    rest.aliases = [];\n    function rest(Prism) {\n      Prism.languages.rest = {\n        table: [\n          {\n            pattern: /(^[\\t ]*)(?:\\+[=-]+)+\\+(?:\\r?\\n|\\r)(?:\\1[+|].+[+|](?:\\r?\\n|\\r))+\\1(?:\\+[=-]+)+\\+/m,\n            lookbehind: true,\n            inside: {\n              punctuation: /\\||(?:\\+[=-]+)+\\+/\n            }\n          },\n          {\n            pattern: /(^[\\t ]*)=+ [ =]*=(?:(?:\\r?\\n|\\r)\\1.+)+(?:\\r?\\n|\\r)\\1=+ [ =]*=(?=(?:\\r?\\n|\\r){2}|\\s*$)/m,\n            lookbehind: true,\n            inside: {\n              punctuation: /[=-]+/\n            }\n          }\n        ],\n        // Directive-like patterns\n        \"substitution-def\": {\n          pattern: /(^[\\t ]*\\.\\. )\\|(?:[^|\\s](?:[^|]*[^|\\s])?)\\| [^:]+::/m,\n          lookbehind: true,\n          inside: {\n            substitution: {\n              pattern: /^\\|(?:[^|\\s]|[^|\\s][^|]*[^|\\s])\\|/,\n              alias: \"attr-value\",\n              inside: {\n                punctuation: /^\\||\\|$/\n              }\n            },\n            directive: {\n              pattern: /( )(?! )[^:]+::/,\n              lookbehind: true,\n              alias: \"function\",\n              inside: {\n                punctuation: /::$/\n              }\n            }\n          }\n        },\n        \"link-target\": [\n          {\n            pattern: /(^[\\t ]*\\.\\. )\\[[^\\]]+\\]/m,\n            lookbehind: true,\n            alias: \"string\",\n            inside: {\n              punctuation: /^\\[|\\]$/\n            }\n          },\n          {\n            pattern: /(^[\\t ]*\\.\\. )_(?:`[^`]+`|(?:[^:\\\\]|\\\\.)+):/m,\n            lookbehind: true,\n            alias: \"string\",\n            inside: {\n              punctuation: /^_|:$/\n            }\n          }\n        ],\n        directive: {\n          pattern: /(^[\\t ]*\\.\\. )[^:]+::/m,\n          lookbehind: true,\n          alias: \"function\",\n          inside: {\n            punctuation: /::$/\n          }\n        },\n        comment: {\n          // The two alternatives try to prevent highlighting of blank comments\n          pattern: /(^[\\t ]*\\.\\.)(?:(?: .+)?(?:(?:\\r?\\n|\\r).+)+| .+)(?=(?:\\r?\\n|\\r){2}|$)/m,\n          lookbehind: true\n        },\n        title: [\n          // Overlined and underlined\n          {\n            pattern: /^(([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+)(?:\\r?\\n|\\r).+(?:\\r?\\n|\\r)\\1$/m,\n            inside: {\n              punctuation: /^[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+|[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,\n              important: /.+/\n            }\n          },\n          // Underlined only\n          {\n            pattern: /(^|(?:\\r?\\n|\\r){2}).+(?:\\r?\\n|\\r)([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+(?=\\r?\\n|\\r|$)/,\n            lookbehind: true,\n            inside: {\n              punctuation: /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,\n              important: /.+/\n            }\n          }\n        ],\n        hr: {\n          pattern: /((?:\\r?\\n|\\r){2})([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2{3,}(?=(?:\\r?\\n|\\r){2})/,\n          lookbehind: true,\n          alias: \"punctuation\"\n        },\n        field: {\n          pattern: /(^[\\t ]*):[^:\\r\\n]+:(?= )/m,\n          lookbehind: true,\n          alias: \"attr-name\"\n        },\n        \"command-line-option\": {\n          pattern: /(^[\\t ]*)(?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?(?:, (?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?)*(?=(?:\\r?\\n|\\r)? {2,}\\S)/im,\n          lookbehind: true,\n          alias: \"symbol\"\n        },\n        \"literal-block\": {\n          pattern: /::(?:\\r?\\n|\\r){2}([ \\t]+)(?![ \\t]).+(?:(?:\\r?\\n|\\r)\\1.+)*/,\n          inside: {\n            \"literal-block-punctuation\": {\n              pattern: /^::/,\n              alias: \"punctuation\"\n            }\n          }\n        },\n        \"quoted-literal-block\": {\n          pattern: /::(?:\\r?\\n|\\r){2}([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]).*(?:(?:\\r?\\n|\\r)\\1.*)*/,\n          inside: {\n            \"literal-block-punctuation\": {\n              pattern: /^(?:::|([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\1*)/m,\n              alias: \"punctuation\"\n            }\n          }\n        },\n        \"list-bullet\": {\n          pattern: /(^[\\t ]*)(?:[*+\\-•‣⁃]|\\(?(?:\\d+|[a-z]|[ivxdclm]+)\\)|(?:\\d+|[a-z]|[ivxdclm]+)\\.)(?= )/im,\n          lookbehind: true,\n          alias: \"punctuation\"\n        },\n        \"doctest-block\": {\n          pattern: /(^[\\t ]*)>>> .+(?:(?:\\r?\\n|\\r).+)*/m,\n          lookbehind: true,\n          inside: {\n            punctuation: /^>>>/\n          }\n        },\n        inline: [\n          {\n            pattern: /(^|[\\s\\-:\\/'\"<(\\[{])(?::[^:]+:`.*?`|`.*?`:[^:]+:|(\\*\\*?|``?|\\|)(?!\\s)(?:(?!\\2).)*\\S\\2(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$))/m,\n            lookbehind: true,\n            inside: {\n              bold: {\n                pattern: /(^\\*\\*).+(?=\\*\\*$)/,\n                lookbehind: true\n              },\n              italic: {\n                pattern: /(^\\*).+(?=\\*$)/,\n                lookbehind: true\n              },\n              \"inline-literal\": {\n                pattern: /(^``).+(?=``$)/,\n                lookbehind: true,\n                alias: \"symbol\"\n              },\n              role: {\n                pattern: /^:[^:]+:|:[^:]+:$/,\n                alias: \"function\",\n                inside: {\n                  punctuation: /^:|:$/\n                }\n              },\n              \"interpreted-text\": {\n                pattern: /(^`).+(?=`$)/,\n                lookbehind: true,\n                alias: \"attr-value\"\n              },\n              substitution: {\n                pattern: /(^\\|).+(?=\\|$)/,\n                lookbehind: true,\n                alias: \"attr-value\"\n              },\n              punctuation: /\\*\\*?|``?|\\|/\n            }\n          }\n        ],\n        link: [\n          {\n            pattern: /\\[[^\\[\\]]+\\]_(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/,\n            alias: \"string\",\n            inside: {\n              punctuation: /^\\[|\\]_$/\n            }\n          },\n          {\n            pattern: /(?:\\b[a-z\\d]+(?:[_.:+][a-z\\d]+)*_?_|`[^`]+`_?_|_`[^`]+`)(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/i,\n            alias: \"string\",\n            inside: {\n              punctuation: /^_?`|`$|`?_?_$/\n            }\n          }\n        ],\n        // Line block start,\n        // quote attribution,\n        // explicit markup start,\n        // and anonymous hyperlink target shortcut (__)\n        punctuation: {\n          pattern: /(^[\\t ]*)(?:\\|(?= |$)|(?:---?|—|\\.\\.|__)(?= )|\\.\\.$)/m,\n          lookbehind: true\n        }\n      };\n    }\n  }\n});\n\nexport {\n  require_rest\n};\n//# sourceMappingURL=chunk-OOLOLYKW.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.0001344579504802823
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-OOLOLYKW.js (200) — 2024-07-28T11:41:34.366Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-OOLOLYKW.js"
        }
      ]
    }
  ]
}