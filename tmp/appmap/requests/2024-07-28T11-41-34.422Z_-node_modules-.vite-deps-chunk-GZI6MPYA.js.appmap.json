{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-GZI6MPYA.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"35c6-SpqJijnVQED+dZpacD45bkWSX64\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/sas.js\nvar require_sas = __commonJS({\n  \"node_modules/refractor/lang/sas.js\"(exports, module) {\n    module.exports = sas;\n    sas.displayName = \"sas\";\n    sas.aliases = [];\n    function sas(Prism) {\n      ;\n      (function(Prism2) {\n        var stringPattern = /(?:\"(?:\"\"|[^\"])*\"(?!\")|'(?:''|[^'])*'(?!'))/.source;\n        var number = /\\b(?:\\d[\\da-f]*x|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i;\n        var numericConstant = {\n          pattern: RegExp(stringPattern + \"[bx]\"),\n          alias: \"number\"\n        };\n        var macroVariable = {\n          pattern: /&[a-z_]\\w*/i\n        };\n        var macroKeyword = {\n          pattern: /((?:^|\\s|=|\\())%(?:ABORT|BY|CMS|COPY|DISPLAY|DO|ELSE|END|EVAL|GLOBAL|GO|GOTO|IF|INC|INCLUDE|INDEX|INPUT|KTRIM|LENGTH|LET|LIST|LOCAL|PUT|QKTRIM|QSCAN|QSUBSTR|QSYSFUNC|QUPCASE|RETURN|RUN|SCAN|SUBSTR|SUPERQ|SYMDEL|SYMEXIST|SYMGLOBL|SYMLOCAL|SYSCALL|SYSEVALF|SYSEXEC|SYSFUNC|SYSGET|SYSRPUT|THEN|TO|TSO|UNQUOTE|UNTIL|UPCASE|WHILE|WINDOW)\\b/i,\n          lookbehind: true,\n          alias: \"keyword\"\n        };\n        var step = {\n          pattern: /(^|\\s)(?:proc\\s+\\w+|data(?!=)|quit|run)\\b/i,\n          alias: \"keyword\",\n          lookbehind: true\n        };\n        var comment = [\n          /\\/\\*[\\s\\S]*?\\*\\//,\n          {\n            pattern: /(^[ \\t]*|;\\s*)\\*[^;]*;/m,\n            lookbehind: true\n          }\n        ];\n        var string = {\n          pattern: RegExp(stringPattern),\n          greedy: true\n        };\n        var punctuation = /[$%@.(){}\\[\\];,\\\\]/;\n        var func = {\n          pattern: /%?\\b\\w+(?=\\()/,\n          alias: \"keyword\"\n        };\n        var args = {\n          function: func,\n          \"arg-value\": {\n            pattern: /(=\\s*)[A-Z\\.]+/i,\n            lookbehind: true\n          },\n          operator: /=/,\n          \"macro-variable\": macroVariable,\n          arg: {\n            pattern: /[A-Z]+/i,\n            alias: \"keyword\"\n          },\n          number,\n          \"numeric-constant\": numericConstant,\n          punctuation,\n          string\n        };\n        var format = {\n          pattern: /\\b(?:format|put)\\b=?[\\w'$.]+/i,\n          inside: {\n            keyword: /^(?:format|put)(?==)/i,\n            equals: /=/,\n            format: {\n              pattern: /(?:\\w|\\$\\d)+\\.\\d?/,\n              alias: \"number\"\n            }\n          }\n        };\n        var altformat = {\n          pattern: /\\b(?:format|put)\\s+[\\w']+(?:\\s+[$.\\w]+)+(?=;)/i,\n          inside: {\n            keyword: /^(?:format|put)/i,\n            format: {\n              pattern: /[\\w$]+\\.\\d?/,\n              alias: \"number\"\n            }\n          }\n        };\n        var globalStatements = {\n          pattern: /((?:^|\\s)=?)(?:catname|checkpoint execute_always|dm|endsas|filename|footnote|%include|libname|%list|lock|missing|options|page|resetline|%run|sasfile|skip|sysecho|title\\d?)\\b/i,\n          lookbehind: true,\n          alias: \"keyword\"\n        };\n        var submitStatement = {\n          pattern: /(^|\\s)(?:submit(?:\\s+(?:load|norun|parseonly))?|endsubmit)\\b/i,\n          lookbehind: true,\n          alias: \"keyword\"\n        };\n        var actionSets = /aStore|accessControl|aggregation|audio|autotune|bayesianNetClassifier|bioMedImage|boolRule|builtins|cardinality|cdm|clustering|conditionalRandomFields|configuration|copula|countreg|dataDiscovery|dataPreprocess|dataSciencePilot|dataStep|decisionTree|deduplication|deepLearn|deepNeural|deepRnn|ds2|ecm|entityRes|espCluster|explainModel|factmac|fastKnn|fcmpact|fedSql|freqTab|gVarCluster|gam|gleam|graphSemiSupLearn|hiddenMarkovModel|hyperGroup|ica|image|iml|kernalPca|langModel|ldaTopic|loadStreams|mbc|mixed|mlTools|modelPublishing|network|neuralNet|nmf|nonParametricBayes|nonlinear|optNetwork|optimization|panel|pca|percentile|phreg|pls|qkb|qlim|quantreg|recommend|regression|reinforcementLearn|robustPca|ruleMining|sampling|sandwich|sccasl|search(?:Analytics)?|sentimentAnalysis|sequence|session(?:Prop)?|severity|simSystem|simple|smartData|sparkEmbeddedProcess|sparseML|spatialreg|spc|stabilityMonitoring|svDataDescription|svm|table|text(?:Filters|Frequency|Mining|Parse|Rule(?:Develop|Score)|Topic|Util)|timeData|transpose|tsInfo|tsReconcile|uniTimeSeries|varReduce/.source;\n        var casActions = {\n          pattern: RegExp(\n            /(^|\\s)(?:action\\s+)?(?:<act>)\\.[a-z]+\\b[^;]+/.source.replace(\n              /<act>/g,\n              function() {\n                return actionSets;\n              }\n            ),\n            \"i\"\n          ),\n          lookbehind: true,\n          inside: {\n            keyword: RegExp(\n              /(?:<act>)\\.[a-z]+\\b/.source.replace(/<act>/g, function() {\n                return actionSets;\n              }),\n              \"i\"\n            ),\n            action: {\n              pattern: /(?:action)/i,\n              alias: \"keyword\"\n            },\n            comment,\n            function: func,\n            \"arg-value\": args[\"arg-value\"],\n            operator: args.operator,\n            argument: args.arg,\n            number,\n            \"numeric-constant\": numericConstant,\n            punctuation,\n            string\n          }\n        };\n        var keywords = {\n          pattern: /((?:^|\\s)=?)(?:after|analysis|and|array|barchart|barwidth|begingraph|by|call|cas|cbarline|cfill|class(?:lev)?|close|column|computed?|contains|continue|data(?==)|define|delete|describe|document|do\\s+over|do|dol|drop|dul|else|end(?:comp|source)?|entryTitle|eval(?:uate)?|exec(?:ute)?|exit|file(?:name)?|fill(?:attrs)?|flist|fnc|function(?:list)?|global|goto|group(?:by)?|headline|headskip|histogram|if|infile|keep|keylabel|keyword|label|layout|leave|legendlabel|length|libname|loadactionset|merge|midpoints|_?null_|name|noobs|nowd|ods|options|or|otherwise|out(?:put)?|over(?:lay)?|plot|print|put|raise|ranexp|rannor|rbreak|retain|return|select|session|sessref|set|source|statgraph|sum|summarize|table|temp|terminate|then\\s+do|then|title\\d?|to|var|when|where|xaxisopts|y2axisopts|yaxisopts)\\b/i,\n          lookbehind: true\n        };\n        Prism2.languages.sas = {\n          datalines: {\n            pattern: /^([ \\t]*)(?:cards|(?:data)?lines);[\\s\\S]+?^[ \\t]*;/im,\n            lookbehind: true,\n            alias: \"string\",\n            inside: {\n              keyword: {\n                pattern: /^(?:cards|(?:data)?lines)/i\n              },\n              punctuation: /;/\n            }\n          },\n          \"proc-sql\": {\n            pattern: /(^proc\\s+(?:fed)?sql(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n            lookbehind: true,\n            inside: {\n              sql: {\n                pattern: RegExp(\n                  /^[ \\t]*(?:select|alter\\s+table|(?:create|describe|drop)\\s+(?:index|table(?:\\s+constraints)?|view)|create\\s+unique\\s+index|insert\\s+into|update)(?:<str>|[^;\"'])+;/.source.replace(\n                    /<str>/g,\n                    function() {\n                      return stringPattern;\n                    }\n                  ),\n                  \"im\"\n                ),\n                alias: \"language-sql\",\n                inside: Prism2.languages.sql\n              },\n              \"global-statements\": globalStatements,\n              \"sql-statements\": {\n                pattern: /(^|\\s)(?:disconnect\\s+from|begin|commit|exec(?:ute)?|reset|rollback|validate)\\b/i,\n                lookbehind: true,\n                alias: \"keyword\"\n              },\n              number,\n              \"numeric-constant\": numericConstant,\n              punctuation,\n              string\n            }\n          },\n          \"proc-groovy\": {\n            pattern: /(^proc\\s+groovy(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n            lookbehind: true,\n            inside: {\n              comment,\n              groovy: {\n                pattern: RegExp(\n                  /(^[ \\t]*submit(?:\\s+(?:load|norun|parseonly))?)(?:<str>|[^\"'])+?(?=endsubmit;)/.source.replace(\n                    /<str>/g,\n                    function() {\n                      return stringPattern;\n                    }\n                  ),\n                  \"im\"\n                ),\n                lookbehind: true,\n                alias: \"language-groovy\",\n                inside: Prism2.languages.groovy\n              },\n              keyword: keywords,\n              \"submit-statement\": submitStatement,\n              \"global-statements\": globalStatements,\n              number,\n              \"numeric-constant\": numericConstant,\n              punctuation,\n              string\n            }\n          },\n          \"proc-lua\": {\n            pattern: /(^proc\\s+lua(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n            lookbehind: true,\n            inside: {\n              comment,\n              lua: {\n                pattern: RegExp(\n                  /(^[ \\t]*submit(?:\\s+(?:load|norun|parseonly))?)(?:<str>|[^\"'])+?(?=endsubmit;)/.source.replace(\n                    /<str>/g,\n                    function() {\n                      return stringPattern;\n                    }\n                  ),\n                  \"im\"\n                ),\n                lookbehind: true,\n                alias: \"language-lua\",\n                inside: Prism2.languages.lua\n              },\n              keyword: keywords,\n              \"submit-statement\": submitStatement,\n              \"global-statements\": globalStatements,\n              number,\n              \"numeric-constant\": numericConstant,\n              punctuation,\n              string\n            }\n          },\n          \"proc-cas\": {\n            pattern: /(^proc\\s+cas(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|quit|data);|(?![\\s\\S]))/im,\n            lookbehind: true,\n            inside: {\n              comment,\n              \"statement-var\": {\n                pattern: /((?:^|\\s)=?)saveresult\\s[^;]+/im,\n                lookbehind: true,\n                inside: {\n                  ... (3762 more characters)"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00014962500426918268
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-GZI6MPYA.js (200) — 2024-07-28T11:41:34.422Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-GZI6MPYA.js"
        }
      ]
    }
  ]
}