{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-RD7DSSIU.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"1a49-4c8xUosP6JcRxYKf5l2kEBUK7jE\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/xml.js\nvar require_xml = __commonJS({\n  \"node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/xml.js\"(exports, module) {\n    function source(re) {\n      if (!re) return null;\n      if (typeof re === \"string\") return re;\n      return re.source;\n    }\n    function lookahead(re) {\n      return concat(\"(?=\", re, \")\");\n    }\n    function optional(re) {\n      return concat(\"(\", re, \")?\");\n    }\n    function concat(...args) {\n      const joined = args.map((x) => source(x)).join(\"\");\n      return joined;\n    }\n    function either(...args) {\n      const joined = \"(\" + args.map((x) => source(x)).join(\"|\") + \")\";\n      return joined;\n    }\n    function xml(hljs) {\n      const TAG_NAME_RE = concat(/[A-Z_]/, optional(/[A-Z0-9_.-]*:/), /[A-Z0-9_.-]*/);\n      const XML_IDENT_RE = /[A-Za-z0-9._:-]+/;\n      const XML_ENTITIES = {\n        className: \"symbol\",\n        begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/\n      };\n      const XML_META_KEYWORDS = {\n        begin: /\\s/,\n        contains: [\n          {\n            className: \"meta-keyword\",\n            begin: /#?[a-z_][a-z1-9_-]+/,\n            illegal: /\\n/\n          }\n        ]\n      };\n      const XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {\n        begin: /\\(/,\n        end: /\\)/\n      });\n      const APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, {\n        className: \"meta-string\"\n      });\n      const QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        className: \"meta-string\"\n      });\n      const TAG_INTERNALS = {\n        endsWithParent: true,\n        illegal: /</,\n        relevance: 0,\n        contains: [\n          {\n            className: \"attr\",\n            begin: XML_IDENT_RE,\n            relevance: 0\n          },\n          {\n            begin: /=\\s*/,\n            relevance: 0,\n            contains: [\n              {\n                className: \"string\",\n                endsParent: true,\n                variants: [\n                  {\n                    begin: /\"/,\n                    end: /\"/,\n                    contains: [XML_ENTITIES]\n                  },\n                  {\n                    begin: /'/,\n                    end: /'/,\n                    contains: [XML_ENTITIES]\n                  },\n                  {\n                    begin: /[^\\s\"'=<>`]+/\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      };\n      return {\n        name: \"HTML, XML\",\n        aliases: [\n          \"html\",\n          \"xhtml\",\n          \"rss\",\n          \"atom\",\n          \"xjb\",\n          \"xsd\",\n          \"xsl\",\n          \"plist\",\n          \"wsf\",\n          \"svg\"\n        ],\n        case_insensitive: true,\n        contains: [\n          {\n            className: \"meta\",\n            begin: /<![a-z]/,\n            end: />/,\n            relevance: 10,\n            contains: [\n              XML_META_KEYWORDS,\n              QUOTE_META_STRING_MODE,\n              APOS_META_STRING_MODE,\n              XML_META_PAR_KEYWORDS,\n              {\n                begin: /\\[/,\n                end: /\\]/,\n                contains: [\n                  {\n                    className: \"meta\",\n                    begin: /<![a-z]/,\n                    end: />/,\n                    contains: [\n                      XML_META_KEYWORDS,\n                      XML_META_PAR_KEYWORDS,\n                      QUOTE_META_STRING_MODE,\n                      APOS_META_STRING_MODE\n                    ]\n                  }\n                ]\n              }\n            ]\n          },\n          hljs.COMMENT(\n            /<!--/,\n            /-->/,\n            {\n              relevance: 10\n            }\n          ),\n          {\n            begin: /<!\\[CDATA\\[/,\n            end: /\\]\\]>/,\n            relevance: 10\n          },\n          XML_ENTITIES,\n          {\n            className: \"meta\",\n            begin: /<\\?xml/,\n            end: /\\?>/,\n            relevance: 10\n          },\n          {\n            className: \"tag\",\n            /*\n            The lookahead pattern (?=...) ensures that 'begin' only matches\n            '<style' as a single word, followed by a whitespace or an\n            ending braket. The '$' is needed for the lexeme to be recognized\n            by hljs.subMode() that tests lexemes outside the stream.\n            */\n            begin: /<style(?=\\s|>)/,\n            end: />/,\n            keywords: {\n              name: \"style\"\n            },\n            contains: [TAG_INTERNALS],\n            starts: {\n              end: /<\\/style>/,\n              returnEnd: true,\n              subLanguage: [\n                \"css\",\n                \"xml\"\n              ]\n            }\n          },\n          {\n            className: \"tag\",\n            // See the comment in the <style tag about the lookahead pattern\n            begin: /<script(?=\\s|>)/,\n            end: />/,\n            keywords: {\n              name: \"script\"\n            },\n            contains: [TAG_INTERNALS],\n            starts: {\n              end: /<\\/script>/,\n              returnEnd: true,\n              subLanguage: [\n                \"javascript\",\n                \"handlebars\",\n                \"xml\"\n              ]\n            }\n          },\n          // we need this for now for jSX\n          {\n            className: \"tag\",\n            begin: /<>|<\\/>/\n          },\n          // open tag\n          {\n            className: \"tag\",\n            begin: concat(\n              /</,\n              lookahead(concat(\n                TAG_NAME_RE,\n                // <tag/>\n                // <tag>\n                // <tag ...\n                either(/\\/>/, />/, /\\s/)\n              ))\n            ),\n            end: /\\/?>/,\n            contains: [\n              {\n                className: \"name\",\n                begin: TAG_NAME_RE,\n                relevance: 0,\n                starts: TAG_INTERNALS\n              }\n            ]\n          },\n          // close tag\n          {\n            className: \"tag\",\n            begin: concat(\n              /<\\//,\n              lookahead(concat(\n                TAG_NAME_RE,\n                />/\n              ))\n            ),\n            contains: [\n              {\n                className: \"name\",\n                begin: TAG_NAME_RE,\n                relevance: 0\n              },\n              {\n                begin: />/,\n                relevance: 0,\n                endsParent: true\n              }\n            ]\n          }\n        ]\n      };\n    }\n    module.exports = xml;\n  }\n});\n\nexport {\n  require_xml\n};\n//# sourceMappingURL=chunk-RD7DSSIU.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.0005420410307124257
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-RD7DSSIU.js (200) â€” 2024-07-28T11:41:40.227Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-RD7DSSIU.js"
        }
      ]
    }
  ]
}