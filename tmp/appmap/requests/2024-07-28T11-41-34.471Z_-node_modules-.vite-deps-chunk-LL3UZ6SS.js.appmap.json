{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-LL3UZ6SS.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"196b-RRi9isAUoeN5Gf0rnDm84CTe0ms\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/pug.js\nvar require_pug = __commonJS({\n  \"node_modules/refractor/lang/pug.js\"(exports, module) {\n    module.exports = pug;\n    pug.displayName = \"pug\";\n    pug.aliases = [];\n    function pug(Prism) {\n      ;\n      (function(Prism2) {\n        Prism2.languages.pug = {\n          // Multiline stuff should appear before the rest\n          // This handles both single-line and multi-line comments\n          comment: {\n            pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/m,\n            lookbehind: true\n          },\n          // All the tag-related part is in lookbehind\n          // so that it can be highlighted by the \"tag\" pattern\n          \"multiline-script\": {\n            pattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n            lookbehind: true,\n            inside: Prism2.languages.javascript\n          },\n          // See at the end of the file for known filters\n          filter: {\n            pattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n            lookbehind: true,\n            inside: {\n              \"filter-name\": {\n                pattern: /^:[\\w-]+/,\n                alias: \"variable\"\n              },\n              text: /\\S[\\s\\S]*/\n            }\n          },\n          \"multiline-plain-text\": {\n            pattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n            lookbehind: true\n          },\n          markup: {\n            pattern: /(^[\\t ]*)<.+/m,\n            lookbehind: true,\n            inside: Prism2.languages.markup\n          },\n          doctype: {\n            pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n            lookbehind: true\n          },\n          // This handle all conditional and loop keywords\n          \"flow-control\": {\n            pattern: /(^[\\t ]*)(?:case|default|each|else|if|unless|when|while)\\b(?: .+)?/m,\n            lookbehind: true,\n            inside: {\n              each: {\n                pattern: /^each .+? in\\b/,\n                inside: {\n                  keyword: /\\b(?:each|in)\\b/,\n                  punctuation: /,/\n                }\n              },\n              branch: {\n                pattern: /^(?:case|default|else|if|unless|when|while)\\b/,\n                alias: \"keyword\"\n              },\n              rest: Prism2.languages.javascript\n            }\n          },\n          keyword: {\n            pattern: /(^[\\t ]*)(?:append|block|extends|include|prepend)\\b.+/m,\n            lookbehind: true\n          },\n          mixin: [\n            // Declaration\n            {\n              pattern: /(^[\\t ]*)mixin .+/m,\n              lookbehind: true,\n              inside: {\n                keyword: /^mixin/,\n                function: /\\w+(?=\\s*\\(|\\s*$)/,\n                punctuation: /[(),.]/\n              }\n            },\n            // Usage\n            {\n              pattern: /(^[\\t ]*)\\+.+/m,\n              lookbehind: true,\n              inside: {\n                name: {\n                  pattern: /^\\+\\w+/,\n                  alias: \"function\"\n                },\n                rest: Prism2.languages.javascript\n              }\n            }\n          ],\n          script: {\n            pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]).+/m,\n            lookbehind: true,\n            inside: Prism2.languages.javascript\n          },\n          \"plain-text\": {\n            pattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]).+/m,\n            lookbehind: true\n          },\n          tag: {\n            pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n            lookbehind: true,\n            inside: {\n              attributes: [\n                {\n                  pattern: /&[^(]+\\([^)]+\\)/,\n                  inside: Prism2.languages.javascript\n                },\n                {\n                  pattern: /\\([^)]+\\)/,\n                  inside: {\n                    \"attr-value\": {\n                      pattern: /(=\\s*(?!\\s))(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n                      lookbehind: true,\n                      inside: Prism2.languages.javascript\n                    },\n                    \"attr-name\": /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n                    punctuation: /[!=(),]+/\n                  }\n                }\n              ],\n              punctuation: /:/,\n              \"attr-id\": /#[\\w\\-]+/,\n              \"attr-class\": /\\.[\\w\\-]+/\n            }\n          },\n          code: [\n            {\n              pattern: /(^[\\t ]*(?:-|!?=)).+/m,\n              lookbehind: true,\n              inside: Prism2.languages.javascript\n            }\n          ],\n          punctuation: /[.\\-!=|]+/\n        };\n        var filter_pattern = /(^([\\t ]*)):<filter_name>(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/.source;\n        var filters = [\n          {\n            filter: \"atpl\",\n            language: \"twig\"\n          },\n          {\n            filter: \"coffee\",\n            language: \"coffeescript\"\n          },\n          \"ejs\",\n          \"handlebars\",\n          \"less\",\n          \"livescript\",\n          \"markdown\",\n          {\n            filter: \"sass\",\n            language: \"scss\"\n          },\n          \"stylus\"\n        ];\n        var all_filters = {};\n        for (var i = 0, l = filters.length; i < l; i++) {\n          var filter = filters[i];\n          filter = typeof filter === \"string\" ? {\n            filter,\n            language: filter\n          } : filter;\n          if (Prism2.languages[filter.language]) {\n            all_filters[\"filter-\" + filter.filter] = {\n              pattern: RegExp(\n                filter_pattern.replace(\"<filter_name>\", function() {\n                  return filter.filter;\n                }),\n                \"m\"\n              ),\n              lookbehind: true,\n              inside: {\n                \"filter-name\": {\n                  pattern: /^:[\\w-]+/,\n                  alias: \"variable\"\n                },\n                text: {\n                  pattern: /\\S[\\s\\S]*/,\n                  alias: [filter.language, \"language-\" + filter.language],\n                  inside: Prism2.languages[filter.language]\n                }\n              }\n            };\n          }\n        }\n        Prism2.languages.insertBefore(\"pug\", \"filter\", all_filters);\n      })(Prism);\n    }\n  }\n});\n\nexport {\n  require_pug\n};\n//# sourceMappingURL=chunk-LL3UZ6SS.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00024754100013524294
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-LL3UZ6SS.js (200) â€” 2024-07-28T11:41:34.471Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-LL3UZ6SS.js"
        }
      ]
    }
  ]
}