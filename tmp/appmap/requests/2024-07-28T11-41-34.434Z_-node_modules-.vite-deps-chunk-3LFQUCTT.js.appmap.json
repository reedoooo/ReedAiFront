{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-3LFQUCTT.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"1615-VV9eQi+cuU+Qq9hVks986UAVuoU\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/puppet.js\nvar require_puppet = __commonJS({\n  \"node_modules/refractor/lang/puppet.js\"(exports, module) {\n    module.exports = puppet;\n    puppet.displayName = \"puppet\";\n    puppet.aliases = [];\n    function puppet(Prism) {\n      ;\n      (function(Prism2) {\n        Prism2.languages.puppet = {\n          heredoc: [\n            // Matches the content of a quoted heredoc string (subject to interpolation)\n            {\n              pattern: /(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,\n              lookbehind: true,\n              alias: \"string\",\n              inside: {\n                // Matches the end tag\n                punctuation: /(?=\\S).*\\S(?= *$)/\n                // See interpolation below\n              }\n            },\n            // Matches the content of an unquoted heredoc string (no interpolation)\n            {\n              pattern: /(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,\n              lookbehind: true,\n              greedy: true,\n              alias: \"string\",\n              inside: {\n                // Matches the end tag\n                punctuation: /(?=\\S).*\\S(?= *$)/\n              }\n            },\n            // Matches the start tag of heredoc strings\n            {\n              pattern: /@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,\n              alias: \"string\",\n              inside: {\n                punctuation: {\n                  pattern: /(\\().+?(?=\\))/,\n                  lookbehind: true\n                }\n              }\n            }\n          ],\n          \"multiline-comment\": {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n            lookbehind: true,\n            greedy: true,\n            alias: \"comment\"\n          },\n          regex: {\n            // Must be prefixed with the keyword \"node\" or a non-word char\n            pattern: /((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              // Extended regexes must have the x flag. They can contain single-line comments.\n              \"extended-regex\": {\n                pattern: /^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,\n                inside: {\n                  comment: /#.*/\n                }\n              }\n            }\n          },\n          comment: {\n            pattern: /(^|[^\\\\])#.*/,\n            lookbehind: true,\n            greedy: true\n          },\n          string: {\n            // Allow for one nested level of double quotes inside interpolation\n            pattern: /([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|\\$(?!\\{)|(?!\\1)[^\\\\$]|\\\\[\\s\\S])*\\1/,\n            greedy: true,\n            inside: {\n              \"double-quoted\": {\n                pattern: /^\"[\\s\\S]*\"$/,\n                inside: {\n                  // See interpolation below\n                }\n              }\n            }\n          },\n          variable: {\n            pattern: /\\$(?:::)?\\w+(?:::\\w+)*/,\n            inside: {\n              punctuation: /::/\n            }\n          },\n          \"attr-name\": /(?:\\b\\w+|\\*)(?=\\s*=>)/,\n          function: [\n            {\n              pattern: /(\\.)(?!\\d)\\w+/,\n              lookbehind: true\n            },\n            /\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/\n          ],\n          number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,\n          boolean: /\\b(?:false|true)\\b/,\n          // Includes words reserved for future use\n          keyword: /\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,\n          datatype: {\n            pattern: /\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,\n            alias: \"symbol\"\n          },\n          operator: /=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,\n          punctuation: /[\\[\\]{}().,;]|:+/\n        };\n        var interpolation = [\n          {\n            // Allow for one nested level of braces inside interpolation\n            pattern: /(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,\n            lookbehind: true,\n            inside: {\n              \"short-variable\": {\n                // Negative look-ahead prevent wrong highlighting of functions\n                pattern: /(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,\n                lookbehind: true,\n                alias: \"variable\",\n                inside: {\n                  punctuation: /::/\n                }\n              },\n              delimiter: {\n                pattern: /^\\$/,\n                alias: \"variable\"\n              },\n              rest: Prism2.languages.puppet\n            }\n          },\n          {\n            pattern: /(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,\n            lookbehind: true,\n            alias: \"variable\",\n            inside: {\n              punctuation: /::/\n            }\n          }\n        ];\n        Prism2.languages.puppet[\"heredoc\"][0].inside.interpolation = interpolation;\n        Prism2.languages.puppet[\"string\"].inside[\"double-quoted\"].inside.interpolation = interpolation;\n      })(Prism);\n    }\n  }\n});\n\nexport {\n  require_puppet\n};\n//# sourceMappingURL=chunk-3LFQUCTT.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.0008632090175524354
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-3LFQUCTT.js (200) â€” 2024-07-28T11:41:34.434Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-3LFQUCTT.js"
        }
      ]
    }
  ]
}