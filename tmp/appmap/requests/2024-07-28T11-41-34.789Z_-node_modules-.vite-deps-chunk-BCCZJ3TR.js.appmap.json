{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-BCCZJ3TR.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"12b5-BZoZ8wutQvY7p3DDOO2vLs1G+nc\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/markup-templating.js\nvar require_markup_templating = __commonJS({\n  \"node_modules/refractor/lang/markup-templating.js\"(exports, module) {\n    module.exports = markupTemplating;\n    markupTemplating.displayName = \"markupTemplating\";\n    markupTemplating.aliases = [];\n    function markupTemplating(Prism) {\n      ;\n      (function(Prism2) {\n        function getPlaceholder(language, index) {\n          return \"___\" + language.toUpperCase() + index + \"___\";\n        }\n        Object.defineProperties(Prism2.languages[\"markup-templating\"] = {}, {\n          buildPlaceholders: {\n            /**\n             * Tokenize all inline templating expressions matching `placeholderPattern`.\n             *\n             * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n             * `true` will be replaced.\n             *\n             * @param {object} env The environment of the `before-tokenize` hook.\n             * @param {string} language The language id.\n             * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n             * @param {(match: string) => boolean} [replaceFilter]\n             */\n            value: function(env, language, placeholderPattern, replaceFilter) {\n              if (env.language !== language) {\n                return;\n              }\n              var tokenStack = env.tokenStack = [];\n              env.code = env.code.replace(placeholderPattern, function(match) {\n                if (typeof replaceFilter === \"function\" && !replaceFilter(match)) {\n                  return match;\n                }\n                var i = tokenStack.length;\n                var placeholder;\n                while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n                  ++i;\n                }\n                tokenStack[i] = match;\n                return placeholder;\n              });\n              env.grammar = Prism2.languages.markup;\n            }\n          },\n          tokenizePlaceholders: {\n            /**\n             * Replace placeholders with proper tokens after tokenizing.\n             *\n             * @param {object} env The environment of the `after-tokenize` hook.\n             * @param {string} language The language id.\n             */\n            value: function(env, language) {\n              if (env.language !== language || !env.tokenStack) {\n                return;\n              }\n              env.grammar = Prism2.languages[language];\n              var j = 0;\n              var keys = Object.keys(env.tokenStack);\n              function walkTokens(tokens) {\n                for (var i = 0; i < tokens.length; i++) {\n                  if (j >= keys.length) {\n                    break;\n                  }\n                  var token = tokens[i];\n                  if (typeof token === \"string\" || token.content && typeof token.content === \"string\") {\n                    var k = keys[j];\n                    var t = env.tokenStack[k];\n                    var s = typeof token === \"string\" ? token : token.content;\n                    var placeholder = getPlaceholder(language, k);\n                    var index = s.indexOf(placeholder);\n                    if (index > -1) {\n                      ++j;\n                      var before = s.substring(0, index);\n                      var middle = new Prism2.Token(\n                        language,\n                        Prism2.tokenize(t, env.grammar),\n                        \"language-\" + language,\n                        t\n                      );\n                      var after = s.substring(index + placeholder.length);\n                      var replacement = [];\n                      if (before) {\n                        replacement.push.apply(replacement, walkTokens([before]));\n                      }\n                      replacement.push(middle);\n                      if (after) {\n                        replacement.push.apply(replacement, walkTokens([after]));\n                      }\n                      if (typeof token === \"string\") {\n                        tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                      } else {\n                        token.content = replacement;\n                      }\n                    }\n                  } else if (token.content) {\n                    walkTokens(token.content);\n                  }\n                }\n                return tokens;\n              }\n              walkTokens(env.tokens);\n            }\n          }\n        });\n      })(Prism);\n    }\n  }\n});\n\nexport {\n  require_markup_templating\n};\n//# sourceMappingURL=chunk-BCCZJ3TR.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00016149994917213917
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-BCCZJ3TR.js (200) â€” 2024-07-28T11:41:34.789Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-BCCZJ3TR.js"
        }
      ]
    }
  ]
}