{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/src/store/Slices/chat/promptSlice.jsx",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/src/store/Slices/chat/index.jsx",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22",
          "If-None-Match": "W/\"16fd-7YItxqaVwfk/u33vBvHVr09Zs4Q\""
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "no-cache",
          "Etag": "W/\"16fd-Xb/rVPRLm1LJmJn3A8JslmWOmdY\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import { createHotContext as __vite__createHotContext } from \"/@vite/client\";import.meta.hot = __vite__createHotContext(\"/src/store/Slices/chat/promptSlice.jsx\");import RefreshRuntime from \"/@react-refresh\";\nconst inWebWorker = typeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope;\nlet prevRefreshReg;\nlet prevRefreshSig;\nif (import.meta.hot && !inWebWorker) {\n  if (!window.__vite_plugin_react_preamble_installed__) {\n    throw new Error(\"@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201\");\n  }\n  prevRefreshReg = window.$RefreshReg$;\n  prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    RefreshRuntime.register(type, \"/Users/reedvogt/Desktop/ReedAiFront/src/store/Slices/chat/promptSlice.jsx \" + id);\n  };\n  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;\n}\nimport { createAsyncThunk, createSlice } from \"/node_modules/.vite/deps/@reduxjs_toolkit.js?v=6cb72b4f\";\nimport __vite__cjsImport3_mongoose from \"/node_modules/.vite/deps/mongoose.js?v=a0a28a61\"; const mongoose = __vite__cjsImport3_mongoose.__esModule ? __vite__cjsImport3_mongoose.default : __vite__cjsImport3_mongoose;\nimport { useSnackbar } from \"/node_modules/.vite/deps/notistack.js?v=ccaee18e\";\nimport { defaultPromptList } from \"/src/store/Slices/chat/helpers/index.jsx\";\nexport const addStaticPrompt = createAsyncThunk(\n  \"files/addPrompt\",\n  async (payload, { rejectWithValue }) => {\n    const { name, content } = payload;\n    const url = \"http://localhost:3001/api/files/add/prompt\";\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ name, content })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const result = await response.json();\n      console.log(\"Prompt added successfully:\", result);\n      return result;\n    } catch (error) {\n      console.error(\"Error adding custom prompt:\", error);\n      return rejectWithValue(error.message || \"An error occurred\");\n    }\n  }\n);\nconst LOCAL_NAME = \"promptStore\";\nfunction getLocalPromptList() {\n  const promptStore = JSON.parse(localStorage.getItem(LOCAL_NAME) || \"{}\");\n  if (promptStore && promptStore.promptList?.length > 0) {\n    return promptStore;\n  } else {\n    setLocalPromptList({ promptList: defaultPromptList() });\n    return { promptList: defaultPromptList() };\n  }\n}\nfunction setLocalPromptList(promptStore) {\n  localStorage.setItem(LOCAL_NAME, JSON.stringify(promptStore));\n}\nconst initialState = {\n  prompts: getLocalPromptList().promptList,\n  selectedPrompt: null,\n  promptRequest: {\n    status: \"idle\",\n    error: null\n  },\n  newPrompt: {\n    // folderId: new mongoose.Types.ObjectId(), // A new ObjectId for the folder\n    // userId: new mongoose.Types.ObjectId(), // A new ObjectId for the user\n    content: \"This is a sample prompt content.\",\n    name: \"Sample Prompt\",\n    sharing: \"private\",\n    // Could be 'private', 'public', etc.\n    key: \"sampleKey\",\n    // A unique key for identifying the prompt\n    value: \"sampleValue\",\n    // The corresponding value for the key\n    metadata: {\n      label: \"default prompt\",\n      text: \"A default prompt.\",\n      createdBy: \"default\",\n      description: \"This is a sample description for the default prompt.\",\n      type: \"defaultType\",\n      // Specify the type of prompt, e.g., 'question', 'instruction'\n      style: \"defaultStyle\",\n      // Specify the style, e.g., 'formal', 'casual'\n      props: {\n        // Additional properties or attributes\n        exampleProp: \"exampleValue\"\n      },\n      tags: [\"sample\", \"default\"]\n      // Tags for categorization\n    }\n  }\n};\nexport const promptSlice = createSlice({\n  name: \"prompts\",\n  initialState,\n  reducers: {\n    setPrompts: (state, action) => {\n      state.prompts = action.payload;\n      setLocalPromptList(action.payload);\n    },\n    setSelectedPrompt: (state, action) => {\n      state.selectedPrompt = action.payload;\n    }\n  },\n  extraReducers: (builder) => {\n    var _s = $RefreshSig$();\n    _s(builder.addCase(addStaticPrompt.fulfilled, (state, action) => {\n      state.prompts.unshift(action.payload);\n      setLocalPromptList(state);\n    }).addCase(addStaticPrompt.pending, (state, action) => {\n      state.promptRequest.status = \"loading\";\n    }).addCase(addStaticPrompt.rejected, _s((state, action) => {\n      _s();\n      state.promptRequest.status = \"failed\";\n      state.promptRequest.error = action.payload;\n      useSnackbar().enqueueSnackbar(\"Failed to add prompt\", {\n        variant: \"error\"\n      });\n    }, \"ldqFBWWP2VlqKgxPLVEsSp9nslQ=\", false, function() {\n      return [useSnackbar];\n    })), \"ldqFBWWP2VlqKgxPLVEsSp9nslQ=\", false, function() {\n      return [useSnackbar];\n    });\n  }\n});\nexport { initialState as promptInitialState };\nexport const {\n  setPrompts,\n  setSelectedPrompt\n  // addPrompt,\n  // modifyPrompt,\n  // deletePrompt,\n  // clearPrompts,\n  // importPrompts,\n  // exportPrompts,\n  // downloadPrompts,\n} = promptSlice.actions;\nexport default promptSlice.reducer;\nif (import.meta.hot && !inWebWorker) {\n  window.$RefreshReg$ = prevRefreshReg;\n  window.$RefreshSig$ = prevRefreshSig;\n}\nif (import.meta.hot && !inWebWorker) {\n  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {\n    RefreshRuntime.registerExportsForReactRefresh(\"/Users/reedvogt/Desktop/ReedAiFront/src/store/Slices/chat/promptSlice.jsx\", currentExports);\n    import.meta.hot.accept((nextExports) => {\n      if (!nextExports) return;\n      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports);\n      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);\n    });\n  });\n}\n\n//# sourceMappingURL=data:application/json;base64,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QU9yRDtBQUFBQSxJQUNoQztBQUFBLEVBQ0Y7QUFBQSxFQUNBdUQsZUFBZUEsQ0FBQUMsWUFBVztBQUFBLFFBQUFDLEtBQUFDLGFBQUE7QUFDeEJELE9BQUFELFFBWUdHLFFBQVE3RCxnQkFBZ0I4RCxXQUFXLENBQUNSLE9BQU9DLFdBQVc7QUFDckRELFlBQU1wQixRQUFRNkIsUUFBUVIsT0FBT3JELE9BQU87QUFDcEM2Qix5QkFBbUJ1QixLQUFLO0FBQUEsSUFDMUIsQ0FBQyxFQUNBTyxRQUFRN0QsZ0JBQWdCZ0UsU0FBUyxDQUFDVixPQUFPQyxXQUFXO0FBQ25ERCxZQUFNbEIsY0FBY3BCLFNBQVM7QUFBQSxJQUMvQixDQUFDLEVBQ0E2QyxRQUFRN0QsZ0JBQWdCaUUsVUFBUU4sR0FBRSxDQUFDTCxPQUFPQyxXQUFXO0FBQUFJLFNBQUE7QUFDcERMLFlBQU1sQixjQUFjcEIsU0FBUztBQUM3QnNDLFlBQU1sQixjQUFjZixRQUFRa0MsT0FBT3JEO0FBQ25DSixrQkFBWSxFQUFFb0UsZ0JBQWdCLHdCQUF3QjtBQUFBLFFBQ3BEQyxTQUFTO0FBQUEsTUFDWCxDQUFDO0FBQUEsSUFDSCxHQUFDO0FBQUEsY0FIQ3JFLFdBQVc7QUFBQSxNQUdaLEdBQUM7QUFBQSxjQUhBQSxXQUFXO0FBQUE7QUFBQSxFQTBFakI7QUFDRixDQUFDO0FBRUQsU0FBU21DLGdCQUFnQm1DO0FBRWxCLGFBQU07QUFBQSxFQUNYZjtBQUFBQSxFQUNBRztBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQVFGLElBQUlMLFlBQVlrQjtBQUVoQixlQUFlbEIsWUFBWW1CIiwibmFtZXMiOlsiY3JlYXRlU2xpY2UiLCJtb25nb29zZSIsInVzZVNuYWNrYmFyIiwiZGVmYXVsdFByb21wdExpc3QiLCJhZGRTdGF0aWNQcm9tcHQiLCJjcmVhdGVBc3luY1RodW5rIiwicGF5bG9hZCIsInJlamVjdFdpdGhWYWx1ZSIsIm5hbWUiLCJjb250ZW50IiwidXJsIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiLCJyZXN1bHQiLCJqc29uIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwibWVzc2FnZSIsIkxPQ0FMX05BTUUiLCJnZXRMb2NhbFByb21wdExpc3QiLCJwcm9tcHRTdG9yZSIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInByb21wdExpc3QiLCJsZW5ndGgiLCJzZXRMb2NhbFByb21wdExpc3QiLCJzZXRJdGVtIiwiaW5pdGlhbFN0YXRlIiwicHJvbXB0cyIsInNlbGVjdGVkUHJvbXB0IiwicHJvbXB0UmVxdWVzdCIsIm5ld1Byb21wdCIsInNoYXJpbmciLCJrZXkiLCJ2YWx1ZSIsIm1ldGFkYXRhIiwibGFi... (15268 more characters)"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.0006130419205874205
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /src/store/Slices/chat/promptSlice.jsx (200) — 2024-07-28T11:41:27.101Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /src/store/Slices/chat/promptSlice.jsx"
        }
      ]
    }
  ]
}