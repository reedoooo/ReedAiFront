{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-UE3WMYAV.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"18a4-DWUiyDsdhuOmbGVEBRQcEihKfas\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/lisp.js\nvar require_lisp = __commonJS({\n  \"node_modules/refractor/lang/lisp.js\"(exports, module) {\n    module.exports = lisp;\n    lisp.displayName = \"lisp\";\n    lisp.aliases = [];\n    function lisp(Prism) {\n      ;\n      (function(Prism2) {\n        function simple_form(name) {\n          return RegExp(/(\\()/.source + \"(?:\" + name + \")\" + /(?=[\\s\\)])/.source);\n        }\n        function primitive(pattern) {\n          return RegExp(\n            /([\\s([])/.source + \"(?:\" + pattern + \")\" + /(?=[\\s)])/.source\n          );\n        }\n        var symbol = /(?!\\d)[-+*/~!@$%^=<>{}\\w]+/.source;\n        var marker = \"&\" + symbol;\n        var par = \"(\\\\()\";\n        var endpar = \"(?=\\\\))\";\n        var space = \"(?=\\\\s)\";\n        var nestedPar = /(?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))*\\))*\\))*\\))*/.source;\n        var language = {\n          // Three or four semicolons are considered a heading.\n          // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n          heading: {\n            pattern: /;;;.*/,\n            alias: [\"comment\", \"title\"]\n          },\n          comment: /;.*/,\n          string: {\n            pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n            greedy: true,\n            inside: {\n              argument: /[-A-Z]+(?=[.,\\s])/,\n              symbol: RegExp(\"`\" + symbol + \"'\")\n            }\n          },\n          \"quoted-symbol\": {\n            pattern: RegExp(\"#?'\" + symbol),\n            alias: [\"variable\", \"symbol\"]\n          },\n          \"lisp-property\": {\n            pattern: RegExp(\":\" + symbol),\n            alias: \"property\"\n          },\n          splice: {\n            pattern: RegExp(\",@?\" + symbol),\n            alias: [\"symbol\", \"variable\"]\n          },\n          keyword: [\n            {\n              pattern: RegExp(\n                par + \"(?:and|(?:cl-)?letf|cl-loop|cond|cons|error|if|(?:lexical-)?let\\\\*?|message|not|null|or|provide|require|setq|unless|use-package|when|while)\" + space\n              ),\n              lookbehind: true\n            },\n            {\n              pattern: RegExp(\n                par + \"(?:append|by|collect|concat|do|finally|for|in|return)\" + space\n              ),\n              lookbehind: true\n            }\n          ],\n          declare: {\n            pattern: simple_form(/declare/.source),\n            lookbehind: true,\n            alias: \"keyword\"\n          },\n          interactive: {\n            pattern: simple_form(/interactive/.source),\n            lookbehind: true,\n            alias: \"keyword\"\n          },\n          boolean: {\n            pattern: primitive(/nil|t/.source),\n            lookbehind: true\n          },\n          number: {\n            pattern: primitive(/[-+]?\\d+(?:\\.\\d*)?/.source),\n            lookbehind: true\n          },\n          defvar: {\n            pattern: RegExp(par + \"def(?:const|custom|group|var)\\\\s+\" + symbol),\n            lookbehind: true,\n            inside: {\n              keyword: /^def[a-z]+/,\n              variable: RegExp(symbol)\n            }\n          },\n          defun: {\n            pattern: RegExp(\n              par + /(?:cl-)?(?:defmacro|defun\\*?)\\s+/.source + symbol + /\\s+\\(/.source + nestedPar + /\\)/.source\n            ),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              keyword: /^(?:cl-)?def\\S+/,\n              // See below, this property needs to be defined later so that it can\n              // reference the language object.\n              arguments: null,\n              function: {\n                pattern: RegExp(\"(^\\\\s)\" + symbol),\n                lookbehind: true\n              },\n              punctuation: /[()]/\n            }\n          },\n          lambda: {\n            pattern: RegExp(\n              par + \"lambda\\\\s+\\\\(\\\\s*(?:&?\" + symbol + \"(?:\\\\s+&?\" + symbol + \")*\\\\s*)?\\\\)\"\n            ),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              keyword: /^lambda/,\n              // See below, this property needs to be defined later so that it can\n              // reference the language object.\n              arguments: null,\n              punctuation: /[()]/\n            }\n          },\n          car: {\n            pattern: RegExp(par + symbol),\n            lookbehind: true\n          },\n          punctuation: [\n            // open paren, brackets, and close paren\n            /(?:['`,]?\\(|[)\\[\\]])/,\n            // cons\n            {\n              pattern: /(\\s)\\.(?=\\s)/,\n              lookbehind: true\n            }\n          ]\n        };\n        var arg = {\n          \"lisp-marker\": RegExp(marker),\n          varform: {\n            pattern: RegExp(\n              /\\(/.source + symbol + /\\s+(?=\\S)/.source + nestedPar + /\\)/.source\n            ),\n            inside: language\n          },\n          argument: {\n            pattern: RegExp(/(^|[\\s(])/.source + symbol),\n            lookbehind: true,\n            alias: \"variable\"\n          },\n          rest: language\n        };\n        var forms = \"\\\\S+(?:\\\\s+\\\\S+)*\";\n        var arglist = {\n          pattern: RegExp(par + nestedPar + endpar),\n          lookbehind: true,\n          inside: {\n            \"rest-vars\": {\n              pattern: RegExp(\"&(?:body|rest)\\\\s+\" + forms),\n              inside: arg\n            },\n            \"other-marker-vars\": {\n              pattern: RegExp(\"&(?:aux|optional)\\\\s+\" + forms),\n              inside: arg\n            },\n            keys: {\n              pattern: RegExp(\"&key\\\\s+\" + forms + \"(?:\\\\s+&allow-other-keys)?\"),\n              inside: arg\n            },\n            argument: {\n              pattern: RegExp(symbol),\n              alias: \"variable\"\n            },\n            punctuation: /[()]/\n          }\n        };\n        language[\"lambda\"].inside.arguments = arglist;\n        language[\"defun\"].inside.arguments = Prism2.util.clone(arglist);\n        language[\"defun\"].inside.arguments.inside.sublist = arglist;\n        Prism2.languages.lisp = language;\n        Prism2.languages.elisp = language;\n        Prism2.languages.emacs = language;\n        Prism2.languages[\"emacs-lisp\"] = language;\n      })(Prism);\n    }\n  }\n});\n\nexport {\n  require_lisp\n};\n//# sourceMappingURL=chunk-UE3WMYAV.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00014995899982750416
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-UE3WMYAV.js (200) â€” 2024-07-28T11:41:34.632Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-UE3WMYAV.js"
        }
      ]
    }
  ]
}