{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-SEH6VAJT.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-markdown.js?v=64d3d203",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"1f7e-5ZOuMmMgXrk1gplMa/nDtRyOLt8\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __publicField\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/devlop/lib/development.js\nvar AssertionError = class extends Error {\n  /**\n   * Create an assertion error.\n   *\n   * @param {string} message\n   *   Message explaining error.\n   * @param {unknown} actual\n   *   Value.\n   * @param {unknown} expected\n   *   Baseline.\n   * @param {string} operator\n   *   Name of equality operation.\n   * @param {boolean} generated\n   *   Whether `message` is a custom message or not\n   * @returns\n   *   Instance.\n   */\n  // eslint-disable-next-line max-params\n  constructor(message, actual, expected, operator, generated) {\n    super(message);\n    __publicField(\n      this,\n      \"name\",\n      /** @type {const} */\n      \"Assertion\"\n    );\n    __publicField(\n      this,\n      \"code\",\n      /** @type {const} */\n      \"ERR_ASSERTION\"\n    );\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n    this.actual = actual;\n    this.expected = expected;\n    this.generated = generated;\n    this.operator = operator;\n  }\n};\nfunction ok(value, message) {\n  assert(\n    Boolean(value),\n    false,\n    true,\n    \"ok\",\n    \"Expected value to be truthy\",\n    message\n  );\n}\nfunction unreachable(message) {\n  assert(false, false, true, \"ok\", \"Unreachable\", message);\n}\nfunction assert(bool, actual, expected, operator, defaultMessage, userMessage) {\n  if (!bool) {\n    throw userMessage instanceof Error ? userMessage : new AssertionError(\n      userMessage || defaultMessage,\n      actual,\n      expected,\n      operator,\n      !userMessage\n    );\n  }\n}\n\n// node_modules/unist-util-is/lib/index.js\nvar convert = (\n  // Note: overloads in JSDoc canâ€™t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  /**\n   * @param {Test} [test]\n   * @returns {Check}\n   */\n  function(test) {\n    if (test === null || test === void 0) {\n      return ok2;\n    }\n    if (typeof test === \"function\") {\n      return castFactory(test);\n    }\n    if (typeof test === \"object\") {\n      return Array.isArray(test) ? anyFactory(test) : propsFactory(test);\n    }\n    if (typeof test === \"string\") {\n      return typeFactory(test);\n    }\n    throw new Error(\"Expected function, string, or object as test\");\n  }\n);\nfunction anyFactory(tests) {\n  const checks = [];\n  let index = -1;\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index]);\n  }\n  return castFactory(any);\n  function any(...parameters) {\n    let index2 = -1;\n    while (++index2 < checks.length) {\n      if (checks[index2].apply(this, parameters)) return true;\n    }\n    return false;\n  }\n}\nfunction propsFactory(check) {\n  const checkAsRecord = (\n    /** @type {Record<string, unknown>} */\n    check\n  );\n  return castFactory(all);\n  function all(node) {\n    const nodeAsRecord = (\n      /** @type {Record<string, unknown>} */\n      /** @type {unknown} */\n      node\n    );\n    let key;\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false;\n    }\n    return true;\n  }\n}\nfunction typeFactory(check) {\n  return castFactory(type);\n  function type(node) {\n    return node && node.type === check;\n  }\n}\nfunction castFactory(testFunction) {\n  return check;\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) && testFunction.call(\n        this,\n        value,\n        typeof index === \"number\" ? index : void 0,\n        parent || void 0\n      )\n    );\n  }\n}\nfunction ok2() {\n  return true;\n}\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === \"object\" && \"type\" in value;\n}\n\n// node_modules/unist-util-visit-parents/lib/color.js\nfunction color(d) {\n  return d;\n}\n\n// node_modules/unist-util-visit-parents/lib/index.js\nvar empty = [];\nvar CONTINUE = true;\nvar EXIT = false;\nvar SKIP = \"skip\";\nfunction visitParents(tree, test, visitor, reverse) {\n  let check;\n  if (typeof test === \"function\" && typeof visitor !== \"function\") {\n    reverse = visitor;\n    visitor = test;\n  } else {\n    check = test;\n  }\n  const is2 = convert(check);\n  const step = reverse ? -1 : 1;\n  factory(tree, void 0, [])();\n  function factory(node, index, parents) {\n    const value = (\n      /** @type {Record<string, unknown>} */\n      node && typeof node === \"object\" ? node : {}\n    );\n    if (typeof value.type === \"string\") {\n      const name = (\n        // `hast`\n        typeof value.tagName === \"string\" ? value.tagName : (\n          // `xast`\n          typeof value.name === \"string\" ? value.name : void 0\n        )\n      );\n      Object.defineProperty(visit2, \"name\", {\n        value: \"node (\" + color(node.type + (name ? \"<\" + name + \">\" : \"\")) + \")\"\n      });\n    }\n    return visit2;\n    function visit2() {\n      let result = empty;\n      let subresult;\n      let offset;\n      let grandparents;\n      if (!test || is2(node, index, parents[parents.length - 1] || void 0)) {\n        result = toResult(visitor(node, parents));\n        if (result[0] === EXIT) {\n          return result;\n        }\n      }\n      if (\"children\" in node && node.children) {\n        const nodeAsParent = (\n          /** @type {UnistParent} */\n          node\n        );\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step;\n          grandparents = parents.concat(nodeAsParent);\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset];\n            subresult = factory(child, offset, grandparents)();\n            if (subresult[0] === EXIT) {\n              return subresult;\n            }\n            offset = typeof subresult[1] === \"number\" ? subresult[1] : offset + step;\n          }\n        }\n      }\n      return result;\n    }\n  }\n}\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n  if (typeof value === \"number\") {\n    return [CONTINUE, value];\n  }\n  return value === null || value === void 0 ? empty : [value];\n}\n\n// node_modules/unist-util-visit/lib/index.js\nfunction visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  let reverse;\n  let test;\n  let visitor;\n  if (typeof testOrVisitor === \"function\" && typeof visitorOrReverse !== \"function\") {\n    test = void 0;\n    visitor = testOrVisitor;\n    reverse = visitorOrReverse;\n  } else {\n    test = testOrVisitor;\n    visitor = visitorOrReverse;\n    reverse = maybeReverse;\n  }\n  visitParents(tree, test, overload, reverse);\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1];\n    const index = parent ? parent.children.indexOf(node) : void 0;\n    return visitor(node, index, parent);\n  }\n}\n\n// node_modules/decode-named-character-reference/index.dom.js\nvar element = document.createElement(\"i\");\nfunction decodeNamedCharacterReference(value) {\n  const characterReference = \"&\" + value + \";\";\n  element.innerHTML = characterReference;\n  const char = element.textContent;\n  if (char.charCodeAt(char.length - 1) === 59 && value !== \"semi\") {\n    return false;\n  }\n  return char === characterReference ? false : char;\n}\n\nexport {\n  ok,\n  unreachable,\n  decodeNamedCharacterReference,\n  convert,\n  EXIT,\n  visitParents,\n  visit\n};\n//# sourceMappingURL=chunk-SEH6VAJT.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00020541599951684475
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-SEH6VAJT.js (200) â€” 2024-07-28T11:41:34.045Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-SEH6VAJT.js"
        }
      ]
    }
  ]
}