{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-MT36GS5A.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"14a7-3WXbijpzxClVZHwHzpjBKh+v7Dg\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/http.js\nvar require_http = __commonJS({\n  \"node_modules/refractor/lang/http.js\"(exports, module) {\n    module.exports = http;\n    http.displayName = \"http\";\n    http.aliases = [];\n    function http(Prism) {\n      ;\n      (function(Prism2) {\n        function headerValueOf(name) {\n          return RegExp(\"(^(?:\" + name + \"):[ \t]*(?![ \t]))[^]+\", \"i\");\n        }\n        Prism2.languages.http = {\n          \"request-line\": {\n            pattern: /^(?:CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PRI|PUT|SEARCH|TRACE)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[\\d.]+/m,\n            inside: {\n              // HTTP Method\n              method: {\n                pattern: /^[A-Z]+\\b/,\n                alias: \"property\"\n              },\n              // Request Target e.g. http://example.com, /path/to/file\n              \"request-target\": {\n                pattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n                lookbehind: true,\n                alias: \"url\",\n                inside: Prism2.languages.uri\n              },\n              // HTTP Version\n              \"http-version\": {\n                pattern: /^(\\s)HTTP\\/[\\d.]+/,\n                lookbehind: true,\n                alias: \"property\"\n              }\n            }\n          },\n          \"response-status\": {\n            pattern: /^HTTP\\/[\\d.]+ \\d+ .+/m,\n            inside: {\n              // HTTP Version\n              \"http-version\": {\n                pattern: /^HTTP\\/[\\d.]+/,\n                alias: \"property\"\n              },\n              // Status Code\n              \"status-code\": {\n                pattern: /^(\\s)\\d+(?=\\s)/,\n                lookbehind: true,\n                alias: \"number\"\n              },\n              // Reason Phrase\n              \"reason-phrase\": {\n                pattern: /^(\\s).+/,\n                lookbehind: true,\n                alias: \"string\"\n              }\n            }\n          },\n          header: {\n            pattern: /^[\\w-]+:.+(?:(?:\\r\\n?|\\n)[ \\t].+)*/m,\n            inside: {\n              \"header-value\": [\n                {\n                  pattern: headerValueOf(/Content-Security-Policy/.source),\n                  lookbehind: true,\n                  alias: [\"csp\", \"languages-csp\"],\n                  inside: Prism2.languages.csp\n                },\n                {\n                  pattern: headerValueOf(/Public-Key-Pins(?:-Report-Only)?/.source),\n                  lookbehind: true,\n                  alias: [\"hpkp\", \"languages-hpkp\"],\n                  inside: Prism2.languages.hpkp\n                },\n                {\n                  pattern: headerValueOf(/Strict-Transport-Security/.source),\n                  lookbehind: true,\n                  alias: [\"hsts\", \"languages-hsts\"],\n                  inside: Prism2.languages.hsts\n                },\n                {\n                  pattern: headerValueOf(/[^:]+/.source),\n                  lookbehind: true\n                }\n              ],\n              \"header-name\": {\n                pattern: /^[^:]+/,\n                alias: \"keyword\"\n              },\n              punctuation: /^:/\n            }\n          }\n        };\n        var langs = Prism2.languages;\n        var httpLanguages = {\n          \"application/javascript\": langs.javascript,\n          \"application/json\": langs.json || langs.javascript,\n          \"application/xml\": langs.xml,\n          \"text/xml\": langs.xml,\n          \"text/html\": langs.html,\n          \"text/css\": langs.css,\n          \"text/plain\": langs.plain\n        };\n        var suffixTypes = {\n          \"application/json\": true,\n          \"application/xml\": true\n        };\n        function getSuffixPattern(contentType2) {\n          var suffix = contentType2.replace(/^[a-z]+\\//, \"\");\n          var suffixPattern = \"\\\\w+/(?:[\\\\w.-]+\\\\+)+\" + suffix + \"(?![+\\\\w.-])\";\n          return \"(?:\" + contentType2 + \"|\" + suffixPattern + \")\";\n        }\n        var options;\n        for (var contentType in httpLanguages) {\n          if (httpLanguages[contentType]) {\n            options = options || {};\n            var pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n            options[contentType.replace(/\\//g, \"-\")] = {\n              pattern: RegExp(\n                \"(\" + /content-type:\\s*/.source + pattern + /(?:(?:\\r\\n?|\\n)[\\w-].*)*(?:\\r(?:\\n|(?!\\n))|\\n)/.source + \")\" + // This is a little interesting:\n                // The HTTP format spec required 1 empty line before the body to make everything unambiguous.\n                // However, when writing code by hand (e.g. to display on a website) people can forget about this,\n                // so we want to be liberal here. We will allow the empty line to be omitted if the first line of\n                // the body does not start with a [\\w-] character (as headers do).\n                /[^ \\t\\w-][\\s\\S]*/.source,\n                \"i\"\n              ),\n              lookbehind: true,\n              inside: httpLanguages[contentType]\n            };\n          }\n        }\n        if (options) {\n          Prism2.languages.insertBefore(\"http\", \"header\", options);\n        }\n      })(Prism);\n    }\n  }\n});\n\nexport {\n  require_http\n};\n//# sourceMappingURL=chunk-MT36GS5A.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00020549993496388197
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-MT36GS5A.js (200) â€” 2024-07-28T11:41:34.703Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-MT36GS5A.js"
        }
      ]
    }
  ]
}