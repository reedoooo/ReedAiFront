{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-7FMRCSMA.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"1101-IRSp+ZwRVE+zhtC3wfh46NpNn+o\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/mermaid.js\nvar require_mermaid = __commonJS({\n  \"node_modules/refractor/lang/mermaid.js\"(exports, module) {\n    module.exports = mermaid;\n    mermaid.displayName = \"mermaid\";\n    mermaid.aliases = [];\n    function mermaid(Prism) {\n      Prism.languages.mermaid = {\n        comment: {\n          pattern: /%%.*/,\n          greedy: true\n        },\n        style: {\n          pattern: /^([ \\t]*(?:classDef|linkStyle|style)[ \\t]+[\\w$-]+[ \\t]+)\\w.*[^\\s;]/m,\n          lookbehind: true,\n          inside: {\n            property: /\\b\\w[\\w-]*(?=[ \\t]*:)/,\n            operator: /:/,\n            punctuation: /,/\n          }\n        },\n        \"inter-arrow-label\": {\n          pattern: /([^<>ox.=-])(?:-[-.]|==)(?![<>ox.=-])[ \\t]*(?:\"[^\"\\r\\n]*\"|[^\\s\".=-](?:[^\\r\\n.=-]*[^\\s.=-])?)[ \\t]*(?:\\.+->?|--+[->]|==+[=>])(?![<>ox.=-])/,\n          lookbehind: true,\n          greedy: true,\n          inside: {\n            arrow: {\n              pattern: /(?:\\.+->?|--+[->]|==+[=>])$/,\n              alias: \"operator\"\n            },\n            label: {\n              pattern: /^([\\s\\S]{2}[ \\t]*)\\S(?:[\\s\\S]*\\S)?/,\n              lookbehind: true,\n              alias: \"property\"\n            },\n            \"arrow-head\": {\n              pattern: /^\\S+/,\n              alias: [\"arrow\", \"operator\"]\n            }\n          }\n        },\n        arrow: [\n          // This might look complex but it really isn't.\n          // There are many possible arrows (see tests) and it's impossible to fit all of them into one pattern. The\n          // problem is that we only have one lookbehind per pattern. However, we cannot disallow too many arrow\n          // characters in the one lookbehind because that would create too many false negatives. So we have to split the\n          // arrows into different patterns.\n          {\n            // ER diagram\n            pattern: /(^|[^{}|o.-])[|}][|o](?:--|\\.\\.)[|o][|{](?![{}|o.-])/,\n            lookbehind: true,\n            alias: \"operator\"\n          },\n          {\n            // flow chart\n            // (?:==+|--+|-\\.*-)\n            pattern: /(^|[^<>ox.=-])(?:[<ox](?:==+|--+|-\\.*-)[>ox]?|(?:==+|--+|-\\.*-)[>ox]|===+|---+|-\\.+-)(?![<>ox.=-])/,\n            lookbehind: true,\n            alias: \"operator\"\n          },\n          {\n            // sequence diagram\n            pattern: /(^|[^<>()x-])(?:--?(?:>>|[x>)])(?![<>()x])|(?:<<|[x<(])--?(?!-))/,\n            lookbehind: true,\n            alias: \"operator\"\n          },\n          {\n            // class diagram\n            pattern: /(^|[^<>|*o.-])(?:[*o]--|--[*o]|<\\|?(?:--|\\.\\.)|(?:--|\\.\\.)\\|?>|--|\\.\\.)(?![<>|*o.-])/,\n            lookbehind: true,\n            alias: \"operator\"\n          }\n        ],\n        label: {\n          pattern: /(^|[^|<])\\|(?:[^\\r\\n\"|]|\"[^\"\\r\\n]*\")+\\|/,\n          lookbehind: true,\n          greedy: true,\n          alias: \"property\"\n        },\n        text: {\n          pattern: /(?:[(\\[{]+|\\b>)(?:[^\\r\\n\"()\\[\\]{}]|\"[^\"\\r\\n]*\")+(?:[)\\]}]+|>)/,\n          alias: \"string\"\n        },\n        string: {\n          pattern: /\"[^\"\\r\\n]*\"/,\n          greedy: true\n        },\n        annotation: {\n          pattern: /<<(?:abstract|choice|enumeration|fork|interface|join|service)>>|\\[\\[(?:choice|fork|join)\\]\\]/i,\n          alias: \"important\"\n        },\n        keyword: [\n          // This language has both case-sensitive and case-insensitive keywords\n          {\n            pattern: /(^[ \\t]*)(?:action|callback|class|classDef|classDiagram|click|direction|erDiagram|flowchart|gantt|gitGraph|graph|journey|link|linkStyle|pie|requirementDiagram|sequenceDiagram|stateDiagram|stateDiagram-v2|style|subgraph)(?![\\w$-])/m,\n            lookbehind: true,\n            greedy: true\n          },\n          {\n            pattern: /(^[ \\t]*)(?:activate|alt|and|as|autonumber|deactivate|else|end(?:[ \\t]+note)?|loop|opt|par|participant|rect|state|note[ \\t]+(?:over|(?:left|right)[ \\t]+of))(?![\\w$-])/im,\n            lookbehind: true,\n            greedy: true\n          }\n        ],\n        entity: /#[a-z0-9]+;/,\n        operator: {\n          pattern: /(\\w[ \\t]*)&(?=[ \\t]*\\w)|:::|:/,\n          lookbehind: true\n        },\n        punctuation: /[(){};]/\n      };\n    }\n  }\n});\n\nexport {\n  require_mermaid\n};\n//# sourceMappingURL=chunk-7FMRCSMA.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00031820801086723804
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-7FMRCSMA.js (200) â€” 2024-07-28T11:41:34.574Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-7FMRCSMA.js"
        }
      ]
    }
  ]
}