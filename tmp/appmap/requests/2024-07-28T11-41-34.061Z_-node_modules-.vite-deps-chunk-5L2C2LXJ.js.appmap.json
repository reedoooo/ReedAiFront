{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-5L2C2LXJ.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"1141-fDCqgkxB2iRf5BBL50T7Vj0R6g8\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/zig.js\nvar require_zig = __commonJS({\n  \"node_modules/refractor/lang/zig.js\"(exports, module) {\n    module.exports = zig;\n    zig.displayName = \"zig\";\n    zig.aliases = [];\n    function zig(Prism) {\n      ;\n      (function(Prism2) {\n        function literal(str) {\n          return function() {\n            return str;\n          };\n        }\n        var keyword = /\\b(?:align|allowzero|and|anyframe|anytype|asm|async|await|break|cancel|catch|comptime|const|continue|defer|else|enum|errdefer|error|export|extern|fn|for|if|inline|linksection|nakedcc|noalias|nosuspend|null|or|orelse|packed|promise|pub|resume|return|stdcallcc|struct|suspend|switch|test|threadlocal|try|undefined|union|unreachable|usingnamespace|var|volatile|while)\\b/;\n        var IDENTIFIER = \"\\\\b(?!\" + keyword.source + \")(?!\\\\d)\\\\w+\\\\b\";\n        var ALIGN = /align\\s*\\((?:[^()]|\\([^()]*\\))*\\)/.source;\n        var PREFIX_TYPE_OP = /(?:\\?|\\bpromise->|(?:\\[[^[\\]]*\\]|\\*(?!\\*)|\\*\\*)(?:\\s*<ALIGN>|\\s*const\\b|\\s*volatile\\b|\\s*allowzero\\b)*)/.source.replace(\n          /<ALIGN>/g,\n          literal(ALIGN)\n        );\n        var SUFFIX_EXPR = /(?:\\bpromise\\b|(?:\\berror\\.)?<ID>(?:\\.<ID>)*(?!\\s+<ID>))/.source.replace(\n          /<ID>/g,\n          literal(IDENTIFIER)\n        );\n        var TYPE = \"(?!\\\\s)(?:!?\\\\s*(?:\" + PREFIX_TYPE_OP + \"\\\\s*)*\" + SUFFIX_EXPR + \")+\";\n        Prism2.languages.zig = {\n          comment: [\n            {\n              pattern: /\\/\\/[/!].*/,\n              alias: \"doc-comment\"\n            },\n            /\\/{2}.*/\n          ],\n          string: [\n            {\n              // \"string\" and c\"string\"\n              pattern: /(^|[^\\\\@])c?\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              // multiline strings and c-strings\n              pattern: /([\\r\\n])([ \\t]+c?\\\\{2}).*(?:(?:\\r\\n?|\\n)\\2.*)*/,\n              lookbehind: true,\n              greedy: true\n            }\n          ],\n          char: {\n            // characters 'a', '\\n', '\\xFF', '\\u{10FFFF}'\n            pattern: /(^|[^\\\\])'(?:[^'\\\\\\r\\n]|[\\uD800-\\uDFFF]{2}|\\\\(?:.|x[a-fA-F\\d]{2}|u\\{[a-fA-F\\d]{1,6}\\}))'/,\n            lookbehind: true,\n            greedy: true\n          },\n          builtin: /\\B@(?!\\d)\\w+(?=\\s*\\()/,\n          label: {\n            pattern: /(\\b(?:break|continue)\\s*:\\s*)\\w+\\b|\\b(?!\\d)\\w+\\b(?=\\s*:\\s*(?:\\{|while\\b))/,\n            lookbehind: true\n          },\n          \"class-name\": [\n            // const Foo = struct {};\n            /\\b(?!\\d)\\w+(?=\\s*=\\s*(?:(?:extern|packed)\\s+)?(?:enum|struct|union)\\s*[({])/,\n            {\n              // const x: i32 = 9;\n              // var x: Bar;\n              // fn foo(x: bool, y: f32) void {}\n              pattern: RegExp(\n                /(:\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?[=;,)])|<TYPE>(?=\\s*(?:<ALIGN>\\s*)?\\{)/.source.replace(/<TYPE>/g, literal(TYPE)).replace(/<ALIGN>/g, literal(ALIGN))\n              ),\n              lookbehind: true,\n              inside: null\n              // see below\n            },\n            {\n              // extern fn foo(x: f64) f64; (optional alignment)\n              pattern: RegExp(\n                /(\\)\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?;)/.source.replace(/<TYPE>/g, literal(TYPE)).replace(/<ALIGN>/g, literal(ALIGN))\n              ),\n              lookbehind: true,\n              inside: null\n              // see below\n            }\n          ],\n          \"builtin-type\": {\n            pattern: /\\b(?:anyerror|bool|c_u?(?:int|long|longlong|short)|c_longdouble|c_void|comptime_(?:float|int)|f(?:16|32|64|128)|[iu](?:8|16|32|64|128|size)|noreturn|type|void)\\b/,\n            alias: \"keyword\"\n          },\n          keyword,\n          function: /\\b(?!\\d)\\w+(?=\\s*\\()/,\n          number: /\\b(?:0b[01]+|0o[0-7]+|0x[a-fA-F\\d]+(?:\\.[a-fA-F\\d]*)?(?:[pP][+-]?[a-fA-F\\d]+)?|\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\b/,\n          boolean: /\\b(?:false|true)\\b/,\n          operator: /\\.[*?]|\\.{2,3}|[-=]>|\\*\\*|\\+\\+|\\|\\||(?:<<|>>|[-+*]%|[-+*/%^&|<>!=])=?|[?~]/,\n          punctuation: /[.:,;(){}[\\]]/\n        };\n        Prism2.languages.zig[\"class-name\"].forEach(function(obj) {\n          if (obj.inside === null) {\n            obj.inside = Prism2.languages.zig;\n          }\n        });\n      })(Prism);\n    }\n  }\n});\n\nexport {\n  require_zig\n};\n//# sourceMappingURL=chunk-5L2C2LXJ.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00023466593120247126
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-5L2C2LXJ.js (200) â€” 2024-07-28T11:41:34.061Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-5L2C2LXJ.js"
        }
      ]
    }
  ]
}