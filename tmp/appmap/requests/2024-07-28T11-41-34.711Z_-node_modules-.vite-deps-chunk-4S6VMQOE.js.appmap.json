{
  "events": [
    {
      "event": "call",
      "http_server_request": {
        "path_info": "/node_modules/.vite/deps/chunk-4S6VMQOE.js",
        "request_method": "GET",
        "headers": {
          "Host": "localhost:3000",
          "Connection": "keep-alive",
          "Sec-Ch-Ua": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"",
          "Origin": "http://localhost:3000",
          "Sec-Ch-Ua-Mobile": "?0",
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
          "Sec-Ch-Ua-Platform": "\"macOS\"",
          "Accept": "*/*",
          "Sec-Fetch-Site": "same-origin",
          "Sec-Fetch-Mode": "cors",
          "Sec-Fetch-Dest": "script",
          "Referer": "http://localhost:3000/node_modules/.vite/deps/react-syntax-highlighter.js?v=69cd69d1",
          "Accept-Encoding": "gzip, deflate, br, zstd",
          "Accept-Language": "en-US,en;q=0.9",
          "Cookie": "__stripe_mid=ebfd26b6-c829-4742-8893-abaf894eb93edc4c96; colorMode=%22dark%22"
        },
        "protocol": "HTTP/1.1"
      },
      "id": 1,
      "thread_id": 0,
      "message": [
        {
          "name": "v",
          "value": "'b39bb78e'",
          "class": "String"
        }
      ]
    },
    {
      "event": "return",
      "http_server_response": {
        "status_code": 200,
        "headers": {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/javascript",
          "Cache-Control": "max-age=31536000,immutable",
          "Etag": "W/\"16d0-HZHoRMY/DTB/IU0+hqH0MDvpIho\""
        },
        "return_value": {
          "class": "[ResponseBody]",
          "value": "import {\n  __commonJS\n} from \"/node_modules/.vite/deps/chunk-4B2QHNJT.js?v=b39bb78e\";\n\n// node_modules/refractor/lang/graphql.js\nvar require_graphql = __commonJS({\n  \"node_modules/refractor/lang/graphql.js\"(exports, module) {\n    module.exports = graphql;\n    graphql.displayName = \"graphql\";\n    graphql.aliases = [];\n    function graphql(Prism) {\n      Prism.languages.graphql = {\n        comment: /#.*/,\n        description: {\n          pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n          greedy: true,\n          alias: \"string\",\n          inside: {\n            \"language-markdown\": {\n              pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n              lookbehind: true,\n              inside: Prism.languages.markdown\n            }\n          }\n        },\n        string: {\n          pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n          greedy: true\n        },\n        number: /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n        boolean: /\\b(?:false|true)\\b/,\n        variable: /\\$[a-z_]\\w*/i,\n        directive: {\n          pattern: /@[a-z_]\\w*/i,\n          alias: \"function\"\n        },\n        \"attr-name\": {\n          pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n          greedy: true\n        },\n        \"atom-input\": {\n          pattern: /\\b[A-Z]\\w*Input\\b/,\n          alias: \"class-name\"\n        },\n        scalar: /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n        constant: /\\b[A-Z][A-Z_\\d]*\\b/,\n        \"class-name\": {\n          pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n          lookbehind: true\n        },\n        fragment: {\n          pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n          lookbehind: true,\n          alias: \"function\"\n        },\n        \"definition-mutation\": {\n          pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n          lookbehind: true,\n          alias: \"function\"\n        },\n        \"definition-query\": {\n          pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n          lookbehind: true,\n          alias: \"function\"\n        },\n        keyword: /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n        operator: /[!=|&]|\\.{3}/,\n        \"property-query\": /\\w+(?=\\s*\\()/,\n        object: /\\w+(?=\\s*\\{)/,\n        punctuation: /[!(){}\\[\\]:=,]/,\n        property: /\\w+/\n      };\n      Prism.hooks.add(\"after-tokenize\", function afterTokenizeGraphql(env) {\n        if (env.language !== \"graphql\") {\n          return;\n        }\n        var validTokens = env.tokens.filter(function(token) {\n          return typeof token !== \"string\" && token.type !== \"comment\" && token.type !== \"scalar\";\n        });\n        var currentIndex = 0;\n        function getToken(offset) {\n          return validTokens[currentIndex + offset];\n        }\n        function isTokenType(types, offset) {\n          offset = offset || 0;\n          for (var i2 = 0; i2 < types.length; i2++) {\n            var token = getToken(i2 + offset);\n            if (!token || token.type !== types[i2]) {\n              return false;\n            }\n          }\n          return true;\n        }\n        function findClosingBracket(open, close) {\n          var stackHeight = 1;\n          for (var i2 = currentIndex; i2 < validTokens.length; i2++) {\n            var token = validTokens[i2];\n            var content = token.content;\n            if (token.type === \"punctuation\" && typeof content === \"string\") {\n              if (open.test(content)) {\n                stackHeight++;\n              } else if (close.test(content)) {\n                stackHeight--;\n                if (stackHeight === 0) {\n                  return i2;\n                }\n              }\n            }\n          }\n          return -1;\n        }\n        function addAlias(token, alias) {\n          var aliases = token.alias;\n          if (!aliases) {\n            token.alias = aliases = [];\n          } else if (!Array.isArray(aliases)) {\n            token.alias = aliases = [aliases];\n          }\n          aliases.push(alias);\n        }\n        for (; currentIndex < validTokens.length; ) {\n          var startToken = validTokens[currentIndex++];\n          if (startToken.type === \"keyword\" && startToken.content === \"mutation\") {\n            var inputVariables = [];\n            if (isTokenType([\"definition-mutation\", \"punctuation\"]) && getToken(1).content === \"(\") {\n              currentIndex += 2;\n              var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/);\n              if (definitionEnd === -1) {\n                continue;\n              }\n              for (; currentIndex < definitionEnd; currentIndex++) {\n                var t = getToken(0);\n                if (t.type === \"variable\") {\n                  addAlias(t, \"variable-input\");\n                  inputVariables.push(t.content);\n                }\n              }\n              currentIndex = definitionEnd + 1;\n            }\n            if (isTokenType([\"punctuation\", \"property-query\"]) && getToken(0).content === \"{\") {\n              currentIndex++;\n              addAlias(getToken(0), \"property-mutation\");\n              if (inputVariables.length > 0) {\n                var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/);\n                if (mutationEnd === -1) {\n                  continue;\n                }\n                for (var i = currentIndex; i < mutationEnd; i++) {\n                  var varToken = validTokens[i];\n                  if (varToken.type === \"variable\" && inputVariables.indexOf(varToken.content) >= 0) {\n                    addAlias(varToken, \"variable-input\");\n                  }\n                }\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n});\n\nexport {\n  require_graphql\n};\n//# sourceMappingURL=chunk-4S6VMQOE.js.map\n"
        }
      },
      "id": 2,
      "thread_id": 0,
      "parent_id": 1,
      "elapsed": 0.00025066593661904335
    }
  ],
  "version": "1.12",
  "metadata": {
    "client": {
      "name": "appmap-node",
      "version": "2.23.1",
      "url": "https://github.com/getappmap/appmap-node"
    },
    "language": {
      "name": "javascript",
      "engine": "Node.js",
      "version": "v20.15.1"
    },
    "app": "MyApp",
    "recorder": {
      "type": "requests",
      "name": "requests"
    },
    "name": "GET /node_modules/.vite/deps/chunk-4S6VMQOE.js (200) â€” 2024-07-28T11:41:34.711Z"
  },
  "classMap": [
    {
      "type": "http",
      "name": "HTTP server requests",
      "children": [
        {
          "type": "route",
          "name": "GET /node_modules/.vite/deps/chunk-4S6VMQOE.js"
        }
      ]
    }
  ]
}